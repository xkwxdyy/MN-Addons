<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>MNTask 任务看板</title>
    
    <!-- 引入测试数据 -->
    <script src="testData.js"></script>
    
    <style>
        /* ========================================
           🎨 CSS 变量定义 - 现代化设计系统
           ======================================== */
        :root {
            /* 主题色 - 深色系 */
            --bg-primary: #0a0a0f;
            --bg-secondary: #12121a;
            --bg-tertiary: #1a1a25;
            --bg-card: rgba(255, 255, 255, 0.03);
            --bg-hover: rgba(255, 255, 255, 0.06);
            --bg-active: rgba(102, 126, 234, 0.15);
            --bg-focus: rgba(102, 126, 234, 0.25);
            
            /* 玻璃效果 */
            --glass-bg: rgba(255, 255, 255, 0.04);
            --glass-border: rgba(255, 255, 255, 0.08);
            --glass-blur: blur(10px);
            
            /* 文字颜色 */
            --text-primary: #ffffff;
            --text-secondary: #a8a8b8;
            --text-muted: #6c6c7c;
            --text-disabled: #4a4a5a;
            
            /* 任务类型颜色 */
            --type-goal: #667eea;        /* 目标 - 紫蓝 */
            --type-kr: #f687b3;          /* 关键结果 - 粉红 */
            --type-project: #48bb78;     /* 项目 - 绿色 */
            --type-action: #ed8936;      /* 动作 - 橙色 */
            
            /* 状态颜色 */
            --status-todo: #718096;      /* 未开始 - 灰色 */
            --status-pause: #5b9dd9;     /* 暂停 - 蓝色 */
            --status-doing: #f6ad55;     /* 进行中 - 橙黄 */
            --status-done: #48bb78;      /* 已完成 - 绿色 */
            
            /* 优先级颜色 */
            --priority-high: #fc8181;    /* 高 - 红色 */
            --priority-medium: #f6e05e;  /* 中 - 黄色 */
            --priority-low: #68d391;     /* 低 - 绿色 */
            
            /* 其他样式变量 */
            --radius: 12px;
            --radius-sm: 6px;
            --radius-lg: 16px;
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            --shadow-lg: 0 10px 30px rgba(0, 0, 0, 0.4);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            
            /* 间距系统 */
            --spacing-xs: 4px;
            --spacing-sm: 8px;
            --spacing-md: 16px;
            --spacing-lg: 24px;
            --spacing-xl: 32px;
        }

        /* ========================================
           📐 基础样式重置
           ======================================== */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            overflow: hidden;
            -webkit-font-smoothing: antialiased;
        }

        /* 自定义滚动条 */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--bg-secondary);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--glass-border);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--text-disabled);
        }

        /* ========================================
           🏗️ 主布局结构
           ======================================== */
        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100vw;
            overflow: hidden;
        }

        /* 顶部导航栏 */
        .navbar {
            background: var(--glass-bg);
            backdrop-filter: var(--glass-blur);
            border-bottom: 1px solid var(--glass-border);
            padding: var(--spacing-md) var(--spacing-lg);
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-shrink: 0;
            z-index: 100;
        }

        .navbar-left {
            display: flex;
            align-items: center;
            gap: var(--spacing-lg);
            flex: 1;
        }

        .navbar-title {
            font-size: 1.25rem;
            font-weight: 600;
            background: linear-gradient(135deg, var(--type-goal) 0%, var(--type-kr) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* 快速添加任务输入框 */
        .quick-add-container {
            flex: 1;
            max-width: 500px;
        }

        .quick-add-input {
            width: 100%;
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.875rem;
            transition: var(--transition);
        }

        .quick-add-input:focus {
            outline: none;
            border-color: var(--type-goal);
            background: var(--bg-hover);
        }

        .quick-add-input::placeholder {
            color: var(--text-muted);
        }

        /* 视图切换按钮组 */
        .view-switcher {
            display: flex;
            gap: var(--spacing-xs);
            background: var(--bg-card);
            padding: var(--spacing-xs);
            border-radius: var(--radius-sm);
        }
        
        /* 全局功能按钮组 */
        .global-actions {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            margin-left: var(--spacing-lg);
        }
        
        .global-btn {
            width: 36px;
            height: 36px;
            border-radius: var(--radius-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            font-size: 1.125rem;
        }
        
        .global-btn:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
            border-color: var(--type-goal);
        }
        
        .global-btn.active {
            background: var(--bg-active);
            color: var(--type-goal);
        }
        
        .tooltip {
            position: absolute;
            bottom: -36px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--bg-tertiary);
            color: var(--text-primary);
            padding: var(--spacing-xs) var(--spacing-sm);
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
            pointer-events: none;
            box-shadow: var(--shadow);
        }
        
        .global-btn:hover .tooltip {
            opacity: 1;
            visibility: visible;
        }

        .view-btn {
            padding: var(--spacing-sm) var(--spacing-md);
            background: transparent;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            border-radius: var(--radius-sm);
            transition: var(--transition);
            font-size: 0.875rem;
            font-weight: 500;
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }

        .view-btn:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
        }

        .view-btn.active {
            background: var(--bg-active);
            color: var(--type-goal);
        }

        /* 主内容区域 */
        .main-content {
            flex: 1;
            display: flex;
            overflow: hidden;
        }

        /* 侧边栏 - 自定义视图 */
        .sidebar {
            width: 240px;
            background: var(--glass-bg);
            backdrop-filter: var(--glass-blur);
            border-right: 1px solid var(--glass-border);
            padding: var(--spacing-lg);
            overflow-y: auto;
            flex-shrink: 0;
            transition: transform 0.3s ease;
        }

        .sidebar.collapsed {
            transform: translateX(-240px);
            margin-right: -240px;
        }

        .sidebar-section {
            margin-bottom: var(--spacing-xl);
        }

        .sidebar-title {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--text-muted);
            margin-bottom: var(--spacing-md);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        /* 自定义视图列表 */
        .custom-view-item {
            padding: var(--spacing-sm) var(--spacing-md);
            margin-bottom: var(--spacing-xs);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 0.875rem;
        }

        .custom-view-item:hover {
            background: var(--bg-hover);
        }

        .custom-view-item.active {
            background: var(--bg-active);
            color: var(--type-goal);
        }

        /* 工作区 */
        .workspace {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            background: var(--bg-primary);
        }

        /* 视图容器 */
        .view-container {
            flex: 1;
            overflow-y: auto;
            padding: var(--spacing-lg);
        }

        /* ========================================
           🎯 焦点任务视图
           ======================================== */
        .focus-view {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* 当前焦点任务 */
        .current-focus-section {
            margin-bottom: var(--spacing-xl);
        }

        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: var(--spacing-lg);
        }

        .section-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .focus-task-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: var(--spacing-lg);
        }

        .focus-task-card {
            background: var(--glass-bg);
            backdrop-filter: var(--glass-blur);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-lg);
            padding: var(--spacing-lg);
            padding-left: calc(var(--spacing-lg) + 30px);
            transition: var(--transition);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .focus-task-card:hover {
            border-color: var(--type-goal);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .focus-task-card.active {
            border-color: var(--type-goal);
            background: var(--bg-focus);
        }

        /* 拖拽状态样式 */

        /* 拖拽手柄 */
        .drag-handle {
            position: absolute;
            left: var(--spacing-sm);
            top: 50%;
            transform: translateY(-50%);
            font-size: 20px;
            color: var(--text-muted);
            cursor: grab;
            opacity: 0;
            transition: opacity 0.2s;
            user-select: none;
            z-index: 10;
        }
        
        .focus-task-card:hover .drag-handle {
            opacity: 0.5;
        }
        
        .drag-handle:hover {
            opacity: 1 !important;
            color: var(--text-secondary);
        }
        
        /* 待处理任务拖拽样式 */
        .pending-task-item:hover .drag-handle {
            opacity: 0.5;
        }
        
        .pending-task-item .drag-handle:hover {
            opacity: 1 !important;
            color: var(--text-secondary);
        }
        
        .pending-task-item.dragging {
            opacity: 0.5;
            transform: scale(0.95);
            box-shadow: none;
            cursor: grabbing;
        }
        
        .pending-task-item.drop-indicator-top {
            margin-top: 25px;
            transition: margin 0.2s ease-out;
        }
        
        .pending-task-item.drop-indicator-top::before {
            content: '↓ 放置到这里';
            position: absolute;
            top: -25px;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 12px;
            box-shadow: 0 0 15px rgba(102, 126, 234, 0.6);
            animation: dropZonePulse 0.8s ease-in-out infinite;
        }
        
        .pending-task-item.drop-indicator-bottom {
            margin-bottom: 25px;
            transition: margin 0.2s ease-out;
        }
        
        .pending-task-item.drop-indicator-bottom::after {
            content: '↑ 放置到这里';
            position: absolute;
            bottom: -25px;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 12px;
            box-shadow: 0 0 15px rgba(102, 126, 234, 0.6);
            animation: dropZonePulse 0.8s ease-in-out infinite;
        }
        
        .drag-handle:active {
            cursor: grabbing;
        }
        
        /* 拖拽状态 */
        .focus-task-card.dragging {
            opacity: 0.3;
            transform: scale(0.95);
            box-shadow: none;
            cursor: grabbing;
        }
        
        /* 拖拽时的容器状态 */
        .focus-tasks-container.dragging-active {
            gap: calc(var(--spacing-lg) + 10px);
        }
        
        /* 插入指示器 */
        .focus-task-card.drop-indicator-top {
            margin-top: 35px;
            transition: margin 0.2s ease-out;
        }
        
        .focus-task-card.drop-indicator-top::before {
            content: '↓ 放置到这里';
            position: absolute;
            top: -35px;
            left: -5px;
            right: -5px;
            height: 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.6),
                        inset 0 0 20px rgba(255, 255, 255, 0.2);
            animation: dropZonePulse 0.8s ease-in-out infinite;
            z-index: 100;
        }
        
        .focus-task-card.drop-indicator-bottom {
            margin-bottom: 35px;
            transition: margin 0.2s ease-out;
        }
        
        .focus-task-card.drop-indicator-bottom::after {
            content: '↑ 放置到这里';
            position: absolute;
            bottom: -35px;
            left: -5px;
            right: -5px;
            height: 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.6),
                        inset 0 0 20px rgba(255, 255, 255, 0.2);
            animation: dropZonePulse 0.8s ease-in-out infinite;
            z-index: 100;
        }
        
        @keyframes dropZonePulse {
            0%, 100% { 
                opacity: 0.9; 
                transform: scale(1);
                box-shadow: 0 0 20px rgba(102, 126, 234, 0.6),
                            inset 0 0 20px rgba(255, 255, 255, 0.2);
            }
            50% { 
                opacity: 1; 
                transform: scale(1.02);
                box-shadow: 0 0 30px rgba(102, 126, 234, 0.8),
                            inset 0 0 30px rgba(255, 255, 255, 0.3);
            }
        }

        /* 焦点任务移除按钮 */
        .focus-task-remove {
            position: absolute;
            top: var(--spacing-sm);
            right: var(--spacing-sm);
            width: 28px;
            height: 28px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-secondary);
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            line-height: 1;
            transition: var(--transition);
            opacity: 0;
            z-index: 10;
        }

        .focus-task-card:hover .focus-task-remove {
            opacity: 1;
        }

        .focus-task-remove:hover {
            background: rgba(252, 129, 129, 0.2);
            color: #fc8181;
            transform: scale(1.1);
        }
        
        /* 当前任务标记按钮 */
        .focus-task-current {
            position: absolute;
            top: var(--spacing-sm);
            right: calc(var(--spacing-sm) + 36px);
            width: 28px;
            height: 28px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-secondary);
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            line-height: 1;
            transition: var(--transition);
            opacity: 0;
            z-index: 10;
        }
        
        .focus-task-card:hover .focus-task-current {
            opacity: 1;
        }
        
        .focus-task-current:hover {
            background: rgba(102, 126, 234, 0.2);
            color: var(--type-goal);
            transform: scale(1.1);
        }
        
        .focus-task-current.active {
            opacity: 1;
            color: #f6ad55;
            background: rgba(246, 173, 85, 0.2);
        }

        @media (max-width: 768px) {
            .focus-task-remove {
                opacity: 1;
                width: 36px;
                height: 36px;
                font-size: 20px;
            }
            
            .focus-task-current {
                opacity: 1;
                width: 36px;
                height: 36px;
                font-size: 20px;
                right: calc(var(--spacing-sm) + 44px);
            }
            
            .drag-handle {
                opacity: 0.3;
                font-size: 24px;
            }
        }


        /* 任务类型标签 */
        .task-type-badge {
            display: inline-flex;
            align-items: center;
            padding: var(--spacing-xs) var(--spacing-sm);
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
            font-weight: 500;
            margin-bottom: var(--spacing-md);
        }

        .task-type-badge.goal {
            background: rgba(102, 126, 234, 0.2);
            color: var(--type-goal);
        }

        .task-type-badge.kr {
            background: rgba(246, 135, 179, 0.2);
            color: var(--type-kr);
        }

        .task-type-badge.project {
            background: rgba(72, 187, 120, 0.2);
            color: var(--type-project);
        }

        .task-type-badge.action {
            background: rgba(237, 137, 54, 0.2);
            color: var(--type-action);
        }

        .focus-task-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: var(--spacing-sm);
            line-height: 1.4;
        }

        .focus-task-meta {
            display: flex;
            align-items: center;
            gap: var(--spacing-md);
            margin-bottom: var(--spacing-md);
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .focus-task-actions {
            display: flex;
            gap: var(--spacing-sm);
            margin-top: var(--spacing-lg);
        }
        
        /* 最近进展样式 */
        .recent-progress {
            margin: var(--spacing-md) 0;
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--bg-card);
            border-left: 3px solid var(--type-goal);
            border-radius: var(--radius-sm);
            font-size: 0.875rem;
        }
        
        .recent-progress-header {
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
            color: var(--text-muted);
            font-size: 0.75rem;
            margin-bottom: var(--spacing-xs);
        }
        
        .recent-progress-content {
            color: var(--text-primary);
            line-height: 1.4;
        }
        
        .recent-progress-time {
            color: var(--text-muted);
            font-size: 0.75rem;
        }

        .btn {
            padding: var(--spacing-sm) var(--spacing-md);
            border: none;
            border-radius: var(--radius-sm);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: var(--spacing-xs);
        }

        .btn-primary {
            background: var(--type-goal);
            color: white;
        }

        .btn-primary:hover {
            background: #5a6fd6;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: var(--bg-card);
            color: var(--text-primary);
            border: 1px solid var(--glass-border);
        }

        .btn-secondary:hover {
            background: var(--bg-hover);
            border-color: var(--text-muted);
        }

        /* 启动按钮特殊样式 */
        .btn-launch {
            background: linear-gradient(135deg, var(--type-goal) 0%, var(--type-kr) 100%);
            color: white;
            font-weight: 600;
        }

        .btn-launch:hover {
            transform: translateY(-1px) scale(1.02);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        /* ========================================
           📱 移动端优化
           ======================================== */
        @media (max-width: 768px) {
            /* 增大按钮点击区域 */
            .btn {
                min-height: 44px;
                padding: var(--spacing-md) var(--spacing-lg);
                font-size: 0.9375rem;
            }
            
            /* 确保焦点任务按钮有足够间距 */
            .focus-task-actions {
                gap: var(--spacing-md);
                margin-top: var(--spacing-md);
            }
            
            .focus-task-actions .btn {
                flex: 1;
                justify-content: center;
                min-width: auto;
            }
            
            /* 优化模态框关闭按钮 */
            .modal-close {
                width: 44px;
                height: 44px;
                font-size: 24px;
            }
            
            /* 侧边栏项目增大点击区域 */
            .custom-view-item,
            .list-checkbox,
            .task-select-item {
                min-height: 48px;
                padding: var(--spacing-md);
            }
            
            /* 待处理任务按钮优化 */
            .pending-task-item button {
                min-height: 36px;
                padding: var(--spacing-sm) var(--spacing-md);
            }
            
            /* 增加触摸反馈 */
            .btn:active,
            .focus-task-card:active,
            .custom-view-item:active {
                transform: scale(0.98);
                opacity: 0.9;
            }
            
            /* 防止误触，增加按钮间距 */
            .focus-task-meta {
                gap: var(--spacing-md);
                flex-wrap: wrap;
            }
            
            /* 快速输入框优化 */
            .quick-add-input {
                min-height: 48px;
                font-size: 16px; /* 防止iOS缩放 */
            }
            
            /* 看板移动端优化 */
            .type-boards-container {
                padding: var(--spacing-sm);
                gap: var(--spacing-lg);
            }
            
            .kanban-container {
                padding: var(--spacing-sm);
                gap: var(--spacing-sm);
            }
            
            .kanban-column {
                min-width: 260px;
            }
            
            .type-board-header {
                padding: var(--spacing-md);
            }
            
            .type-board-title {
                font-size: 1rem;
            }
        }

        /* 触摸设备优化 */
        @media (hover: none) and (pointer: coarse) {
            /* 移除悬停效果，改为触摸效果 */
            .focus-task-remove {
                opacity: 1;
            }
            
            /* 增强触摸反馈 */
            .btn,
            .focus-task-card,
            .task-select-item,
            .custom-view-item {
                -webkit-tap-highlight-color: rgba(102, 126, 234, 0.2);
            }
        }

        /* ========================================
           🔗 启动链接管理样式
           ======================================== */
        .launch-link-form {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-lg);
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }

        .form-label {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-secondary);
        }

        .form-input {
            width: 100%;
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.875rem;
            transition: var(--transition);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--type-goal);
            background: var(--bg-hover);
        }

        .form-hint {
            font-size: 0.75rem;
            color: var(--text-muted);
            margin: 0;
        }

        /* 链接类型选择器 */
        .link-type-selector {
            display: flex;
            gap: var(--spacing-sm);
            background: var(--glass-bg);
            padding: var(--spacing-xs);
            border-radius: var(--radius-sm);
        }

        .link-type-btn {
            flex: 1;
            padding: var(--spacing-sm) var(--spacing-md);
            border: none;
            background: transparent;
            color: var(--text-secondary);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--spacing-xs);
            font-size: 0.875rem;
        }

        .link-type-btn:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
        }

        .link-type-btn.active {
            background: var(--type-goal);
            color: white;
        }

        /* 最近链接 */
        .recent-links-section {
            border-top: 1px solid var(--glass-border);
            padding-top: var(--spacing-lg);
        }

        .recent-links-title {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-md);
        }

        .recent-links-list {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-xs);
        }

        .recent-link-item {
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }

        .recent-link-item:hover {
            border-color: var(--type-goal);
            background: var(--bg-hover);
        }

        .recent-link-icon {
            font-size: 1rem;
        }

        .recent-link-text {
            flex: 1;
            font-size: 0.75rem;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .recent-link-time {
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        /* ========================================
           📅 今日时间轴视图
           ======================================== */
        .timeline-section {
            margin-top: var(--spacing-xl);
        }

        .timeline-container {
            position: relative;
            padding-left: var(--spacing-xl);
        }

        .timeline-line {
            position: absolute;
            left: 12px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: var(--glass-border);
        }
        
        /* 时间轴日期分组 */
        .timeline-date-group {
            margin-bottom: var(--spacing-xl);
        }
        
        .timeline-date-label {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--type-goal);
            margin-bottom: var(--spacing-md);
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--bg-card);
            border-left: 3px solid var(--type-goal);
            border-radius: var(--radius-sm);
            display: inline-block;
        }

        .timeline-item {
            position: relative;
            margin-bottom: var(--spacing-lg);
            display: flex;
            align-items: flex-start;
            gap: var(--spacing-md);
        }

        .timeline-dot {
            position: absolute;
            left: -20px;
            top: 8px;
            width: 8px;
            height: 8px;
            background: var(--type-goal);
            border-radius: 50%;
            box-shadow: 0 0 0 4px var(--bg-primary), 0 0 0 6px var(--glass-border);
        }

        .timeline-time {
            min-width: 60px;
            font-size: 0.875rem;
            color: var(--text-muted);
            font-weight: 500;
        }

        .timeline-content {
            flex: 1;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-md);
            transition: var(--transition);
        }

        .timeline-content:hover {
            border-color: var(--type-goal);
            background: var(--bg-hover);
        }

        /* 进展记录子项样式 */
        .timeline-progress-logs {
            margin-top: var(--spacing-sm);
            padding-top: var(--spacing-sm);
            border-top: 1px solid var(--glass-border);
        }

        .timeline-progress-item {
            position: relative;
            padding-left: 20px;
            margin-bottom: 6px;
            font-size: 0.8rem;
            color: var(--text-muted);
            line-height: 1.4;
        }

        .timeline-progress-item::before {
            content: "├─";
            position: absolute;
            left: 0;
            top: 0;
            color: var(--glass-border);
            font-family: monospace;
        }

        .timeline-progress-item:last-child::before {
            content: "└─";
        }

        .timeline-progress-time {
            font-weight: 500;
            color: var(--type-keyresult);
            margin-right: 4px;
        }

        /* 时间轴控件容器 */
        .timeline-controls {
            display: flex;
            align-items: center;
            gap: var(--spacing-lg);
            margin-left: auto;
        }
        
        /* 时间轴视图模式切换 */
        .timeline-view-mode {
            display: flex;
            gap: 4px;
            background: var(--bg-card);
            padding: 4px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--glass-border);
        }
        
        .view-mode-btn {
            padding: 6px 12px;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            border-radius: var(--radius-sm);
            transition: var(--transition);
        }
        
        .view-mode-btn:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
        }
        
        .view-mode-btn.active {
            background: var(--bg-active);
            color: var(--type-goal);
        }
        
        /* 时间轴日期选择器样式 */
        .timeline-date-controls {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }

        .timeline-date-picker {
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.875rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .timeline-date-picker:hover {
            border-color: var(--type-goal);
        }

        .timeline-date-picker:focus {
            outline: none;
            border-color: var(--type-goal);
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        .date-nav-btn {
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-secondary);
            font-size: 0.875rem;
            cursor: pointer;
            transition: var(--transition);
            min-width: 32px;
        }

        .date-nav-btn:hover {
            border-color: var(--type-goal);
            color: var(--type-goal);
            background: var(--bg-hover);
        }

        .date-nav-btn.today-btn {
            padding: var(--spacing-xs) var(--spacing-md);
        }

        /* 日期导航分组样式 */
        .timeline-date-controls {
            display: flex;
            align-items: center;
            gap: var(--spacing-lg);
            flex-wrap: wrap;
        }

        .date-nav-section,
        .quick-date-section,
        .week-nav-section {
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }

        .quick-date-section .date-nav-btn {
            min-width: 48px;
            padding: var(--spacing-xs) var(--spacing-sm);
        }

        .week-nav-section .date-nav-btn {
            min-width: 48px;
            font-size: 0.8rem;
        }

        /* 小屏幕适配 */
        @media (max-width: 768px) {
            .timeline-date-controls {
                flex-direction: column;
                gap: var(--spacing-sm);
            }
            
            .date-nav-section,
            .quick-date-section,
            .week-nav-section {
                width: 100%;
                justify-content: center;
            }
        }

        .timeline-stats {
            display: flex;
            gap: var(--spacing-lg);
            margin: var(--spacing-md) 0;
            padding: var(--spacing-md);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            font-size: 0.875rem;
        }

        .timeline-stat {
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }

        .timeline-stat-label {
            color: var(--text-muted);
        }

        .timeline-stat-value {
            font-weight: 600;
            color: var(--text-primary);
        }
        

        /* 时间轴空状态样式 */
        .timeline-empty-state {
            text-align: center;
            padding: var(--spacing-xl) var(--spacing-lg);
            color: var(--text-muted);
        }

        .empty-state-icon {
            font-size: 3rem;
            margin-bottom: var(--spacing-md);
            opacity: 0.5;
        }

        .empty-state-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-sm);
        }

        .empty-state-text {
            font-size: 0.875rem;
            margin-bottom: var(--spacing-lg);
        }

        .empty-state-actions {
            display: flex;
            gap: var(--spacing-md);
            justify-content: center;
        }
        
        /* ========================================
           🔀 并发任务样式
           ======================================== */
        .timeline-content-wrapper {
            flex: 1;
            position: relative;
        }
        
        .timeline-content-wrapper.concurrent {
            padding: var(--spacing-sm);
            background: var(--glass-bg);
            border: 2px dashed var(--type-project);
            border-radius: var(--radius);
        }
        
        .concurrent-label {
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--type-project);
            margin-bottom: var(--spacing-sm);
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }
        
        .timeline-item.concurrent-group .timeline-dot {
            width: 12px;
            height: 12px;
            background: var(--type-project);
            box-shadow: 0 0 0 4px var(--bg-primary), 0 0 0 6px var(--type-project);
        }
        
        .timeline-content.concurrent-task {
            position: relative;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .timeline-content.concurrent-task:hover {
            transform: translateX(-10px) scale(1.02);
            opacity: 1 !important;
            z-index: 10;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
        }
        
        .timeline-content.concurrent-task::before {
            content: "🔀";
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--type-project);
            color: white;
            font-size: 0.75rem;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* ========================================
           📝 快速进展输入样式
           ======================================== */
        .quick-progress-section {
            margin-top: var(--spacing-sm);
            border-top: 1px solid var(--glass-border);
            padding-top: var(--spacing-sm);
        }

        .quick-progress-panel {
            margin-top: var(--spacing-sm);
            padding: var(--spacing-sm);
            background: var(--bg-tertiary);
            border-radius: var(--radius-sm);
            border: 1px solid var(--glass-border);
            animation: slideDown 0.2s ease-out;
        }

        .quick-progress-panel.hidden {
            display: none;
        }

        .progress-input {
            width: 100%;
            min-height: 60px;
            max-height: 120px;
            padding: var(--spacing-sm);
            background: var(--bg-secondary);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.85rem;
            line-height: 1.4;
            resize: vertical;
            font-family: inherit;
            transition: var(--transition);
        }

        .progress-input:focus {
            outline: none;
            border-color: var(--type-action);
            box-shadow: 0 0 0 2px rgba(237, 137, 54, 0.2);
        }

        .progress-input::placeholder {
            color: var(--text-muted);
        }

        .progress-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: var(--spacing-xs);
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        .progress-char-count {
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }

        .char-count {
            font-weight: 600;
            transition: color 0.3s ease;
        }

        .progress-tip {
            font-style: italic;
            opacity: 0.8;
        }

        .progress-actions {
            display: flex;
            gap: var(--spacing-sm);
            margin-top: var(--spacing-sm);
            justify-content: flex-end;
        }

        .btn-sm {
            padding: 4px 12px;
            font-size: 0.8rem;
            min-height: 28px;
            font-weight: 500;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid var(--glass-border);
            color: var(--text-secondary);
            transition: var(--transition);
        }

        .btn-outline:hover {
            background: var(--bg-hover);
            border-color: var(--type-action);
            color: var(--text-primary);
        }

        /* 快速进展输入动画 */
        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes pulse {
            0% {
                opacity: 1;
            }
            50% {
                opacity: 0.6;
            }
            100% {
                opacity: 1;
            }
        }

        /* 移动端适配 */
        @media (max-width: 768px) {
            .progress-input {
                min-height: 50px;
                font-size: 0.875rem;
            }
            
            .progress-actions {
                flex-direction: column;
                gap: var(--spacing-xs);
            }
            
            .btn-sm {
                width: 100%;
                padding: var(--spacing-sm);
            }
        }

        /* ========================================
           📝 时间轴进展记录显示样式
           ======================================== */
        .timeline-main-content {
            width: 100%;
        }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: var(--spacing-md);
            margin-bottom: var(--spacing-md);
        }

        .task-info {
            flex: 1;
            cursor: pointer;
            transition: var(--transition);
        }

        .task-info:hover {
            opacity: 0.8;
        }

        .task-actions {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-xs);
            flex-shrink: 0;
        }

        .task-actions .btn {
            min-width: 32px;
            height: 32px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .timeline-progress-display {
            margin: var(--spacing-md) 0;
            padding: var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            font-size: 0.8rem;
            line-height: 1.4;
        }

        .progress-header {
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-xs);
            font-size: 0.75rem;
        }

        .progress-item {
            margin-bottom: 2px;
            padding: 2px 0;
            color: var(--text-primary);
        }

        .progress-item.latest {
            font-weight: 500;
            color: var(--type-action);
        }

        .progress-item.history {
            color: var(--text-muted);
            padding-left: var(--spacing-sm);
        }

        .progress-more {
            color: var(--text-muted);
            font-style: italic;
            margin-top: var(--spacing-xs);
            font-size: 0.7rem;
        }

        .timeline-progress-empty {
            color: var(--text-muted);
            font-style: italic;
            text-align: center;
            padding: var(--spacing-sm);
            font-size: 0.75rem;
        }

        .progress-inline-actions {
            display: flex;
            gap: var(--spacing-xs);
            margin-top: var(--spacing-sm);
        }

        .progress-inline-actions .btn {
            font-size: 0.7rem;
            padding: 2px 8px;
            height: 24px;
            min-width: 50px;
            border-radius: 4px;
        }

        /* 可编辑字段样式 */
        .editable-field {
            cursor: pointer;
            padding: 2px 6px;
            border-radius: 4px;
            border: 1px solid transparent;
            transition: var(--transition);
            position: relative;
        }

        .editable-field:hover {
            background: var(--bg-hover);
            border-color: var(--glass-border);
        }

        .editable-field::after {
            content: "✏️";
            opacity: 0;
            position: absolute;
            right: -20px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 0.7rem;
            transition: var(--transition);
        }

        .editable-field:hover::after {
            opacity: 0.6;
        }

        .field-editing {
            background: var(--bg-focus);
            border-color: var(--type-action);
        }

        .field-input {
            background: var(--bg-secondary);
            border: 1px solid var(--type-action);
            border-radius: 4px;
            padding: 4px 8px;
            color: var(--text-primary);
            font-size: inherit;
            width: 100%;
            outline: none;
        }

        .priority-select {
            background: var(--bg-secondary);
            border: 1px solid var(--type-action);
            border-radius: 4px;
            padding: 4px 8px;
            color: var(--text-primary);
            font-size: inherit;
            outline: none;
        }

        .tags-editor {
            background: var(--bg-secondary);
            border: 1px solid var(--type-action);
            border-radius: 4px;
            padding: 4px 8px;
            color: var(--text-primary);
            font-size: inherit;
            width: 100%;
            outline: none;
            min-height: 60px;
        }

        /* 按钮颜色变化 */
        .btn-success {
            background: var(--status-done);
            border-color: var(--status-done);
        }

        .btn-success:hover {
            background: #3ea663;
            border-color: #3ea663;
        }

        /* ========================================
           📝 时间轴进展记录响应式设计
           ======================================== */
        @media (max-width: 768px) {
            .timeline-header {
                flex-direction: column;
                gap: var(--spacing-sm);
            }
            
            .task-actions {
                flex-direction: row;
                align-self: stretch;
                justify-content: space-between;
            }
            
            .task-actions .btn {
                flex: 1;
                min-width: auto;
                height: 36px;
                font-size: 0.8rem;
            }
            
            .timeline-progress-display {
                font-size: 0.75rem;
            }
            
            .progress-item.history {
                padding-left: var(--spacing-xs);
            }
        }

        @media (max-width: 480px) {
            .task-actions .btn {
                height: 32px;
                font-size: 0.75rem;
            }
            
            .timeline-progress-display {
                margin: var(--spacing-sm) 0;
                padding: var(--spacing-xs);
            }
        }

        /* ========================================
           🔍 筛选器面板
           ======================================== */
        .filter-panel {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-lg);
            margin-bottom: var(--spacing-lg);
        }

        .filter-row {
            display: flex;
            gap: var(--spacing-md);
            margin-bottom: var(--spacing-md);
            flex-wrap: wrap;
        }

        .filter-group {
            flex: 1;
            min-width: 200px;
        }

        .filter-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-xs);
        }

        .filter-input {
            width: 100%;
            padding: var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.875rem;
        }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: var(--spacing-xs);
            margin-top: var(--spacing-sm);
        }

        .filter-tag {
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .filter-tag:hover {
            border-color: var(--type-goal);
        }

        .filter-tag.active {
            background: var(--bg-active);
            border-color: var(--type-goal);
            color: var(--type-goal);
        }

        /* ========================================
           💾 可保存视图管理
           ======================================== */
        .save-view-btn {
            padding: var(--spacing-xs) var(--spacing-sm);
            background: transparent;
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-secondary);
            font-size: 0.75rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .save-view-btn:hover {
            border-color: var(--type-goal);
            color: var(--type-goal);
        }

        /* ========================================
           📊 进展记录面板
           ======================================== */
        .progress-log-panel {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-lg);
            margin-top: var(--spacing-md);
        }

        .progress-log-item {
            display: flex;
            gap: var(--spacing-md);
            padding: var(--spacing-sm) 0;
            border-bottom: 1px solid var(--glass-border);
        }

        .progress-log-item:last-child {
            border-bottom: none;
        }

        .progress-log-time {
            font-size: 0.75rem;
            color: var(--text-muted);
            min-width: 120px;
        }

        .progress-log-content {
            flex: 1;
            font-size: 0.875rem;
        }

        /* ========================================
           🔔 并发冲突提示样式
           ======================================== */
        .concurrent-indicator {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 2px 8px;
            background: var(--type-project);
            color: white;
            font-size: 0.7rem;
            font-weight: 600;
            border-radius: 12px;
            margin-left: var(--spacing-sm);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        .focus-task-card.has-conflict {
            border: 2px solid var(--type-project);
        }
        
        .focus-task-card.has-conflict::before {
            content: "🔀";
            position: absolute;
            top: -10px;
            right: -10px;
            background: var(--type-project);
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }
        
        /* ========================================
           🎨 动画效果
           ======================================== */
        .fade-in {
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-in {
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* ========================================
           📱 响应式设计
           ======================================== */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: 0;
                top: 0;
                bottom: 0;
                z-index: 1000;
                box-shadow: var(--shadow-lg);
            }

            .sidebar.collapsed {
                transform: translateX(-100%);
            }

            .navbar {
                flex-wrap: wrap;
                gap: var(--spacing-md);
            }

            .quick-add-container {
                order: 3;
                flex-basis: 100%;
            }

            .focus-task-container {
                grid-template-columns: 1fr;
            }
        }

        /* ========================================
           ⚠️ 冲突任务列表样式
           ======================================== */
        .conflict-tasks-list {
            background: var(--glass-bg);
            border: 1px solid var(--type-project);
            border-radius: var(--radius-sm);
            padding: var(--spacing-sm);
            margin-top: var(--spacing-sm);
        }
        
        .conflict-task-item {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            padding: var(--spacing-xs) 0;
            border-bottom: 1px solid var(--glass-border);
        }
        
        .conflict-task-item:last-child {
            border-bottom: none;
        }
        
        .conflict-task-item .task-type-badge {
            flex-shrink: 0;
        }
        
        .conflict-task-item .text-small {
            flex: 1;
        }
        
        .conflict-task-item .text-muted {
            flex-shrink: 0;
            font-weight: 500;
        }
        
        /* ========================================
           🛠️ 工具类
           ======================================== */
        .hidden {
            display: none !important;
        }
        
        /* ========================================
           🔍 自动完成下拉菜单
           ======================================== */
        .autocomplete-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: var(--bg-secondary);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            margin-top: 4px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: var(--shadow);
            display: none;
        }
        
        .autocomplete-dropdown.active {
            display: block;
        }
        
        .autocomplete-item {
            padding: var(--spacing-sm) var(--spacing-md);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            font-size: 0.875rem;
        }
        
        .autocomplete-item:hover,
        .autocomplete-item.selected {
            background: var(--bg-hover);
            color: var(--type-goal);
        }
        
        .autocomplete-item-icon {
            font-size: 1rem;
        }
        
        .autocomplete-item-name {
            flex: 1;
        }
        
        .autocomplete-item-id {
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        .text-muted {
            color: var(--text-muted);
        }

        .text-info {
            color: var(--status-pause);
        }

        .text-warning {
            color: var(--status-doing);
        }

        .text-success {
            color: var(--status-done);
        }

        .text-small {
            font-size: 0.875rem;
        }

        .mt-1 { margin-top: var(--spacing-sm); }
        .mt-2 { margin-top: var(--spacing-md); }
        .mt-3 { margin-top: var(--spacing-lg); }
        .mb-1 { margin-bottom: var(--spacing-sm); }
        .mb-2 { margin-bottom: var(--spacing-md); }
        .mb-3 { margin-bottom: var(--spacing-lg); }
        
        /* ========================================
           🎭 模态框样式
           ======================================== */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: var(--bg-secondary);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-lg);
            max-width: 90%;
            max-height: 90vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            box-shadow: var(--shadow-lg);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }
        
        .modal.active .modal-content {
            transform: scale(1);
        }
        
        .modal-header {
            padding: var(--spacing-lg);
            border-bottom: 1px solid var(--glass-border);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .modal-close {
            width: 32px;
            height: 32px;
            border: none;
            background: transparent;
            color: var(--text-secondary);
            cursor: pointer;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }
        
        .modal-close:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
        }
        
        .modal-body {
            flex: 1;
            padding: var(--spacing-lg);
            overflow-y: auto;
        }
        
        .modal-footer {
            padding: var(--spacing-lg);
            border-top: 1px solid var(--glass-border);
            display: flex;
            gap: var(--spacing-md);
            justify-content: flex-end;
        }
        
        /* 任务选择列表 */
        .task-select-list {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }
        
        .task-select-item {
            padding: var(--spacing-md);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .task-select-item:hover {
            border-color: var(--type-goal);
            background: var(--bg-hover);
        }
        
        .task-select-item.selected {
            border-color: var(--type-goal);
            background: var(--bg-active);
        }
        
        /* 看板视图样式 */
        .type-boards-container {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-xl);
            padding: var(--spacing-lg);
        }
        
        /* 看板筛选工具栏 */
        .board-filter-toolbar {
            display: flex;
            gap: var(--spacing-lg);
            padding: var(--spacing-md);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            margin-top: var(--spacing-md);
            flex-wrap: wrap;
            align-items: center;
        }
        
        .filter-section {
            display: flex;
            gap: var(--spacing-sm);
            align-items: center;
        }
        
        .filter-input {
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--bg-secondary);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.875rem;
            min-width: 200px;
            transition: var(--transition);
        }
        
        .filter-input:focus {
            outline: none;
            border-color: var(--type-goal);
            background: var(--bg-hover);
        }
        
        .filter-select {
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--bg-secondary);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.875rem;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .filter-select:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        .filter-quick-btn {
            padding: var(--spacing-sm) var(--spacing-md);
            background: transparent;
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-secondary);
            font-size: 0.875rem;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .filter-quick-btn:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
            color: var(--text-primary);
        }
        
        /* 活动筛选条件栏 */
        .active-filters-bar {
            display: flex;
            gap: var(--spacing-md);
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            margin-top: var(--spacing-sm);
            align-items: center;
        }
        
        .filter-label {
            font-size: 0.875rem;
            color: var(--text-muted);
        }
        
        #boardFilterTags {
            display: flex;
            gap: var(--spacing-sm);
            flex-wrap: wrap;
        }
        
        /* 统计信息栏 */
        .board-stats-bar {
            display: flex;
            gap: var(--spacing-lg);
            padding: var(--spacing-md) var(--spacing-lg);
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            margin-top: var(--spacing-md);
            margin-bottom: var(--spacing-md);
            align-items: center;
            justify-content: center;
        }
        
        .board-stats-bar .stat-item {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }
        
        .board-stats-bar .stat-icon {
            font-size: 1.25rem;
        }
        
        .board-stats-bar .stat-label {
            font-size: 0.875rem;
            color: var(--text-muted);
        }
        
        .board-stats-bar .stat-value {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .stat-divider {
            width: 1px;
            height: 24px;
            background: var(--glass-border);
        }

        .type-board-section {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-lg);
            overflow: hidden;
        }

        .type-board-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: var(--spacing-lg);
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--glass-border);
        }

        .type-board-title {
            display: flex;
            align-items: center;
            gap: var(--spacing-md);
            margin: 0;
            font-size: 1.125rem;
        }

        .type-board-count {
            font-size: 0.875rem;
            color: var(--text-muted);
            font-weight: normal;
        }

        .btn-sm {
            padding: var(--spacing-xs) var(--spacing-sm);
            font-size: 0.75rem;
        }

        .kanban-container {
            display: flex;
            gap: var(--spacing-lg);
            overflow-x: auto;
            padding: var(--spacing-lg);
            min-height: 300px;
        }
        
        .kanban-column {
            min-width: 280px;
            background: rgba(255, 255, 255, 0.02);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            display: flex;
            flex-direction: column;
            height: fit-content;
            min-height: 200px;
        }
        
        .kanban-header {
            padding: var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .kanban-count {
            background: var(--bg-active);
            padding: var(--spacing-xs) var(--spacing-sm);
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
        }
        
        .kanban-body {
            flex: 1;
            padding: var(--spacing-md);
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }
        
        .kanban-card {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            padding: var(--spacing-md);
            cursor: move;
            transition: var(--transition);
        }
        
        .kanban-card:hover {
            border-color: var(--type-goal);
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }
        
        /* 看板折叠/展开动画 */
        .kanban-container {
            transition: all 0.3s ease-in-out;
            transform-origin: top;
        }
        
        .type-board-section .btn-sm {
            transition: transform 0.3s ease;
        }
        
        .type-board-section .btn-sm:hover {
            transform: scale(1.1);
        }
        
        /* ========================================
           📋 项目看板样式
           ======================================== */
        .board-columns {
            display: flex;
            gap: var(--spacing-lg);
            overflow-x: auto;
            padding-bottom: var(--spacing-lg);
        }

        .board-column {
            min-width: 300px;
            flex: 1;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            display: flex;
            flex-direction: column;
        }

        .board-column-header {
            padding: var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .board-column-header h3 {
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }

        .count-badge {
            background: var(--bg-active);
            padding: var(--spacing-xs) var(--spacing-sm);
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
            color: var(--type-goal);
        }

        .board-column-content {
            flex: 1;
            padding: var(--spacing-md);
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }

        .board-card {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            padding: var(--spacing-md);
            cursor: pointer;
            transition: var(--transition);
        }

        .board-card:hover {
            border-color: var(--type-goal);
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .board-card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: var(--spacing-sm);
        }

        .board-card-title {
            font-size: 0.9375rem;
            font-weight: 600;
            margin: var(--spacing-sm) 0;
            line-height: 1.4;
        }

        .board-card-meta {
            display: flex;
            gap: var(--spacing-md);
            margin: var(--spacing-sm) 0;
            font-size: 0.875rem;
            color: var(--text-muted);
        }

        .board-card-footer {
            margin-top: var(--spacing-md);
            padding-top: var(--spacing-sm);
            border-top: 1px solid var(--glass-border);
        }

        .board-card-actions {
            display: flex;
            gap: var(--spacing-xs);
            flex-wrap: wrap;
        }
        
        /* 看板卡片折叠/展开状态样式 */
        .board-card {
            position: relative;
            min-height: 60px;
            transition: all 0.3s ease;
        }
        
        .board-card:not(.expanded) {
            padding-bottom: calc(var(--spacing-md) + 20px);
        }
        
        .board-card.expanded {
            min-height: auto;
        }
        
        .board-card .expand-indicator {
            transition: transform 0.3s ease;
        }
        
        .board-card:hover .expand-indicator {
            opacity: 1 !important;
        }
        
        /* 子项目样式 */
        .board-card.sub-project {
            margin-left: var(--spacing-lg);
            margin-top: var(--spacing-sm);
            position: relative;
            border-left: 3px solid var(--type-project);
            background: rgba(72, 187, 120, 0.05);
        }
        
        .sub-project-indicator {
            position: absolute;
            left: -20px;
            top: 50%;
            transform: translateY(-50%);
            width: 15px;
            height: 1px;
            background: var(--glass-border);
        }
        
        .sub-project-indicator::before {
            content: '';
            position: absolute;
            left: 0;
            top: -6px;
            width: 1px;
            height: calc(50% + 6px);
            background: var(--glass-border);
        }
        
        .board-card.sub-project .board-card-title {
            font-size: 0.875rem;
        }

        .btn-sm {
            padding: var(--spacing-xs) var(--spacing-sm);
            font-size: 0.75rem;
        }
        
        /* 看板拖拽样式 */
        .kanban-card[draggable="true"] {
            cursor: grab;
            position: relative;
        }
        
        .kanban-card[draggable="true"]:active {
            cursor: grabbing;
        }
        
        .kanban-card.dragging {
            opacity: 0.5;
            transform: rotate(3deg) scale(1.02);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.3);
            transition: none;
            position: relative;
            z-index: 1000;
        }
        
        /* 原位置的占位符效果 */
        .kanban-card.dragging::after {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            border: 2px dashed var(--type-goal);
            border-radius: var(--radius-sm);
            opacity: 0.5;
            pointer-events: none;
        }
        
        /* 不同状态列的拖拽效果 */
        .kanban-column[data-status="未开始"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(113, 128, 150, 0.1) 100%);
            border-color: var(--status-todo);
            box-shadow: inset 0 0 0 2px var(--status-todo), 0 4px 20px rgba(113, 128, 150, 0.2);
        }
        
        .kanban-column[data-status="进行中"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(246, 173, 85, 0.1) 100%);
            border-color: var(--status-doing);
            box-shadow: inset 0 0 0 2px var(--status-doing), 0 4px 20px rgba(246, 173, 85, 0.2);
        }
        
        .kanban-column[data-status="暂停"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(91, 157, 217, 0.1) 100%);
            border-color: var(--status-pause);
            box-shadow: inset 0 0 0 2px var(--status-pause), 0 4px 20px rgba(91, 157, 217, 0.2);
        }
        
        .kanban-column[data-status="已完成"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(72, 187, 120, 0.1) 100%);
            border-color: var(--status-done);
            box-shadow: inset 0 0 0 2px var(--status-done), 0 4px 20px rgba(72, 187, 120, 0.2);
        }
        
        .kanban-column.drag-over .board-column-header h3 {
            transform: scale(1.05);
            transition: transform 0.2s ease;
        }
        
        /* 拖拽占位符样式 */
        .drag-placeholder {
            height: 120px;
            margin: var(--spacing-md) 0;
            border: 2px dashed var(--glass-border);
            border-radius: var(--radius);
            background: var(--bg-hover);
            opacity: 0.5;
            transition: var(--transition);
            animation: placeholderPulse 1.5s ease-in-out infinite;
        }
        
        @keyframes placeholderPulse {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.6; }
        }
        
        /* 禁止文本选择在拖拽时 */
        .dragging * {
            user-select: none;
            -webkit-user-select: none;
        }
        
        /* 拖拽时的指示器 */
        .drop-indicator {
            position: absolute;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, var(--type-goal), transparent);
            opacity: 0;
            transition: opacity 0.2s;
            pointer-events: none;
        }
        
        .drop-indicator.active {
            opacity: 1;
            animation: indicatorGlow 0.5s ease-in-out;
        }
        
        @keyframes indicatorGlow {
            0% { transform: scaleX(0); }
            100% { transform: scaleX(1); }
        }
        
        /* 拖拽时卡片hover效果禁用 */
        .dragging .board-card:hover {
            transform: none;
            border-color: var(--glass-border);
        }
        
        /* 项目看板拖拽样式 */
        .board-card[draggable="true"] {
            cursor: grab;
        }
        
        .board-card[draggable="true"]:active {
            cursor: grabbing;
        }
        
        .board-card.dragging {
            opacity: 0.3;
            transform: rotate(2deg) scale(1.01);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
            transition: none;
            position: relative;
            z-index: 1000;
        }
        
        /* 看板列的拖拽悬停效果 */
        .board-column-content.drag-over {
            background: var(--bg-active);
            border: 2px dashed var(--type-project);
            border-radius: var(--radius-sm);
            position: relative;
            min-height: 100px;
        }
        
        .board-column-content.drag-over::before {
            content: '释放以移动到此状态';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: var(--type-project);
            font-size: 0.875rem;
            font-weight: 600;
            opacity: 0.8;
            pointer-events: none;
            white-space: nowrap;
        }
        
        /* 不同状态列的拖拽效果 */
        .board-column-content[data-status="未开始"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(113, 128, 150, 0.1) 100%);
            border-color: var(--status-todo);
        }
        
        .board-column-content[data-status="进行中"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(246, 173, 85, 0.1) 100%);
            border-color: var(--status-doing);
        }
        
        .board-column-content[data-status="已完成"].drag-over {
            background: linear-gradient(135deg, var(--bg-active) 0%, rgba(72, 187, 120, 0.1) 100%);
            border-color: var(--status-done);
        }
        
        /* 列表视图样式 */
        .list-container {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            overflow: hidden;
        }
        
        .list-header {
            display: grid;
            grid-template-columns: 40px 120px 120px 1fr 100px 120px 150px;
            gap: var(--spacing-md);
            padding: var(--spacing-md);
            background: var(--bg-tertiary);
            border-bottom: 1px solid var(--glass-border);
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--text-secondary);
        }
        
        .list-body {
            max-height: calc(100vh - 300px);
            overflow-y: auto;
        }
        
        .list-row {
            display: grid;
            grid-template-columns: 40px 120px 120px 1fr 100px 120px 150px;
            gap: var(--spacing-md);
            padding: var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
            align-items: center;
            transition: var(--transition);
        }
        
        .list-row:hover {
            background: var(--bg-hover);
        }
        
        .list-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
        
        /* 任务详情模态框 */
        .task-detail-section {
            margin-bottom: var(--spacing-lg);
        }
        
        .task-detail-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-xs);
        }
        
        .task-detail-value {
            font-size: 1rem;
            color: var(--text-primary);
        }
        
        .task-detail-tags {
            display: flex;
            gap: var(--spacing-xs);
            flex-wrap: wrap;
            margin-top: var(--spacing-sm);
        }
        
        .task-detail-tag {
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--bg-active);
            border-radius: var(--radius-sm);
            font-size: 0.875rem;
            color: var(--type-goal);
        }
        
        /* 进展日志样式 */
        .progress-log-item {
            display: flex;
            gap: var(--spacing-md);
            padding: var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
            transition: var(--transition);
        }
        
        .progress-log-item:last-child {
            border-bottom: none;
        }
        
        .progress-log-item:hover {
            background: var(--bg-hover);
            cursor: pointer;
        }
        
        .progress-log-item:hover .progress-log-content::after {
            content: " ✏️";
            opacity: 0.5;
            font-size: 0.875rem;
        }
        
        .progress-log-time {
            font-size: 0.875rem;
            color: var(--text-muted);
            min-width: 140px;
            flex-shrink: 0;
        }
        
        .progress-log-content {
            flex: 1;
            font-size: 0.9375rem;
            line-height: 1.6;
            white-space: pre-wrap;
            word-break: break-word;
        }
        
        .progress-log-empty {
            text-align: center;
            padding: var(--spacing-xl);
            color: var(--text-muted);
        }
        
        /* ========================================
           🎨 动态侧边栏样式
           ======================================== */
        
        /* 看板导航项 */
        .board-nav-item {
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-sm);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
        }
        
        .board-nav-item:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        .board-nav-item.active {
            background: var(--bg-active);
            border-color: var(--type-goal);
            color: var(--type-goal);
        }
        
        .board-nav-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-sm);
        }
        
        .board-nav-title {
            font-weight: 500;
            font-size: 0.9375rem;
        }
        
        .board-nav-count {
            background: var(--bg-active);
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            color: var(--type-goal);
        }
        
        .board-nav-stats {
            display: flex;
            gap: var(--spacing-xs);
            flex-wrap: wrap;
        }
        
        .status-tag {
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .status-tag.todo {
            background: rgba(113, 128, 150, 0.2);
            color: var(--status-todo);
        }
        
        .status-tag.pause {
            background: rgba(91, 157, 217, 0.2);
            color: var(--status-pause);
        }
        
        .status-tag.doing {
            background: rgba(246, 173, 85, 0.2);
            color: var(--status-doing);
        }
        
        .status-tag.done {
            background: rgba(72, 187, 120, 0.2);
            color: var(--status-done);
        }
        
        /* 日期导航网格 */
        .date-nav-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--spacing-sm);
            margin-bottom: var(--spacing-md);
        }
        
        .date-nav-btn {
            padding: var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.875rem;
        }
        
        .date-nav-btn:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        /* 时间轴统计迷你版 */
        .timeline-stats-mini {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--spacing-sm);
        }
        
        .timeline-stats-mini .stat-item {
            background: var(--bg-card);
            padding: var(--spacing-sm);
            border-radius: var(--radius-sm);
            text-align: center;
        }
        
        .stat-label {
            font-size: 0.75rem;
            color: var(--text-muted);
            display: block;
        }
        
        .stat-value {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--type-goal);
        }
        
        /* 进度条迷你版 */
        .progress-bar-mini {
            height: 4px;
            background: var(--bg-hover);
            border-radius: 2px;
            overflow: hidden;
            margin-top: var(--spacing-xs);
        }
        
        .progress-bar-mini .progress-fill {
            height: 100%;
            background: var(--type-goal);
            transition: width 0.3s ease;
        }
        
        /* 项目统计 */
        .project-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--spacing-sm);
        }
        
        /* 目标导航项 */
        .goal-nav-item {
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .goal-nav-item:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        .goal-nav-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-sm);
        }
        
        .goal-nav-krs {
            padding-left: var(--spacing-md);
        }
        
        .kr-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--spacing-xs) 0;
            border-bottom: 1px solid var(--glass-border);
        }
        
        .kr-item:last-child {
            border-bottom: none;
        }
        
        /* 目标统计 */
        .goal-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--spacing-sm);
        }
        
        /* 按钮块样式 */
        .btn-block {
            width: 100%;
            margin-bottom: var(--spacing-sm);
        }
        
        /* 项目快速切换按钮 */
        .project-btn {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .project-btn .badge {
            background: var(--glass-bg);
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            color: var(--text-secondary);
        }
        
        /* 保存视图按钮 */
        .save-view-btn {
            padding: 4px 8px;
            background: transparent;
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-secondary);
            font-size: 0.75rem;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .save-view-btn:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
            color: var(--type-goal);
        }
        
        /* ========================================
           ⏰ 时间轴任务组样式
           ======================================== */
        
        /* 任务组容器 */
        .timeline-item-group {
            position: relative;
            display: flex;
            gap: var(--spacing-lg);
            margin-bottom: var(--spacing-xl);
            padding-left: 20px;
        }
        
        /* 任务组的时间点 */
        .timeline-dot-group {
            position: absolute;
            left: -8px;
            top: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
        }
        
        /* 任务组计数 */
        .timeline-group-count {
            background: var(--type-goal);
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        /* 任务组标签 */
        .timeline-group-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-sm);
            font-weight: 500;
        }
        
        /* 任务组内容容器 */
        .timeline-group-tasks {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }
        
        /* 分组中的任务内容 */
        .timeline-content-grouped {
            margin-left: 0;
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
        }
        
        .timeline-content-grouped:hover {
            border-color: var(--type-goal);
            transform: translateX(4px);
        }
        
        /* ========================================
           📱 响应式样式
           ======================================== */
        
        /* 侧边栏切换按钮 */
        .sidebar-toggle-btn {
            position: fixed;
            left: 20px;
            bottom: 20px;
            width: 48px;
            height: 48px;
            background: var(--bg-active);
            border: 1px solid var(--glass-border);
            border-radius: 50%;
            cursor: pointer;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: var(--text-primary);
            box-shadow: var(--shadow);
            transition: var(--transition);
            z-index: 1000;
        }
        
        .sidebar-toggle-btn:hover {
            background: var(--type-goal);
            transform: scale(1.1);
        }
        
        /* 窗口一半宽度及以下自动折叠侧边栏 (960px及以下) */
        @media (max-width: 960px) {
            /* 默认隐藏侧边栏 */
            .sidebar {
                position: fixed;
                left: 0;
                top: 60px;
                bottom: 0;
                z-index: 999;
                transform: translateX(-100%);
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
            }
            
            .sidebar.show {
                transform: translateX(0);
            }
            
            /* 显示切换按钮 */
            .sidebar-toggle-btn {
                display: flex;
            }
            
            /* 调整主内容区域 */
            .workspace {
                margin-left: 0;
            }
            
            /* 调整焦点任务卡片网格 */
            .focus-task-container {
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            }
            
            /* 调整导航栏布局 */
            .navbar {
                flex-wrap: wrap;
                padding: var(--spacing-sm) var(--spacing-md);
            }
            
            .navbar-left {
                flex: 1 1 100%;
                margin-bottom: var(--spacing-sm);
            }
            
            .view-switcher {
                flex: 1 1 auto;
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                scrollbar-width: none;
            }
            
            .view-switcher::-webkit-scrollbar {
                display: none;
            }
            
            .quick-add-container {
                display: none;
            }
        }
        
        /* Desktop: show toggle button when sidebar is collapsed */
        @media (min-width: 961px) {
            body.sidebar-collapsed .sidebar-toggle-btn {
                display: flex;
            }
        }
        
        /* 手机设备 (768px及以下) */
        @media (max-width: 768px) {
            /* 进一步调整焦点任务容器 */
            .focus-task-container {
                grid-template-columns: 1fr;
                gap: var(--spacing-md);
            }
            
            /* 调整看板列 */
            .board-columns {
                flex-direction: column;
            }
            
            .board-column {
                min-width: 100%;
                margin-bottom: var(--spacing-lg);
            }
            
            /* 调整目标看板 */
            .goal-board {
                grid-template-columns: 1fr;
            }
            
            /* 调整时间线控制栏 */
            .timeline-controls {
                flex-wrap: wrap;
                gap: var(--spacing-sm);
            }
            
            .timeline-date-picker {
                flex: 1 1 100%;
                justify-content: center;
            }
            
            .timeline-view-mode {
                flex: 1 1 100%;
                justify-content: center;
            }
            
            /* 调整统计卡片 */
            .timeline-stats {
                grid-template-columns: 1fr;
            }
            
            /* 隐藏一些非必要元素 */
            .global-actions {
                display: none;
            }
        }
        
        /* 侧边栏遮罩层 */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 998;
            display: none;
            transition: opacity 0.3s;
        }

        /* ========================================
           📋 计划视图样式
           ======================================== */
        
        .planning-section {
            padding: var(--spacing-lg);
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .planning-panels {
            display: grid;
            grid-template-columns: 3fr 2fr;  /* 60/40 分割 */
            gap: var(--spacing-lg);
            margin-top: var(--spacing-lg);
        }
        
        .planning-panel {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            backdrop-filter: var(--glass-blur);
            overflow: hidden;
        }
        
        .planning-panel.planning-actions {
            background: var(--bg-secondary);
            border: 2px solid var(--type-goal);
        }
        
        .planning-panel.task-pool {
            height: 600px;
            display: flex;
            flex-direction: column;
        }
        
        .planning-panel.task-pool .panel-content {
            flex: 1;
            overflow-y: auto;
            max-height: unset;
        }
        
        .planning-panel.planning-actions.enhanced {
            position: sticky;
            top: 20px;
            max-height: calc(100vh - 200px);
        }
        
        .panel-header {
            background: var(--glass-bg);
            padding: var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .panel-title {
            font-size: 1rem;
            font-weight: 600;
            margin: 0;
        }
        
        .panel-count {
            background: var(--type-goal);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .panel-content {
            padding: var(--spacing-md);
            max-height: 500px;
            overflow-y: auto;
        }
        
        .quick-planning-options {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
            margin-bottom: var(--spacing-lg);
        }
        
        .planning-btn {
            background: linear-gradient(135deg, var(--type-goal), var(--type-project));
            color: white;
            border: none;
            padding: var(--spacing-md);
            border-radius: var(--radius-sm);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--spacing-sm);
        }
        
        .planning-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }
        
        .planning-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .planning-btn.primary {
            background: linear-gradient(135deg, #ff6b6b, #f06595);
            font-size: 1rem;
            padding: var(--spacing-lg);
        }
        
        .smart-planning-section,
        .manual-planning-section {
            margin-bottom: var(--spacing-xl);
        }
        
        .planning-tips {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-md);
            margin-top: var(--spacing-md);
            font-size: 0.875rem;
            color: var(--text-secondary);
        }
        
        .planning-tips ul {
            list-style: none;
            padding: 0;
            margin-top: var(--spacing-sm);
        }
        
        .planning-tips li {
            padding: var(--spacing-xs) 0;
            border-bottom: 1px solid var(--glass-border);
        }
        
        .planning-tips li:last-child {
            border-bottom: none;
        }
        
        .planning-filters {
            border-top: 1px solid var(--glass-border);
            padding-top: var(--spacing-md);
        }
        
        .planning-filters h4 {
            margin-bottom: var(--spacing-md);
            font-size: 0.875rem;
            color: var(--text-secondary);
        }
        
        .filter-group {
            margin-bottom: var(--spacing-md);
        }
        
        .filter-group label {
            display: block;
            font-size: 0.75rem;
            color: var(--text-muted);
            margin-bottom: var(--spacing-xs);
        }
        
        .filter-group select,
        .filter-group input[type="checkbox"] {
            background: var(--bg-tertiary);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            color: var(--text-primary);
            font-size: 0.75rem;
        }
        
        .filter-group select {
            width: 100%;
            padding: var(--spacing-xs);
        }
        
        .planning-task-item {
            background: var(--bg-hover);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-sm);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            display: flex;
            align-items: flex-start;
            gap: var(--spacing-md);
        }
        
        .planning-task-item:hover {
            border-color: var(--type-goal);
            transform: translateY(-1px);
            box-shadow: var(--shadow);
            background: rgba(102, 126, 234, 0.08);
        }
        
        .planning-task-item.selected {
            border-color: var(--type-goal);
            background: var(--bg-active);
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.3);
        }
        
        .planning-task-item.dragging {
            opacity: 0.5;
        }
        
        .planning-task-item.drag-over {
            border-color: var(--type-project);
            background: rgba(72, 187, 120, 0.1);
        }
        
        /* 任务复选框样式增强 */
        .task-checkbox {
            position: relative;
            flex-shrink: 0;
        }
        
        .task-checkbox input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
            accent-color: var(--type-goal);
        }
        
        .task-content {
            flex: 1;
            min-width: 0;
        }
        
        .task-header {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            margin-bottom: var(--spacing-sm);
            flex-wrap: wrap;
        }
        
        .task-title {
            font-size: 0.95rem;
            font-weight: 500;
            margin: 0;
            color: var(--text-primary);
            word-break: break-word;
        }
        
        .task-meta {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-xs);
            font-size: 0.75rem;
            color: var(--text-secondary);
        }
        
        .task-path {
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
            opacity: 0.8;
        }
        
        .task-tags {
            display: flex;
            flex-wrap: wrap;
            gap: var(--spacing-xs);
            color: var(--text-muted);
        }
        
        /* 选中任务预览 */
        .selected-tasks-preview {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-lg);
        }
        
        .selected-tasks-list {
            max-height: 200px;
            overflow-y: auto;
            margin-top: var(--spacing-sm);
        }
        
        .selected-task-item {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            padding: var(--spacing-sm);
            background: var(--bg-hover);
            border-radius: var(--radius-sm);
            margin-bottom: var(--spacing-xs);
            font-size: 0.875rem;
        }
        
        .selected-task-item:hover {
            background: var(--bg-active);
        }
        
        .remove-selected {
            cursor: pointer;
            color: var(--text-muted);
            transition: color 0.2s;
        }
        
        .remove-selected:hover {
            color: var(--priority-high);
        }
        
        /* 规划建议 */
        .planning-suggestions {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-md);
            margin-top: var(--spacing-md);
            font-size: 0.875rem;
            line-height: 1.6;
        }
        
        .planning-suggestions ul {
            list-style: none;
            padding: 0;
            margin: var(--spacing-sm) 0 0 0;
        }
        
        .planning-suggestions li {
            display: flex;
            align-items: flex-start;
            gap: var(--spacing-sm);
            padding: var(--spacing-xs) 0;
        }
        
        .planning-suggestions li::before {
            content: "•";
            color: var(--type-goal);
            font-weight: bold;
        }
        
        /* 规划结果预览 */
        .planning-result-preview {
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            padding: var(--spacing-md);
            margin-top: var(--spacing-lg);
        }
        
        .result-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: var(--spacing-sm);
            margin-top: var(--spacing-sm);
        }
        
        .stat-item {
            background: var(--bg-hover);
            padding: var(--spacing-sm);
            border-radius: var(--radius-sm);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.875rem;
        }
        
        .stat-value {
            font-weight: 600;
            color: var(--type-goal);
        }
        
        .planning-task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-xs);
        }
        
        .planning-task-title {
            font-weight: 500;
            margin-bottom: var(--spacing-xs);
        }
        
        .planning-task-path {
            font-size: 0.75rem;
            color: var(--text-muted);
        }
        
        /* 响应式调整 */
        @media (max-width: 1200px) {
            .planning-panels {
                grid-template-columns: 1fr;
                gap: var(--spacing-md);
            }
            
            .planning-panel.planning-actions.enhanced {
                position: relative;
                top: auto;
                max-height: none;
                order: -1;
            }
            
            .planning-panel.task-pool {
                height: auto;
                min-height: 400px;
            }
        }
        
        @media (max-width: 768px) {
            .planning-task-item {
                padding: var(--spacing-sm);
            }
            
            .task-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .planning-btn {
                font-size: 0.813rem;
                padding: var(--spacing-sm) var(--spacing-md);
            }
        }
        
        .sidebar-overlay.show {
            display: block;
        }
        
        @media (max-width: 960px) {
            .sidebar-overlay.show {
                display: block;
            }
        }
        
        /* ========================================
           📊 看板视图模式切换
           ======================================== */
        .board-view-switcher {
            display: flex;
            gap: var(--spacing-xs);
            background: var(--bg-card);
            padding: var(--spacing-xs);
            border-radius: var(--radius-sm);
        }
        
        .board-mode-btn {
            padding: var(--spacing-sm) var(--spacing-md);
            background: transparent;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            border-radius: var(--radius-sm);
            transition: var(--transition);
            font-size: 0.875rem;
            font-weight: 500;
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }
        
        .board-mode-btn.active {
            background: var(--bg-active);
            color: var(--type-goal);
        }
        
        .board-mode-btn:hover:not(.active) {
            background: var(--bg-hover);
            color: var(--text-primary);
        }
        
        /* 树形视图样式 */
        .tree-view {
            padding: var(--spacing-md);
        }
        
        .tree-node {
            margin-bottom: var(--spacing-xs);
        }
        
        .tree-node-content {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            padding: var(--spacing-sm) var(--spacing-md);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .tree-node-content:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        .tree-expand-icon {
            width: 20px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .tree-expand-icon.expanded {
            transform: rotate(90deg);
        }
        
        .tree-children {
            margin-left: 32px;
            margin-top: var(--spacing-xs);
        }
        
        .tree-children.collapsed {
            display: none;
        }
        
        /* 列表视图样式 */
        .list-view {
            padding: var(--spacing-md);
        }
        
        .list-header {
            display: grid;
            grid-template-columns: 40px 2fr 1fr 1fr 1fr 120px 120px;
            gap: var(--spacing-md);
            padding: var(--spacing-md);
            background: var(--bg-secondary);
            border-radius: var(--radius-sm);
            font-weight: 600;
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-bottom: var(--spacing-sm);
        }
        
        .list-row {
            display: grid;
            grid-template-columns: 40px 2fr 1fr 1fr 1fr 120px 120px;
            gap: var(--spacing-md);
            padding: var(--spacing-md);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            margin-bottom: var(--spacing-xs);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .list-row:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        .list-cell {
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
        }
        
        /* ========================================
           📊 统一看板视图样式
           ======================================== */
        .board-list-view {
            padding: var(--spacing-md);
        }
        
        .list-section {
            margin-bottom: var(--spacing-xl);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius);
            overflow: hidden;
        }
        
        .list-section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: var(--spacing-md) var(--spacing-lg);
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--glass-border);
        }
        
        .list-section-header h3 {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }
        
        .task-list-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .task-list-table thead {
            background: var(--bg-tertiary);
        }
        
        .task-list-table th {
            padding: var(--spacing-md);
            text-align: left;
            font-weight: 600;
            color: var(--text-secondary);
            font-size: 0.875rem;
            border-bottom: 1px solid var(--glass-border);
        }
        
        .task-list-table tbody tr {
            border-bottom: 1px solid var(--glass-border);
            transition: var(--transition);
        }
        
        .task-list-table tbody tr:hover {
            background: var(--bg-hover);
            cursor: pointer;
        }
        
        .task-list-table td {
            padding: var(--spacing-md);
            color: var(--text-primary);
        }
        
        .task-list-table .task-title {
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .task-list-table .task-actions {
            text-align: right;
        }
        
        .task-list-table .task-actions button {
            margin-left: var(--spacing-sm);
        }
        
        /* 树形视图扩展样式 */
        .board-tree-view {
            padding: var(--spacing-lg);
            background: var(--bg-card);
            border-radius: var(--radius);
        }
        
        .tree-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
        }
        
        .tree-header h3 {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }
        
        .tree-controls {
            display: flex;
            gap: var(--spacing-sm);
        }
        
        .tree-content {
            padding: var(--spacing-md);
        }
        
        .tree-toggle {
            font-size: 0.875rem;
            color: var(--text-secondary);
            cursor: pointer;
            user-select: none;
            width: 20px;
            display: inline-block;
            text-align: center;
        }
        
        .tree-toggle.has-children:hover {
            color: var(--text-primary);
        }
        
        .tree-type-icon {
            font-size: 1.1rem;
        }
        
        .tree-title {
            flex: 1;
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .tree-status {
            font-size: 0.875rem;
            margin-right: var(--spacing-sm);
        }
        
        .tree-priority {
            font-size: 0.75rem;
        }
        
        /* 任务类型标签 */
        .task-type-badge {
            display: inline-flex;
            align-items: center;
            padding: 2px 8px;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: var(--radius-sm);
            background: var(--bg-tertiary);
            color: var(--text-secondary);
            border: 1px solid var(--glass-border);
        }
        
        /* 侧边栏项目筛选样式 */
        .sidebar-stats {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }
        
        .sidebar-stats .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--bg-card);
            border-radius: var(--radius-sm);
            font-size: 0.875rem;
        }
        
        .sidebar-stats .stat-value {
            font-weight: 600;
            color: var(--type-goal);
        }
        
        .active-filter-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--spacing-sm);
            background: var(--bg-active);
            border-radius: var(--radius-sm);
            margin-bottom: var(--spacing-sm);
            font-size: 0.875rem;
        }
        
        .clear-filter-btn {
            background: transparent;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 2px 6px;
            border-radius: var(--radius-sm);
            transition: var(--transition);
        }
        
        .clear-filter-btn:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
        }
        
        .project-filter-list {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-xs);
        }
        
        .project-filter-item {
            padding: var(--spacing-sm);
            background: var(--bg-card);
            border: 1px solid var(--glass-border);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .project-filter-item:hover {
            background: var(--bg-hover);
            border-color: var(--type-goal);
        }
        
        .project-filter-item.active {
            background: var(--bg-active);
            border-color: var(--type-goal);
        }
        
        .project-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-xs);
        }
        
        .project-name {
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .project-count {
            font-size: 0.75rem;
            color: var(--text-secondary);
        }
        
        .project-progress {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }
        
        .progress-bar-mini {
            flex: 1;
            height: 4px;
            background: var(--bg-secondary);
            border-radius: 2px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: var(--type-goal);
            transition: width 0.3s ease;
        }
        
        .progress-text {
            font-size: 0.75rem;
            color: var(--text-secondary);
            min-width: 35px;
            text-align: right;
        }
        
        .empty-message {
            text-align: center;
            padding: var(--spacing-md);
            color: var(--text-muted);
            font-size: 0.875rem;
        }
        
        /* ========================================
           📊 甘特图样式
           ======================================== */
        .gantt-chart {
            background: var(--bg-card);
            border-radius: var(--radius);
            overflow: hidden;
            border: 1px solid var(--glass-border);
        }
        
        .gantt-header {
            display: flex;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--glass-border);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .gantt-task-list-header {
            width: 300px;
            padding: var(--spacing-md);
            font-weight: 600;
            color: var(--text-primary);
            border-right: 1px solid var(--glass-border);
            flex-shrink: 0;
        }
        
        .gantt-timeline-header {
            display: flex;
            overflow-x: auto;
            background: var(--bg-tertiary);
        }
        
        .gantt-day {
            border-right: 1px solid var(--glass-border);
            text-align: center;
            flex-shrink: 0;
            background: var(--bg-secondary);
            transition: var(--transition);
        }
        
        .gantt-day:hover {
            background: var(--bg-hover);
        }
        
        .gantt-day.today {
            background: var(--bg-active);
            color: var(--type-goal);
            font-weight: 600;
        }
        
        .gantt-day.weekend {
            opacity: 0.7;
            background: var(--bg-tertiary);
        }
        
        .gantt-day-number {
            padding: var(--spacing-xs) 0;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .gantt-day-name {
            padding-bottom: var(--spacing-xs);
            font-size: 0.75rem;
            color: var(--text-secondary);
        }
        
        .gantt-body {
            display: flex;
            max-height: 600px;
            overflow: auto;
        }
        
        .gantt-task-list {
            width: 300px;
            flex-shrink: 0;
            border-right: 1px solid var(--glass-border);
        }
        
        .gantt-task-item {
            height: 40px;
            padding: 0 var(--spacing-md);
            border-bottom: 1px solid var(--glass-border);
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .gantt-task-item:hover {
            background: var(--bg-hover);
        }
        
        .gantt-task-type {
            font-size: 1rem;
            flex-shrink: 0;
        }
        
        .gantt-task-title {
            flex: 1;
            font-size: 0.875rem;
            font-weight: 500;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .gantt-task-status {
            font-size: 0.875rem;
            flex-shrink: 0;
        }
        
        .gantt-timeline {
            position: relative;
            overflow-x: auto;
            background-image: repeating-linear-gradient(
                to right,
                var(--glass-border) 0,
                var(--glass-border) 1px,
                transparent 1px,
                transparent 40px
            );
        }
        
        .gantt-today-line {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 2px;
            background: var(--priority-high);
            z-index: 5;
            opacity: 0.8;
        }
        
        .gantt-bar {
            position: absolute;
            height: 30px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            overflow: hidden;
            transition: var(--transition);
            display: flex;
            align-items: center;
            padding: 0 var(--spacing-sm);
        }
        
        .gantt-bar:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow);
            z-index: 10;
        }
        
        .gantt-bar-progress {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: var(--radius-sm);
        }
        
        .gantt-bar-text {
            position: relative;
            z-index: 1;
            font-size: 0.75rem;
            font-weight: 500;
            color: white;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        /* 任务类型颜色 */
        .gantt-bar-目标 {
            background: var(--type-goal);
        }
        
        .gantt-bar-关键结果 {
            background: var(--type-kr);
        }
        
        .gantt-bar-项目 {
            background: var(--type-project);
        }
        
        .gantt-bar-动作 {
            background: var(--type-action);
        }
        
        /* 任务状态透明度 */
        .gantt-bar-未开始 {
            opacity: 0.6;
        }
        
        .gantt-bar-进行中 {
            opacity: 0.9;
        }
        
        .gantt-bar-已完成 {
            opacity: 0.8;
        }
        
        .gantt-bar-暂停 {
            opacity: 0.5;
            background-image: repeating-linear-gradient(
                45deg,
                transparent,
                transparent 10px,
                rgba(255, 255, 255, 0.1) 10px,
                rgba(255, 255, 255, 0.1) 20px
            );
        }
        
        .empty-gantt {
            padding: var(--spacing-xl);
            text-align: center;
            color: var(--text-muted);
        }
        
        .empty-gantt p {
            margin: var(--spacing-sm) 0;
        }
    </style>
</head>
<body>
    <!-- 侧边栏遮罩层 -->
    <div class="sidebar-overlay" id="sidebarOverlay" onclick="toggleSidebar()"></div>
    
    <!-- 侧边栏切换按钮 -->
    <button class="sidebar-toggle-btn" id="sidebarToggleBtn" onclick="toggleSidebar()">
        ☰
    </button>
    
    <div class="app-container">
        <!-- 顶部导航栏 -->
        <nav class="navbar">
            <div class="navbar-left">
                <h1 class="navbar-title">MNTask 看板</h1>
                
                <!-- 快速添加任务 -->
                <div class="quick-add-container" style="position: relative;">
                    <input type="text" 
                           id="quickAddInput"
                           class="quick-add-input" 
                           placeholder="快速添加任务... (输入后按Enter，支持 #标签 @项目 !优先级)"
                           onkeypress="handleQuickAdd(event)"
                           oninput="handleQuickAddInput(event)"
                           onkeydown="handleAutocompleteNavigation(event)">
                    <div id="projectAutocomplete" class="autocomplete-dropdown">
                        <!-- 自动完成项目将在这里动态生成 -->
                    </div>
                </div>
            </div>
            
            <!-- 视图切换 -->
            <div class="view-switcher">
                <button class="view-btn active" data-view="focus" onclick="switchView('focus')">
                    🎯 焦点任务
                </button>
                <button class="view-btn" data-view="planning" onclick="switchView('planning')">
                    📋 计划
                </button>
                <button class="view-btn" data-view="today" onclick="switchView('today')">
                    📅 时间轴
                </button>
                <button class="view-btn" data-view="board" onclick="switchView('board')">
                    📊 看板
                </button>
            </div>
            
            <!-- 全局功能按钮 -->
            <div class="global-actions">
                <button class="global-btn" onclick="openGlobalSearch()">
                    🔍
                    <span class="tooltip">全局搜索 (Ctrl+K)</span>
                </button>
                <button class="global-btn" onclick="openSettings()">
                    ⚙️
                    <span class="tooltip">设置</span>
                </button>
                <button class="global-btn" onclick="openHelp()">
                    ❓
                    <span class="tooltip">帮助与教程</span>
                </button>
            </div>
        </nav>

        <!-- 主内容区域 -->
        <div class="main-content">
            <!-- 侧边栏 - 自定义视图 -->
            <aside class="sidebar" id="sidebar">
                <!-- 焦点统计 -->
                <div class="sidebar-section">
                    <h3 class="sidebar-title">焦点统计</h3>
                    <div class="custom-view-item" onclick="applyQuickFilter('current')">
                        <span>🎯 当前焦点</span>
                        <span class="text-small text-muted">3</span>
                    </div>
                </div>

                <!-- 任务管理 -->
                <div class="sidebar-section">
                    <h3 class="sidebar-title">任务管理</h3>
                    <div class="custom-view-item" onclick="openAddToPendingModal()">
                        <span>📋 添加到待处理</span>
                        <span class="text-small text-muted">+</span>
                    </div>
                    <div class="custom-view-item" onclick="openTaskFilterModal()">
                        <span>🔍 任务筛选</span>
                        <span class="text-small text-muted">⚙️</span>
                    </div>
                </div>

                <!-- 自定义视图 -->
                <div class="sidebar-section">
                    <h3 class="sidebar-title">
                        <span>自定义视图</span>
                        <button class="save-view-btn" onclick="saveCurrentView()">
                            + 保存当前
                        </button>
                    </h3>
                    <div id="customViewsList">
                        <div class="custom-view-item" onclick="loadCustomView('plugin-bugs')">
                            <span>🐛 插件Bug汇总</span>
                            <span class="text-small text-muted">15</span>
                        </div>
                        <div class="custom-view-item" onclick="loadCustomView('week-focus')">
                            <span>🎯 本周重点</span>
                            <span class="text-small text-muted">7</span>
                        </div>
                        <div class="custom-view-item" onclick="loadCustomView('review-needed')">
                            <span>👀 待Review</span>
                            <span class="text-small text-muted">4</span>
                        </div>
                    </div>
                </div>

                <!-- 项目分组 -->
                <div class="sidebar-section">
                    <h3 class="sidebar-title">项目分组</h3>
                    <div class="custom-view-item" onclick="filterByProject('mntask')">
                        <span>📦 MNTask插件</span>
                        <span class="text-small text-muted">23</span>
                    </div>
                    <div class="custom-view-item" onclick="filterByProject('mnai')">
                        <span>🤖 MNAI插件</span>
                        <span class="text-small text-muted">18</span>
                    </div>
                    <div class="custom-view-item" onclick="filterByProject('research')">
                        <span>🔬 研究项目</span>
                        <span class="text-small text-muted">12</span>
                    </div>
                </div>
            </aside>

            <!-- 工作区 -->
            <div class="workspace">
                <!-- 焦点任务视图 -->
                <div id="view-focus" class="view-container">
                    <div class="focus-view">
                        <!-- 当前焦点任务 -->
                        <div class="current-focus-section">
                            <div class="section-header">
                                <h2 class="section-title">🎯 当前焦点任务</h2>
                            </div>
                            
                            <div class="focus-task-container" id="focusTaskContainer">
                                <!-- 焦点任务卡片将在这里动态生成 -->
                            </div>
                        </div>

                        <!-- 筛选状态显示 -->
                        <div class="filter-tags" id="activeFilters" style="margin-bottom: var(--spacing-lg);">
                            <!-- 活跃的筛选标签 -->
                        </div>

                        <!-- 待处理任务概览 -->
                        <div class="section-header mt-3">
                            <h2 class="section-title">📋 待处理任务</h2>
                            <span class="text-muted">共 <span id="pendingCount">0</span> 项</span>
                        </div>
                        <div id="pendingTasksList">
                            <!-- 待处理任务列表 -->
                        </div>
                    </div>
                </div>

                <!-- 计划视图 -->
                <div id="view-planning" class="view-container hidden">
                    <div class="planning-section">
                        <div class="section-header">
                            <h2 class="section-title">📋 任务规划中心</h2>
                            <div class="planning-controls">
                                <button class="btn btn-secondary" onclick="refreshPlanningView()">
                                    🔄 刷新
                                </button>
                            </div>
                        </div>
                        
                        <!-- 任务规划面板 -->
                        <div class="planning-panels">
                            <!-- 待规划任务 -->
                            <div class="planning-panel task-pool">
                                <div class="panel-header">
                                    <h3 class="panel-title">📝 待规划任务池</h3>
                                    <span class="panel-count" id="unplannedCount">0</span>
                                </div>
                                <div class="panel-content" id="unplannedTasksList">
                                    <!-- 未规划的任务列表 -->
                                </div>
                            </div>
                            
                            <!-- 增强版操作面板 -->
                            <div class="planning-panel planning-actions enhanced">
                                <div class="panel-header">
                                    <h3 class="panel-title">⚡ 智能规划中心</h3>
                                </div>
                                <div class="panel-content">
                                    <!-- 选中任务预览 -->
                                    <div class="selected-tasks-preview" id="selectedTasksPreview" style="display: none;">
                                        <h4>✅ 已选中的任务</h4>
                                        <div class="selected-tasks-list" id="selectedTasksList">
                                            <!-- 选中的任务将在这里显示 -->
                                        </div>
                                    </div>
                                    
                                    <!-- 智能规划建议 -->
                                    <div class="smart-planning-section">
                                        <h4>🤖 AI 智能建议</h4>
                                        <button class="planning-btn primary" onclick="autoScheduleTasks()">
                                            🎯 一键智能安排
                                        </button>
                                        <div class="planning-suggestions" id="planningSuggestions">
                                            <!-- 动态生成的建议将在这里显示 -->
                                        </div>
                                    </div>
                                    
                                    <!-- 手动规划选项 -->
                                    <div class="manual-planning-section">
                                        <h4>✋ 快速规划</h4>
                                        <div class="quick-planning-options">
                                            <button class="planning-btn" onclick="bulkAddToPending()" disabled>
                                                📋 添加到待处理
                                            </button>
                                            <button class="planning-btn" onclick="bulkAddToFocus()" disabled>
                                                🎯 设为焦点任务
                                            </button>
                                            <button class="planning-btn" onclick="scheduleTasksForTomorrow()" disabled>
                                                📅 安排明天执行
                                            </button>
                                            <button class="planning-btn" onclick="scheduleTasksForWeek()" disabled>
                                                🗓️ 分配到本周
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- 筛选器 -->
                                    <div class="planning-filters">
                                        <h4>🔍 快速筛选</h4>
                                        <div class="filter-group">
                                            <label>优先级：</label>
                                            <select id="planningFilterPriority" onchange="updatePlanningFilters()">
                                                <option value="">全部</option>
                                                <option value="高">高</option>
                                                <option value="中">中</option>
                                                <option value="低">低</option>
                                            </select>
                                        </div>
                                        <div class="filter-group">
                                            <label>项目：</label>
                                            <select id="planningFilterProject" onchange="updatePlanningFilters()">
                                                <option value="">全部项目</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <!-- 规划结果可视化 -->
                                    <div class="planning-result-preview" id="planningResultPreview" style="display: none;">
                                        <h4>📊 规划结果预览</h4>
                                        <div class="result-stats" id="resultStats">
                                            <!-- 规划结果统计将在这里显示 -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 今日时间轴视图 -->
                <div id="view-today" class="view-container hidden">
                    <div class="timeline-section">
                        <div class="section-header">
                            <h2 class="section-title">📅 任务执行时间轴</h2>
                            <div class="timeline-controls">
                                <div class="timeline-view-mode">
                                    <button class="view-mode-btn active" data-mode="day" onclick="setTimelineViewMode('day')">日</button>
                                    <button class="view-mode-btn" data-mode="week" onclick="setTimelineViewMode('week')">周</button>
                                    <button class="view-mode-btn" data-mode="month" onclick="setTimelineViewMode('month')">月</button>
                                </div>
                                <div class="timeline-date-controls">
                                    <div class="date-nav-section">
                                        <button class="date-nav-btn" onclick="changeTimelineDate(-1)">←</button>
                                        <input type="date" id="timelineDatePicker" class="timeline-date-picker" onchange="onTimelineDateChange()">
                                        <button class="date-nav-btn" onclick="changeTimelineDate(1)">→</button>
                                    </div>
                                    <div class="quick-date-section">
                                        <button class="date-nav-btn" onclick="selectYesterday()">昨天</button>
                                        <button class="date-nav-btn today-btn" onclick="selectTodayDate()">今天</button>
                                        <button class="date-nav-btn" onclick="selectTomorrow()">明天</button>
                                    </div>
                                    <div class="week-nav-section">
                                        <button class="date-nav-btn" onclick="selectThisWeek()">本周</button>
                                        <button class="date-nav-btn" onclick="selectNextWeek()">下周</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="timeline-stats" id="timelineStats">
                            <!-- 统计信息将在这里动态生成 -->
                        </div>
                        
                        <div class="timeline-container" id="todayTimeline">
                            <div class="timeline-line"></div>
                            <!-- 时间轴项目将在这里动态生成 -->
                        </div>
                    </div>
                </div>

                <!-- 统一看板视图 -->
                <div id="view-board" class="view-container hidden">
                    <div class="section-header">
                        <h2 class="section-title">📊 任务看板</h2>
                        <span class="text-muted">管理所有任务的进展</span>
                        <div class="board-view-switcher" style="margin-left: auto;">
                            <button class="board-mode-btn active" data-mode="kanban" onclick="switchBoardMode('kanban')">
                                📦 看板
                            </button>
                            <button class="board-mode-btn" data-mode="list" onclick="switchBoardMode('list')">
                                📃 列表
                            </button>
                            <button class="board-mode-btn" data-mode="tree" onclick="switchBoardMode('tree')">
                                🌳 树形
                            </button>
                            <button class="board-mode-btn" data-mode="gantt" onclick="switchBoardMode('gantt')">
                                📊 甘特图
                            </button>
                        </div>
                    </div>
                    
                    <!-- 筛选工具栏 -->
                    <div class="board-filter-toolbar">
                        <div class="filter-section">
                            <input type="text" 
                                   class="filter-input" 
                                   placeholder="🔍 搜索任务标题或标签..." 
                                   id="boardSearchInput"
                                   onkeyup="handleBoardSearch(event)">
                        </div>
                        
                        <div class="filter-section">
                            <select class="filter-select" id="boardProjectFilter" onchange="handleBoardProjectFilter()">
                                <option value="">📦 所有项目</option>
                            </select>
                            
                            <select class="filter-select" id="boardStatusFilter" onchange="handleBoardStatusFilter()">
                                <option value="">📊 所有状态</option>
                                <option value="未开始">🔵 未开始</option>
                                <option value="进行中">🟡 进行中</option>
                                <option value="已完成">🟢 已完成</option>
                            </select>
                            
                            <select class="filter-select" id="boardPriorityFilter" onchange="handleBoardPriorityFilter()">
                                <option value="">⚡ 所有优先级</option>
                                <option value="高">🔴 高</option>
                                <option value="中">🟡 中</option>
                                <option value="低">🟢 低</option>
                            </select>
                            
                            <select class="filter-select" id="boardTypeFilter" onchange="handleBoardTypeFilter()">
                                <option value="">📋 所有类型</option>
                                <option value="目标">🎯 目标</option>
                                <option value="关键结果">🔑 关键结果</option>
                                <option value="项目">📁 项目</option>
                                <option value="动作">⚡ 动作</option>
                            </select>
                        </div>
                        
                        <div class="filter-section">
                            <button class="filter-quick-btn" onclick="filterTodayTasks()">📅 今日任务</button>
                            <button class="filter-quick-btn" onclick="filterWeekTasks()">📆 本周任务</button>
                            <button class="filter-quick-btn" onclick="filterOverdueTasks()">⏰ 逾期任务</button>
                            <button class="filter-quick-btn" onclick="clearAllFilters()">🔄 清除筛选</button>
                        </div>
                    </div>
                    
                    <!-- 当前筛选条件 -->
                    <div class="active-filters-bar" id="boardActiveFilters" style="display: none;">
                        <span class="filter-label">当前筛选：</span>
                        <div id="boardFilterTags">
                            <!-- 筛选标签将在这里动态生成 -->
                        </div>
                    </div>
                    
                    <!-- 统计信息栏 -->
                    <div class="board-stats-bar" id="boardStatsBar">
                        <div class="stat-item">
                            <span class="stat-icon">📊</span>
                            <span class="stat-label">总计</span>
                            <span class="stat-value" id="boardTotalCount">0</span>
                        </div>
                        <div class="stat-divider"></div>
                        <div class="stat-item">
                            <span class="stat-icon">🔵</span>
                            <span class="stat-label">未开始</span>
                            <span class="stat-value" id="boardTodoCount">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-icon">🟡</span>
                            <span class="stat-label">进行中</span>
                            <span class="stat-value" id="boardDoingCount">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-icon">🟢</span>
                            <span class="stat-label">已完成</span>
                            <span class="stat-value" id="boardDoneCount">0</span>
                        </div>
                        <div class="stat-divider"></div>
                        <div class="stat-item">
                            <span class="stat-label">完成率</span>
                            <span class="stat-value" id="boardCompletionRate">0%</span>
                        </div>
                    </div>
                    
                    <div id="boardContainer">
                        <!-- 看板内容将在这里动态生成 -->
                    </div>
                </div>

            </div>
        </div>
    </div>

    <!-- 模态框 - 选择焦点任务 -->
    <div id="selectFocusModal" class="modal">
        <div class="modal-content" style="width: 600px;">
            <div class="modal-header">
                <h3 class="modal-title">选择焦点任务</h3>
                <button class="modal-close" onclick="closeModal('selectFocusModal')">✕</button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">最多可选择5个焦点任务</p>
                <div id="taskSelectList" class="task-select-list">
                    <!-- 任务列表将在这里动态生成 -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('selectFocusModal')">取消</button>
                <button class="btn btn-primary" onclick="confirmFocusSelection()">确定</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 任务详情 -->
    <div id="taskDetailModal" class="modal">
        <div class="modal-content" style="width: 500px;">
            <div class="modal-header">
                <h3 class="modal-title">任务详情</h3>
                <button class="modal-close" onclick="closeModal('taskDetailModal')">✕</button>
            </div>
            <div class="modal-body">
                <div class="task-detail-section">
                    <div class="task-detail-label">任务标题</div>
                    <div class="task-detail-value editable-field" id="detailTitle">-</div>
                </div>
                
                <div class="task-detail-section">
                    <div class="task-detail-label">任务路径</div>
                    <div class="task-detail-value" id="detailPath">-</div>
                </div>
                
                <div class="task-detail-section">
                    <div class="task-detail-label">基本信息</div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: var(--spacing-md);">
                        <div>
                            <div class="text-small text-muted">类型</div>
                            <div id="detailType">-</div>
                        </div>
                        <div>
                            <div class="text-small text-muted">状态</div>
                            <div id="detailStatus">-</div>
                        </div>
                        <div>
                            <div class="text-small text-muted">优先级</div>
                            <div class="editable-field" id="detailPriority">-</div>
                        </div>
                    </div>
                </div>
                
                <div class="task-detail-section">
                    <div class="task-detail-label">时间信息</div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: var(--spacing-md);">
                        <div>
                            <div class="text-small text-muted">截止日期</div>
                            <div id="detailDueDate">-</div>
                        </div>
                        <div>
                            <div class="text-small text-muted">今日安排</div>
                            <div id="detailTodayTime">-</div>
                        </div>
                        <div>
                            <div class="text-small text-muted">开始时间</div>
                            <div id="detailStartTime">-</div>
                        </div>
                        <div>
                            <div class="text-small text-muted">结束时间</div>
                            <div id="detailEndTime">-</div>
                        </div>
                    </div>
                </div>
                
                <div class="task-detail-section">
                    <div class="task-detail-label">标签</div>
                    <div class="task-detail-tags editable-field" id="detailTags">
                        <!-- 标签将在这里动态生成 -->
                    </div>
                </div>
                
                <div class="task-detail-section">
                    <div class="task-detail-label">启动链接</div>
                    <div class="task-detail-value editable-field" id="detailLaunchLink">-</div>
                </div>
            </div>
            <div class="modal-footer">
                <div id="taskStatusButtons" style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <!-- 状态切换按钮将在这里动态生成 -->
                </div>
                <button class="btn btn-secondary" onclick="closeModal('taskDetailModal')" style="margin-left: auto;">关闭</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 进展详情 -->
    <div id="progressLogModal" class="modal">
        <div class="modal-content" style="width: 600px; max-height: 80vh;">
            <div class="modal-header">
                <h3 class="modal-title" id="progressLogTitle">进展详情</h3>
                <button class="modal-close" onclick="closeModal('progressLogModal')">✕</button>
            </div>
            <div class="modal-body" style="max-height: 60vh; overflow-y: auto;">
                <div id="progressLogList">
                    <!-- 进展日志列表将在这里动态生成 -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="closeModal('progressLogModal')">关闭</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 安排明天任务 -->
    <div id="scheduleTomorrowModal" class="modal">
        <div class="modal-content" style="width: 600px; max-height: 80vh;">
            <div class="modal-header">
                <h3 class="modal-title">安排明天的任务</h3>
                <button class="modal-close" onclick="closeModal('scheduleTomorrowModal')">✕</button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">选择要安排到明天的任务（可多选）</p>
                <div id="tomorrowTaskSelectList" class="task-select-list" style="max-height: 400px; overflow-y: auto;">
                    <!-- 任务列表将在这里动态生成 -->
                </div>
            </div>
            <div class="modal-footer">
                <div class="text-muted" style="margin-right: auto;">
                    已选择 <span id="selectedTomorrowCount">0</span> 个任务
                </div>
                <button class="btn btn-secondary" onclick="closeModal('scheduleTomorrowModal')">取消</button>
                <button class="btn btn-primary" onclick="confirmTomorrowSchedule()">确定安排</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 启动链接管理 -->
    <div id="launchLinkModal" class="modal">
        <div class="modal-content" style="width: 600px; max-height: 80vh;">
            <div class="modal-header">
                <h3 class="modal-title" id="launchLinkTitle">设置启动链接</h3>
                <button class="modal-close" onclick="closeModal('launchLinkModal')">✕</button>
            </div>
            <div class="modal-body">
                <div class="launch-link-form">
                    <div class="form-group">
                        <label class="form-label">链接类型</label>
                        <div class="link-type-selector">
                            <button class="link-type-btn active" data-type="marginnote" onclick="selectLinkType('marginnote')">
                                📚 MarginNote
                            </button>
                            <button class="link-type-btn" data-type="url" onclick="selectLinkType('url')">
                                🌐 网页链接
                            </button>
                            <button class="link-type-btn" data-type="file" onclick="selectLinkType('file')">
                                📄 文件路径
                            </button>
                        </div>
                    </div>
                    
                    <div class="form-group" id="marginnoteLinkGroup">
                        <label class="form-label">MarginNote UIState 链接</label>
                        <input type="text" 
                               class="form-input" 
                               id="marginnoteLink" 
                               placeholder="marginnote4app://note/..."
                               value="">
                        <p class="form-hint">粘贴从 MarginNote 复制的 UIState 链接</p>
                    </div>
                    
                    <div class="form-group hidden" id="urlLinkGroup">
                        <label class="form-label">网页链接</label>
                        <input type="url" 
                               class="form-input" 
                               id="urlLink" 
                               placeholder="https://..."
                               value="">
                        <p class="form-hint">输入要打开的网页地址</p>
                    </div>
                    
                    <div class="form-group hidden" id="fileLinkGroup">
                        <label class="form-label">文件路径</label>
                        <input type="text" 
                               class="form-input" 
                               id="fileLink" 
                               placeholder="/path/to/file..."
                               value="">
                        <p class="form-hint">输入本地文件的完整路径</p>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">备注说明（可选）</label>
                        <textarea class="form-input" 
                                  id="linkNote" 
                                  rows="2" 
                                  placeholder="描述这个链接的用途..."></textarea>
                    </div>
                    
                    <!-- 最近使用的链接 -->
                    <div class="recent-links-section" id="recentLinksSection">
                        <h4 class="recent-links-title">最近使用的链接</h4>
                        <div id="recentLinksList" class="recent-links-list">
                            <!-- 动态生成最近链接 -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('launchLinkModal')">取消</button>
                <button class="btn btn-primary" onclick="confirmLaunchLink()">确定</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 添加到待处理 -->
    <div id="addToPendingModal" class="modal">
        <div class="modal-content" style="width: 700px; max-height: 80vh;">
            <div class="modal-header">
                <h3 class="modal-title">📋 添加到待处理任务</h3>
                <button class="modal-close" onclick="closeModal('addToPendingModal')">✕</button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">选择要添加到待处理的任务（可多选）</p>
                
                <!-- 完整筛选器 -->
                <div class="filter-panel" style="margin-bottom: var(--spacing-lg);">
                    <div class="filter-row">
                        <div class="filter-group">
                            <div class="filter-label">标题包含</div>
                            <input type="text" class="filter-input" placeholder="搜索任务标题..." id="pendingTaskSearch" onkeyup="filterPendingCandidates()">
                        </div>
                        <div class="filter-group">
                            <div class="filter-label">任务状态</div>
                            <select class="filter-input" id="pendingTaskStatus" onchange="filterPendingCandidates()">
                                <option value="">所有状态</option>
                                <option value="未开始">未开始</option>
                                <option value="进行中">进行中</option>
                                <option value="暂停">暂停</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <div class="filter-label">优先级</div>
                            <select class="filter-input" id="pendingTaskPriority" onchange="filterPendingCandidates()">
                                <option value="">所有优先级</option>
                                <option value="高">高优先级</option>
                                <option value="中">中优先级</option>
                                <option value="低">低优先级</option>
                            </select>
                        </div>
                    </div>
                    <div class="filter-row">
                        <div class="filter-group">
                            <div class="filter-label">项目筛选</div>
                            <select class="filter-input" id="pendingTaskProject" onchange="filterPendingCandidates()">
                                <option value="">所有项目</option>
                                <option value="mntask">MNTask插件</option>
                                <option value="mnai">MNAI插件</option>
                                <option value="research">研究项目</option>
                                <option value="personal">个人项目</option>
                                <option value="work">工作项目</option>
                                <option value="learning">学习计划</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <div class="filter-label">标签筛选</div>
                            <input type="text" class="filter-input" placeholder="输入标签..." id="pendingTaskTag" onkeyup="filterPendingCandidates()">
                        </div>
                        <div class="filter-group">
                            <div class="filter-label" style="color: var(--text-muted); font-size: 0.8rem;">
                                <span>📌 仅显示动作类型任务</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div id="pendingCandidatesList" class="task-select-list" style="max-height: 400px; overflow-y: auto;">
                    <!-- 候选任务列表将在这里动态生成 -->
                </div>
            </div>
            <div class="modal-footer">
                <div class="text-muted" style="margin-right: auto;">
                    已选择 <span id="selectedPendingCount">0</span> 个任务
                </div>
                <button class="btn btn-secondary" onclick="closeModal('addToPendingModal')">取消</button>
                <button class="btn btn-primary" onclick="confirmAddToPending()">确定添加</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 任务筛选 -->
    <div id="taskFilterModal" class="modal">
        <div class="modal-content" style="width: 600px;">
            <div class="modal-header">
                <h3 class="modal-title">🔍 任务筛选</h3>
                <button class="modal-close" onclick="closeModal('taskFilterModal')">✕</button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">设置筛选条件来过滤显示的任务</p>
                
                <div class="filter-panel">
                    <div class="filter-row">
                        <div class="filter-group">
                            <div class="filter-label">标题包含</div>
                            <input type="text" class="filter-input" placeholder="搜索任务标题..." id="modalFilterTitle">
                        </div>
                        <div class="filter-group">
                            <div class="filter-label">任务类型</div>
                            <select class="filter-input" id="modalFilterType">
                                <option value="">所有类型</option>
                                <option value="目标">目标</option>
                                <option value="关键结果">关键结果</option>
                                <option value="项目">项目</option>
                                <option value="动作">动作</option>
                            </select>
                        </div>
                    </div>
                    <div class="filter-row">
                        <div class="filter-group">
                            <div class="filter-label">项目筛选</div>
                            <select class="filter-input" id="modalFilterProject">
                                <option value="">所有项目</option>
                                <option value="mntask">MNTask插件</option>
                                <option value="mnai">MNAI插件</option>
                                <option value="research">研究项目</option>
                                <option value="personal">个人项目</option>
                                <option value="work">工作项目</option>
                                <option value="learning">学习计划</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <div class="filter-label">任务状态</div>
                            <select class="filter-input" id="modalFilterStatus">
                                <option value="">所有状态</option>
                                <option value="未开始">未开始</option>
                                <option value="进行中">进行中</option>
                                <option value="暂停">暂停</option>
                                <option value="已完成">已完成</option>
                            </select>
                        </div>
                    </div>
                    <div class="filter-row">
                        <div class="filter-group">
                            <div class="filter-label">优先级</div>
                            <select class="filter-input" id="modalFilterPriority">
                                <option value="">所有优先级</option>
                                <option value="高">高优先级</option>
                                <option value="中">中优先级</option>
                                <option value="低">低优先级</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <div class="filter-label">标签筛选</div>
                            <input type="text" class="filter-input" placeholder="输入标签..." id="modalFilterTag">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="clearAllFilters()">清除所有</button>
                <button class="btn btn-secondary" onclick="closeModal('taskFilterModal')">取消</button>
                <button class="btn btn-primary" onclick="applyModalFilters()">应用筛选</button>
            </div>
        </div>
    </div>

    <!-- 模态框 - 全局搜索 -->
    <div id="globalSearchModal" class="modal">
        <div class="modal-content" style="width: 600px; max-height: 80vh;">
            <div class="modal-header">
                <h3 class="modal-title">🔍 全局搜索</h3>
                <button class="modal-close" onclick="closeModal('globalSearchModal')">✕</button>
            </div>
            <div class="modal-body">
                <input type="text" 
                       id="globalSearchInput" 
                       class="form-input" 
                       placeholder="搜索任务标题、路径、标签..."
                       oninput="performGlobalSearch()"
                       style="font-size: 1.125rem; padding: var(--spacing-md);">
                
                <div class="search-filters" style="margin-top: var(--spacing-md); display: flex; gap: var(--spacing-sm);">
                    <label class="filter-checkbox">
                        <input type="checkbox" id="searchInCompleted" onchange="performGlobalSearch()">
                        包含已完成
                    </label>
                    <label class="filter-checkbox">
                        <input type="checkbox" id="searchInTags" checked onchange="performGlobalSearch()">
                        搜索标签
                    </label>
                    <label class="filter-checkbox">
                        <input type="checkbox" id="searchInPath" checked onchange="performGlobalSearch()">
                        搜索路径
                    </label>
                </div>
                
                <div id="searchResults" style="margin-top: var(--spacing-lg); max-height: 400px; overflow-y: auto;">
                    <!-- 搜索结果将在这里显示 -->
                </div>
            </div>
        </div>
    </div>

    <script>
        /* ========================================
           📊 数据模型
           ======================================== */
        
        // 任务数据结构
        let tasks = [];
        let filteredTasks = []; // 筛选后的任务列表
        let currentView = 'focus';
        let focusTasks = new Set(); // 当前焦点任务ID集合
        let focusTasksOrder = []; // 焦点任务的排序
        let tempFocusTasks = new Set(); // 临时选择的焦点任务ID集合
        let pendingTasks = new Set(); // 待处理任务ID集合（独立于筛选器）
        let pendingTasksOrder = []; // 待处理任务排序数组
        let customViews = {}; // 自定义视图配置
        let activeFilters = {}; // 当前激活的筛选器
        let currentEditingTaskId = null; // 当前正在编辑的任务ID
        
        // 任务卡片展开状态管理
        let expandedTasksBoard = new Set(); // 看板视图展开的任务ID集合
        
        // 时间轴相关变量
        let now = new Date();
        let selectedTimelineDate = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // 当前选择的时间轴日期（纯日期，无时间）
        let timelineViewMode = 'day'; // 时间轴视图模式: 'day', 'week', 'month'
        
        // 项目列表和自动完成相关变量
        const projectList = [
            { id: 'mntask', name: 'MNTask插件', icon: '📦' },
            { id: 'mnai', name: 'MNAI插件', icon: '🤖' },
            { id: 'research', name: '研究项目', icon: '🔬' },
            { id: 'personal', name: '个人项目', icon: '👤' },
            { id: 'work', name: '工作项目', icon: '💼' },
            { id: 'learning', name: '学习计划', icon: '📚' }
        ];
        let autocompleteSelectedIndex = -1;
        let autocompleteActive = false;
        let currentAutocompleteList = [];

        /* ========================================
           🔔 通知系统
           ======================================== */
        
        let notificationCount = 0;
        
        function showNotification(message, type = 'info', duration = 3000) {
            // 创建通知元素
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.style.top = `${20 + notificationCount * 70}px`;
            
            // 添加图标和关闭按钮
            const icons = {
                info: '💡',
                warning: '⚠️',
                error: '❌',
                success: '✅'
            };
            
            notification.innerHTML = `
                <span class="notification-icon">${icons[type] || icons.info}</span>
                <span class="notification-message">${message}</span>
                <button class="notification-close">×</button>
            `;
            
            // 添加样式（如果还没有的话）
            if (!document.getElementById('notificationStyles')) {
                const style = document.createElement('style');
                style.id = 'notificationStyles';
                style.textContent = `
                    .notification {
                        position: fixed;
                        right: 20px;
                        padding: 16px 20px;
                        padding-right: 40px;
                        border-radius: 12px;
                        font-size: 14px;
                        font-weight: 500;
                        color: white;
                        background: #4CAF50;
                        box-shadow: 0 6px 16px rgba(0,0,0,0.4);
                        z-index: 10000;
                        animation: slideIn 0.3s ease-out;
                        max-width: 350px;
                        min-width: 250px;
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        transition: transform 0.3s ease;
                    }
                    
                    .notification-icon {
                        font-size: 18px;
                        flex-shrink: 0;
                    }
                    
                    .notification-message {
                        flex: 1;
                        line-height: 1.4;
                    }
                    
                    .notification-close {
                        position: absolute;
                        top: 50%;
                        right: 12px;
                        transform: translateY(-50%);
                        background: none;
                        border: none;
                        color: white;
                        font-size: 24px;
                        cursor: pointer;
                        opacity: 0.8;
                        padding: 0;
                        width: 24px;
                        height: 24px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        transition: opacity 0.2s;
                    }
                    
                    .notification-close:hover {
                        opacity: 1;
                    }
                    
                    .notification-success {
                        background: #48bb78;
                    }
                    
                    .notification-warning {
                        background: #ed8936;
                    }
                    
                    .notification-error {
                        background: #e53e3e;
                    }
                    
                    .notification-info {
                        background: #3182ce;
                    }
                    
                    @keyframes slideIn {
                        from { transform: translateX(120%); }
                        to { transform: translateX(0); }
                    }
                    
                    @keyframes slideOut {
                        from { transform: translateX(0); }
                        to { transform: translateX(120%); }
                    }
                `;
                document.head.appendChild(style);
            }
            
            // 增加计数器
            notificationCount++;
            
            // 添加到页面
            document.body.appendChild(notification);
            
            // 关闭功能
            const closeNotification = () => {
                notification.style.animation = 'slideOut 0.3s ease-out';
                setTimeout(() => {
                    notification.remove();
                    notificationCount--;
                    // 重新排列剩余的通知
                    document.querySelectorAll('.notification').forEach((n, index) => {
                        n.style.top = `${20 + index * 70}px`;
                    });
                }, 300);
            };
            
            // 点击关闭按钮
            notification.querySelector('.notification-close').onclick = closeNotification;
            
            // 自动移除
            if (duration > 0) {
                setTimeout(closeNotification, duration);
            }
        }
        
        // 确认对话框
        function showConfirm(message, onConfirm, onCancel) {
            // 创建遮罩层
            const overlay = document.createElement('div');
            overlay.className = 'confirm-overlay';
            
            // 创建对话框
            const dialog = document.createElement('div');
            dialog.className = 'confirm-dialog';
            dialog.innerHTML = `
                <div class="confirm-content">
                    <p>${message}</p>
                    <div class="confirm-buttons">
                        <button class="btn btn-secondary" onclick="this.closest('.confirm-overlay').remove()">取消</button>
                        <button class="btn btn-primary confirm-ok">确定</button>
                    </div>
                </div>
            `;
            
            // 添加样式
            if (!document.getElementById('confirmStyles')) {
                const style = document.createElement('style');
                style.id = 'confirmStyles';
                style.textContent = `
                    .confirm-overlay {
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(0, 0, 0, 0.6);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        z-index: 10000;
                        animation: fadeIn 0.2s ease-out;
                    }
                    
                    .confirm-dialog {
                        background: var(--bg-tertiary);
                        border-radius: var(--radius-lg);
                        padding: 24px;
                        max-width: 400px;
                        width: 90%;
                        box-shadow: var(--shadow-lg);
                        animation: scaleIn 0.2s ease-out;
                    }
                    
                    .confirm-content p {
                        margin: 0 0 20px;
                        font-size: 16px;
                        color: var(--text-primary);
                    }
                    
                    .confirm-buttons {
                        display: flex;
                        gap: 12px;
                        justify-content: flex-end;
                    }
                    
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                    
                    @keyframes scaleIn {
                        from { transform: scale(0.9); opacity: 0; }
                        to { transform: scale(1); opacity: 1; }
                    }
                `;
                document.head.appendChild(style);
            }
            
            overlay.appendChild(dialog);
            document.body.appendChild(overlay);
            
            // 绑定事件
            dialog.querySelector('.confirm-ok').onclick = () => {
                overlay.remove();
                if (onConfirm) onConfirm();
            };
            
            overlay.onclick = (e) => {
                if (e.target === overlay) {
                    overlay.remove();
                    if (onCancel) onCancel();
                }
            };
        }
        
        // 扩展的任务数据结构示例
        const taskTemplate = {
            id: "task_1",
            type: "动作", // 目标、关键结果、项目、动作
            status: "进行中", // 未开始、暂停、进行中、已完成
            title: "修复MNTask插件Bug",
            path: "Q1目标 >> 产品优化 >> 插件开发",
            
            // 新增字段
            launchLink: "marginnote4app://note/xxx", // MN uistate链接
            currentFocus: true, // 是否是当前焦点任务
            todayPlannedTime: "14:00-16:00", // 今日计划时间段
            
            // 原有字段
            fields: {
                priority: "高", // 高、中、低
                dueDate: "2025-01-25",
                tags: ["插件", "Bug", "紧急"],
                today: true, // 是否是今日任务
                plannedDate: null, // 计划执行日期
                
                // 新增进展记录
                progressLog: [
                    {
                        date: "2025-01-20 10:00",
                        note: "完成问题定位，发现是TaskFieldUtils方法名冲突"
                    }
                ],
                
                // 所属的自定义视图
                customViews: ["插件Bug汇总", "本周重点"],
                
                // 项目归属
                project: "mntask",
                
                // 时间记录
                startTime: null, // 任务开始时间
                endTime: null    // 任务结束时间
            }
        };

        /* ========================================
           🚀 初始化
           ======================================== */
        
        // 生成测试数据
        function generateTestData() {
            // 从外部文件加载测试数据
            if (typeof testTaskData !== 'undefined') {
                const data = testTaskData.generate();
                tasks = data.tasks;
                focusTasks = new Set(data.focusTasks);
                console.log(`✅ 加载了 ${tasks.length} 个测试任务`);
            } else {
                console.error('❌ 无法加载测试数据，请确保 testData.js 文件存在');
            }
            
            console.log(`✅ 生成了 ${tasks.length} 个测试任务`);
        }

        /* ========================================
           📱 响应式侧边栏功能
           ======================================== */
        
        // 切换侧边栏显示状态
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            const windowWidth = window.innerWidth;
            
            if (windowWidth > 960) {
                // 桌面端：使用 collapsed 类
                sidebar.classList.toggle('collapsed');
                const isCollapsed = sidebar.classList.contains('collapsed');
                // 更新 body 类以控制按钮显示
                document.body.classList.toggle('sidebar-collapsed', isCollapsed);
                // 保存折叠状态到 localStorage
                localStorage.setItem('sidebar-collapsed', isCollapsed);
            } else {
                // 移动端：使用 show 类和遮罩层
                sidebar.classList.toggle('show');
                overlay.classList.toggle('show');
                
                // 如果是打开状态，阻止主体滚动
                if (sidebar.classList.contains('show')) {
                    document.body.style.overflow = 'hidden';
                } else {
                    document.body.style.overflow = '';
                }
            }
        }
        
        // 处理窗口大小变化
        function handleWindowResize() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            const windowWidth = window.innerWidth;
            
            // 如果窗口宽度大于960px，确保侧边栏恢复正常状态
            if (windowWidth > 960) {
                sidebar.classList.remove('show');
                overlay.classList.remove('show');
                document.body.style.overflow = '';
                
                // 恢复桌面端的折叠状态
                const isCollapsed = localStorage.getItem('sidebar-collapsed') === 'true';
                sidebar.classList.toggle('collapsed', isCollapsed);
                document.body.classList.toggle('sidebar-collapsed', isCollapsed);
            } else {
                // 移动端时移除桌面端的类
                sidebar.classList.remove('collapsed');
                document.body.classList.remove('sidebar-collapsed');
            }
        }
        
        // 初始化响应式侧边栏
        function initResponsiveSidebar() {
            // 添加窗口大小变化监听器
            window.addEventListener('resize', handleWindowResize);
            
            // 初始检查
            handleWindowResize();
            
            // 点击侧边栏外部关闭侧边栏（仅在移动设备上）
            document.addEventListener('click', (e) => {
                const sidebar = document.getElementById('sidebar');
                const toggleBtn = document.getElementById('sidebarToggleBtn');
                const windowWidth = window.innerWidth;
                
                if (windowWidth <= 960 && 
                    sidebar.classList.contains('show') && 
                    !sidebar.contains(e.target) && 
                    !toggleBtn.contains(e.target)) {
                    toggleSidebar();
                }
            });
        }
        
        /* ========================================
           🎯 焦点任务功能
           ======================================== */
        
        // 检查任务是否有时间冲突
        function hasTimeConflict(task) {
            if (!task.todayPlannedTime || !task.fields.today) return false;
            
            // 找出所有今日任务
            const todayTasks = tasks.filter(t => 
                t.fields.today && 
                t.todayPlannedTime && 
                t.id !== task.id
            );
            
            // 检查是否有时间重叠
            return todayTasks.some(t => timeRangesOverlap(task.todayPlannedTime, t.todayPlannedTime));
        }
        
        // 渲染焦点任务卡片
        function renderFocusTasks() {
            const container = document.getElementById('focusTaskContainer');
            // 只显示动作类型的未完成焦点任务
            let focusTasksList = tasks.filter(task => 
                focusTasks.has(task.id) && 
                task.type === '动作' && 
                task.status !== '已完成'
            );
            
            // 按照 focusTasksOrder 排序
            if (focusTasksOrder.length > 0) {
                focusTasksList.sort((a, b) => {
                    const indexA = focusTasksOrder.indexOf(a.id);
                    const indexB = focusTasksOrder.indexOf(b.id);
                    if (indexA === -1) return 1;
                    if (indexB === -1) return -1;
                    return indexA - indexB;
                });
            }
            
            container.innerHTML = focusTasksList.map((task, index) => {
                const hasConflict = hasTimeConflict(task);
                
                return `
                <div class="focus-task-card ${task.currentFocus ? 'active' : ''} ${hasConflict ? 'has-conflict' : ''} fade-in" 
                     draggable="true"
                     data-task-id="${task.id}"
                     data-task-index="${index}"
                     ondragstart="handleDragStart(event)"
                     ondragover="handleDragOver(event)"
                     ondragenter="handleDragEnter(event)"
                     ondragleave="handleDragLeave(event)"
                     ondrop="handleDrop(event)"
                     ondragend="handleDragEnd(event)"
                     onclick="viewTaskDetail('${task.id}')"
                     style="cursor: pointer;">
                    <div class="drag-handle" title="拖拽排序">⋮⋮</div>
                    <button class="focus-task-remove" onclick="removeFromFocus(event, '${task.id}')" title="从焦点移除">
                        ✕
                    </button>
                    <button class="focus-task-current ${task.currentFocus ? 'active' : ''}" 
                            onclick="event.stopPropagation(); toggleCurrentFocus('${task.id}')" 
                            title="${task.currentFocus ? '取消当前任务' : '设为当前任务'}">
                        ${task.currentFocus ? '⭐' : '☆'}
                    </button>
                    <div class="task-type-badge ${task.type.toLowerCase()}">
                        ${getTaskTypeIcon(task.type)} ${task.type}
                    </div>
                    
                    <h3 class="focus-task-title">${task.title}</h3>
                    ${task.path ? `<div class="focus-task-path" style="font-size: 0.75rem; color: var(--text-muted); margin: 4px 0 8px 0;">📍 ${task.path}</div>` : ''}
                    <div class="focus-task-meta">
                        <span>${getStatusIcon(task.status)} ${task.status}</span>
                        <span>${getPriorityIcon(task.fields.priority)} ${task.fields.priority}</span>
                        ${task.fields.dueDate ? `<span>📅 ${formatDate(task.fields.dueDate)}</span>` : ''}
                    </div>
                    
                    <div class="focus-task-meta">
                        ${task.status === '未开始' ? `
                            <button class="btn btn-primary" style="padding: 4px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '进行中')">
                                🚀 开始任务
                            </button>
                        ` : task.status === '进行中' ? `
                            <button class="btn btn-primary" style="padding: 4px 12px; font-size: 0.75rem; background: #48bb78;" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '已完成')">
                                ✅ 完成任务
                            </button>
                            <button class="btn btn-secondary" style="padding: 4px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '暂停')">
                                ⏸ 暂停
                            </button>
                        ` : task.status === '暂停' ? `
                            <button class="btn btn-primary" style="padding: 4px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '进行中')">
                                ▶️ 继续任务
                            </button>
                        ` : ''}
                        ${task.fields.startTime ? `<span style="font-size: 0.75rem; color: var(--text-muted);">⏱ ${formatElapsedTime(task.fields.startTime, task.fields.endTime)}</span>` : ''}
                    </div>
                    
                    ${task.todayPlannedTime ? `
                        <div class="focus-task-meta">
                            <span>⏰ ${task.todayPlannedTime}</span>
                            ${hasConflict ? '<span class="concurrent-indicator">🔀 时间冲突</span>' : ''}
                        </div>
                    ` : ''}
                    
                    ${task.fields.progressLog && task.fields.progressLog.length > 0 ? `
                        <div class="recent-progress">
                            <div class="recent-progress-header">
                                <span>📝 最近进展</span>
                                <span class="recent-progress-time">${formatProgressTime(task.fields.progressLog[task.fields.progressLog.length - 1].date)}</span>
                            </div>
                            <div class="recent-progress-content">
                                ${task.fields.progressLog[task.fields.progressLog.length - 1].note}
                            </div>
                        </div>
                    ` : ''}
                    
                    <div class="focus-task-actions">
                        ${task.launchLink ? `
                            <button class="btn btn-launch" onclick="launchTask(event, '${task.id}')">
                                🚀 启动
                            </button>
                        ` : `
                            <button class="btn btn-secondary" onclick="setLaunchLink(event, '${task.id}')">
                                🔗 设置启动链接
                            </button>
                        `}
                        <button class="btn btn-secondary" onclick="addProgressNote(event, '${task.id}')">
                            📝 添加进展
                        </button>
                        <button class="btn btn-secondary" onclick="viewProgressLog(event, '${task.id}')">
                            📊 进展详情
                        </button>
                    </div>
                </div>
            `;
            }).join('') || '<p class="text-muted">暂无焦点任务，请从任务列表中选择</p>';
            
            // 更新待处理任务
            renderPendingTasks();
        }

        // 渲染待处理任务
        function renderPendingTasks() {
            // 使用独立的待处理任务列表（不受筛选器影响）
            let pendingTasksList = tasks.filter(task => 
                pendingTasks.has(task.id) && 
                task.status !== '已完成' && 
                !focusTasks.has(task.id) &&
                task.type === '动作'  // 只显示动作类型的任务
            );
            
            // 按照 pendingTasksOrder 排序
            if (pendingTasksOrder.length > 0) {
                pendingTasksList.sort((a, b) => {
                    const indexA = pendingTasksOrder.indexOf(a.id);
                    const indexB = pendingTasksOrder.indexOf(b.id);
                    if (indexA === -1) return 1;
                    if (indexB === -1) return -1;
                    return indexA - indexB;
                });
            }
            
            document.getElementById('pendingCount').textContent = pendingTasksList.length;
            
            const container = document.getElementById('pendingTasksList');
            container.innerHTML = pendingTasksList.slice(0, 10).map((task, index) => `
                <div class="timeline-content mb-2 slide-in pending-task-item" 
                     draggable="true"
                     data-task-id="${task.id}"
                     data-task-index="${index}"
                     ondragstart="handlePendingDragStart(event)"
                     ondragover="handlePendingDragOver(event)"
                     ondragenter="handlePendingDragEnter(event)"
                     ondragleave="handlePendingDragLeave(event)"
                     ondrop="handlePendingDrop(event)"
                     ondragend="handlePendingDragEnd(event)"
                     onclick="viewTaskDetail('${task.id}')" 
                     style="cursor: pointer; position: relative;">
                    <div class="drag-handle" style="position: absolute; left: 8px; top: 50%; transform: translateY(-50%); font-size: 16px; color: var(--text-muted); cursor: grab; opacity: 0; transition: opacity 0.2s;" title="拖拽排序">⋮⋮</div>
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-left: 20px;">
                        <div>
                            <span class="task-type-badge ${task.type.toLowerCase()} text-small">
                                ${getTaskTypeIcon(task.type)} ${task.type}
                            </span>
                            <span class="text-small text-muted ml-2">${task.fields.priority}优先级</span>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            <button class="btn btn-secondary" style="padding: 6px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); removeFromPending('${task.id}')">
                                ✕ 移除
                            </button>
                            <button class="btn btn-primary" style="padding: 12px 20px; font-size: 1rem; font-weight: 600; background: linear-gradient(135deg, #667eea, #764ba2); border: none; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3); transition: all 0.3s ease;" onclick="event.stopPropagation(); addToFocus('${task.id}')" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px rgba(102, 126, 234, 0.4)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(102, 126, 234, 0.3)'">
                                🎯 加入焦点
                            </button>
                        </div>
                    </div>
                    <div class="mt-1 font-weight-500" style="margin-left: 20px;">${task.title}</div>
                    <div class="text-small text-muted" style="margin-left: 20px;">${task.path}</div>
                    ${task.fields.dueDate ? `<div class="text-small text-muted" style="margin-left: 20px;">截止: ${formatDate(task.fields.dueDate)}</div>` : ''}
                </div>
            `).join('') || '<p class="text-muted">暂无待处理任务，点击左侧 "📋 添加到待处理" 来添加任务</p>';
        }

        /* ========================================
           📅 今日时间轴功能
           ======================================== */
        
        // 检测时间段是否重叠
        function timeRangesOverlap(range1, range2) {
            if (!range1 || !range2) return false;
            
            // 解析时间字符串为分钟数
            function parseTimeToMinutes(timeStr) {
                const parts = timeStr.trim().split(':');
                if (parts.length !== 2) return 0;
                const hours = parseInt(parts[0]) || 0;
                const minutes = parseInt(parts[1]) || 0;
                return hours * 60 + minutes;
            }
            
            try {
                const times1 = range1.split('-').map(t => parseTimeToMinutes(t));
                const times2 = range2.split('-').map(t => parseTimeToMinutes(t));
                
                if (times1.length !== 2 || times2.length !== 2) return false;
                
                const [start1, end1] = times1;
                const [start2, end2] = times2;
                
                // 检查时间段是否有重叠
                return start1 < end2 && start2 < end1;
            } catch (e) {
                console.error('时间解析错误:', e);
                return false;
            }
        }
        
        // 将任务分组到并发组
        function groupConcurrentTasks(tasks) {
            const groups = [];
            const processed = new Set();
            
            tasks.forEach((task, index) => {
                if (processed.has(index)) return;
                
                const group = [task];
                processed.add(index);
                
                // 查找与当前任务时间重叠的其他任务
                for (let i = index + 1; i < tasks.length; i++) {
                    if (!processed.has(i) && timeRangesOverlap(task.todayPlannedTime, tasks[i].todayPlannedTime)) {
                        group.push(tasks[i]);
                        processed.add(i);
                    }
                }
                
                groups.push(group);
            });
            
            return groups;
        }
        
        // 设置时间轴视图模式
        function setTimelineViewMode(mode) {
            timelineViewMode = mode;
            
            // 更新按钮状态
            document.querySelectorAll('.view-mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === mode);
            });
            
            // 更新日期导航的步进值
            renderTodayTimeline();
        }
        
        // 获取日期范围
        function getDateRange(baseDate, mode) {
            const start = new Date(baseDate);
            const end = new Date(baseDate);
            
            switch (mode) {
                case 'week':
                    // 获取本周的开始和结束日期（周一到周日）
                    const day = start.getDay();
                    const diff = start.getDate() - day + (day === 0 ? -6 : 1);
                    start.setDate(diff);
                    end.setDate(start.getDate() + 6);
                    break;
                case 'month':
                    // 获取本月的开始和结束日期
                    start.setDate(1);
                    end.setMonth(end.getMonth() + 1);
                    end.setDate(0);
                    break;
                // 'day' 模式不需要调整
            }
            
            return {
                start: formatDateToLocal(start),
                end: formatDateToLocal(end)
            };
        }
        
        // 渲染今日时间轴
        function renderTodayTimeline() {
            // 获取选择的日期范围
            const dateRange = getDateRange(selectedTimelineDate, timelineViewMode);
            const todayStr = formatDateToLocal(new Date());
            
            // 根据选择的日期范围筛选任务
            const timelineTasks = tasks.filter(task => {
                // 只显示项目和动作类型的任务
                if (task.type !== '项目' && task.type !== '动作') {
                    return false;
                }
                
                // 只显示进行中和已完成的任务
                if (task.status !== '进行中' && task.status !== '已完成') {
                    return false;
                }
                
                // 如果任务有 plannedDate，则按日期范围筛选
                if (task.fields.plannedDate) {
                    if (timelineViewMode === 'day') {
                        return task.fields.plannedDate === dateRange.start;
                    } else {
                        return task.fields.plannedDate >= dateRange.start && 
                               task.fields.plannedDate <= dateRange.end;
                    }
                }
                
                // 如果没有 plannedDate，不显示在时间轴中
                // （已移除对 today 字段的依赖）
                
                // 其他情况不显示没有 plannedDate 的任务
                return false;
            });
            
            const container = document.getElementById('todayTimeline');
            
            // 更新统计信息
            updateTimelineStats(timelineTasks, dateRange);
            
            // 按状态和时间排序：进行中的在前，已完成的在后
            timelineTasks.sort((a, b) => {
                if (a.status === '进行中' && b.status !== '进行中') return -1;
                if (a.status !== '进行中' && b.status === '进行中') return 1;
                
                // 如果状态相同，按开始时间或结束时间排序
                const timeA = a.fields.startTime || a.fields.endTime || '';
                const timeB = b.fields.startTime || b.fields.endTime || '';
                
                // 如果时间相同，按任务ID排序（确保稳定的排序结果）
                if (timeA === timeB) {
                    return a.id.localeCompare(b.id);
                }
                
                return timeA.localeCompare(timeB); // 最早的在前
            });
            
            // 生成时间轴内容
            if (timelineTasks.length === 0) {
                container.innerHTML = '<p class="text-muted">暂无进行中或已完成的任务</p>';
                return;
            }
            
            // 对于周视图和月视图，按日期分组
            if (timelineViewMode !== 'day') {
                const tasksByDate = {};
                timelineTasks.forEach(task => {
                    const date = task.fields.plannedDate || formatDateToLocal(new Date());
                    if (!tasksByDate[date]) {
                        tasksByDate[date] = [];
                    }
                    tasksByDate[date].push(task);
                });
                
                // 生成分组的时间轴
                const sortedDates = Object.keys(tasksByDate).sort();
                container.innerHTML = `
                    <div class="timeline-line"></div>
                    ${sortedDates.map(date => {
                        const dateObj = new Date(date);
                        const dateLabel = dateObj.toLocaleDateString('zh-CN', {
                            month: 'numeric',
                            day: 'numeric',
                            weekday: 'short'
                        });
                        
                        return `
                            <div class="timeline-date-group">
                                <div class="timeline-date-label">${dateLabel}</div>
                                ${tasksByDate[date].map(task => renderTimelineTask(task)).join('')}
                            </div>
                        `;
                    }).join('')}
                `;
            } else {
                // 日视图 - 检测并分组同时间的任务
                const taskGroups = [];
                let currentGroup = null;
                
                timelineTasks.forEach((task, index) => {
                    const taskTime = task.fields.startTime || task.fields.endTime || '';
                    
                    if (currentGroup && currentGroup.time === taskTime) {
                        // 添加到当前组
                        currentGroup.tasks.push(task);
                    } else {
                        // 创建新组
                        currentGroup = {
                            time: taskTime,
                            tasks: [task]
                        };
                        taskGroups.push(currentGroup);
                    }
                });
                
                // 渲染分组的时间轴
                container.innerHTML = `
                    <div class="timeline-line"></div>
                    ${taskGroups.map(group => {
                        if (group.tasks.length === 1) {
                            // 单个任务，正常渲染
                            return renderTimelineTask(group.tasks[0]);
                        } else {
                            // 多个任务同时间，特殊渲染
                            return renderTimelineTaskGroup(group);
                        }
                    }).join('')}
                `;
            }
        }
        
        // 渲染同时间的任务组
        function renderTimelineTaskGroup(group) {
            const timeStr = group.tasks[0].status === '进行中' && group.tasks[0].fields.startTime
                ? `开始于 ${new Date(group.tasks[0].fields.startTime).toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })}`
                : group.tasks[0].status === '已完成' && group.tasks[0].fields.endTime
                ? `完成于 ${new Date(group.tasks[0].fields.endTime).toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })}`
                : group.tasks[0].status;
            
            return `
                <div class="timeline-item-group fade-in">
                    <div class="timeline-dot-group">
                        <div class="timeline-dot ${group.tasks.some(t => t.status === '进行中') ? 'active' : ''}"></div>
                        <span class="timeline-group-count">${group.tasks.length}</span>
                    </div>
                    <div class="timeline-time">${timeStr}</div>
                    <div class="timeline-content-wrapper">
                        <div class="timeline-group-label">同时${group.tasks[0].status === '进行中' ? '开始' : '完成'}的任务</div>
                        <div class="timeline-group-tasks">
                            ${group.tasks.map(task => `
                                <div class="timeline-content timeline-content-grouped" onclick="viewTaskDetail('${task.id}')">
                                    <div style="display: flex; justify-content: space-between; align-items: center;">
                                        <span class="task-type-badge ${task.type.toLowerCase()} text-small">
                                            ${getTaskTypeIcon(task.type)} ${task.type}
                                        </span>
                                        <span class="${getStatusClass(task.status)} text-small">
                                            ${getStatusIcon(task.status)} ${task.status}
                                        </span>
                                    </div>
                                    <div class="mt-1 font-weight-500">${task.title}</div>
                                    <div class="text-small text-muted mt-1">
                                        ${task.path}
                                    </div>
                                    ${task.status === '进行中' && task.fields.startTime ? `
                                        <div class="text-small text-muted mt-1">
                                            ⏱ 已用时：${formatElapsedTime(task.fields.startTime)}
                                        </div>
                                    ` : ''}
                                    ${task.status === '已完成' && task.fields.startTime && task.fields.endTime ? `
                                        <div class="text-small text-muted mt-1">
                                            ⏱ 耗时：${formatElapsedTime(task.fields.startTime, task.fields.endTime)}
                                        </div>
                                    ` : ''}
                                    <div class="mt-2" style="display: flex; gap: 8px;">
                                        ${task.status === '进行中' ? `
                                            <button class="btn btn-primary" style="padding: 4px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '已完成')">
                                                ✅ 完成
                                            </button>
                                            <button class="btn btn-secondary" style="padding: 4px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '暂停')">
                                                ⏸ 暂停
                                            </button>
                                        ` : ''}
                                        <button class="btn btn-secondary" style="padding: 4px 12px; font-size: 0.75rem;" onclick="event.stopPropagation(); viewProgressLog(event, '${task.id}')">
                                            📊 进展
                                        </button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 渲染单个时间轴任务
        function renderTimelineTask(task) {
            const timeStr = task.status === '进行中' && task.fields.startTime
                ? `开始于 ${new Date(task.fields.startTime).toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })}`
                : task.status === '已完成' && task.fields.endTime
                ? `完成于 ${new Date(task.fields.endTime).toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })}`
                : task.status;
            
            return `
                <div class="timeline-item fade-in">
                    <div class="timeline-dot ${task.status === '进行中' ? 'active' : ''}"></div>
                    <div class="timeline-time">${timeStr}</div>
                    <div class="timeline-content-wrapper">
                        <div class="timeline-main-content">
                            <!-- 任务头部：信息 + 操作按钮 -->
                            <div class="timeline-header">
                                <div class="task-info" onclick="viewTaskDetail('${task.id}')">
                                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--spacing-xs);">
                                        <span class="task-type-badge ${task.type.toLowerCase()} text-small">
                                            ${getTaskTypeIcon(task.type)} ${task.type}
                                        </span>
                                        <span class="${getStatusClass(task.status)} text-small">
                                            ${getStatusIcon(task.status)} ${task.status}
                                        </span>
                                    </div>
                                    <div class="font-weight-500" style="margin-bottom: var(--spacing-xs);">${task.title}</div>
                                    <div class="text-small text-muted" style="margin-bottom: var(--spacing-xs);">
                                        📍 ${task.path}
                                    </div>
                                    ${task.status === '进行中' && task.fields.startTime ? `
                                        <div class="text-small text-muted">
                                            ⏱ 已用时：${formatElapsedTime(task.fields.startTime)}
                                        </div>
                                    ` : ''}
                                    ${task.status === '已完成' && task.fields.startTime && task.fields.endTime ? `
                                        <div class="text-small text-muted">
                                            ⏱ 耗时：${formatElapsedTime(task.fields.startTime, task.fields.endTime)}
                                        </div>
                                    ` : ''}
                                </div>
                                
                                <div class="task-actions">
                                    ${task.status === '进行中' ? `
                                        <button class="btn btn-sm btn-success" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '已完成')" title="完成任务">
                                            ✅
                                        </button>
                                        <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '暂停')" title="暂停任务">
                                            ⏸
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                            
                            <!-- 进展记录显示区域 -->
                            ${renderTaskProgressInline(task)}
                            
                            <!-- 快速进展输入面板 -->
                            <div id="quickProgress-${task.id}" class="quick-progress-panel hidden">
                                <textarea class="progress-input" 
                                          placeholder="记录当前进展..."
                                          id="progressText-${task.id}"
                                          onclick="event.stopPropagation()"
                                          oninput="updateCharacterCount('${task.id}')"
                                          maxlength="500"></textarea>
                                <div class="progress-meta">
                                    <div class="progress-char-count">
                                        <span id="charCount-${task.id}" class="char-count">0</span>/500
                                    </div>
                                    <div class="progress-tip">
                                        💡 Ctrl+Enter 保存，Esc 取消
                                    </div>
                                </div>
                                <div class="progress-actions">
                                    <button class="btn btn-primary btn-sm" 
                                            onclick="event.stopPropagation(); saveQuickProgress('${task.id}')">
                                        💾 保存
                                    </button>
                                    <button class="btn btn-secondary btn-sm" 
                                            onclick="event.stopPropagation(); cancelQuickProgress('${task.id}')">
                                        ❌ 取消
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        /* ========================================
           🔍 筛选功能
           ======================================== */
        
        // 应用快速筛选
        function applyQuickFilter(filterType) {
            // 更新侧边栏选中状态
            document.querySelectorAll('.custom-view-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.closest('.custom-view-item').classList.add('active');
            
            // 应用筛选逻辑
            switch(filterType) {
                case 'current':
                    // 显示焦点任务
                    switchView('focus');
                    break;
                case 'today':
                    // 切换到今日视图，并设置日期为今天
                    const now1 = new Date();
                    selectedTimelineDate = new Date(now1.getFullYear(), now1.getMonth(), now1.getDate());
                    switchView('today');
                    break;
                case 'high-priority':
                    // 筛选高优先级任务
                    activeFilters.priority = '高';
                    applyFilters();
                    break;
                case 'in-progress':
                    // 筛选进行中的任务
                    activeFilters.status = '进行中';
                    applyFilters();
                    break;
                case 'paused':
                    // 筛选暂停的任务
                    activeFilters.status = '暂停';
                    applyFilters();
                    break;
            }
        }

        // 保存当前视图
        function saveCurrentView() {
            const viewName = prompt('请输入视图名称：');
            if (!viewName) return;
            
            // 保存当前的筛选配置
            customViews[viewName] = {
                filters: {...activeFilters},
                focusTasks: [...focusTasks],
                viewType: currentView
            };
            
            // 添加到侧边栏
            const viewsList = document.getElementById('customViewsList');
            const newItem = document.createElement('div');
            newItem.className = 'custom-view-item slide-in';
            newItem.onclick = () => loadCustomView(viewName);
            newItem.innerHTML = `
                <span>📌 ${viewName}</span>
                <span class="text-small text-muted">0</span>
            `;
            viewsList.appendChild(newItem);
            
            showNotification(`视图 "${viewName}" 已保存`, 'success');
        }

        // 加载自定义视图
        function loadCustomView(viewName) {
            const view = customViews[viewName];
            if (view) {
                activeFilters = {...view.filters};
                focusTasks = new Set(view.focusTasks);
                switchView(view.viewType);
                applyFilters();
            }
        }

        /* ========================================
           🚀 任务操作功能
           ======================================== */
        
        // 启动任务
        function launchTask(event, taskId) {
            event.stopPropagation();
            const task = tasks.find(t => t.id === taskId);
            if (task && task.launchLink) {
                console.log(`启动任务: ${task.title}`);
                console.log(`跳转到: ${task.launchLink}`);
                // 在实际应用中，这里会调用 window.location.href = task.launchLink
                showNotification(`正在启动任务: ${task.title}`, 'info');
                // 模拟启动任务 - 实际应该打开链接
                console.log(`启动链接: ${task.launchLink}`);
            }
        }

        // 设置启动链接
        function setLaunchLink(event, taskId) {
            event.stopPropagation();
            currentEditingTaskId = taskId;
            const task = tasks.find(t => t.id === taskId);
            if (!task) return;
            
            // 更新模态框标题
            document.getElementById('launchLinkTitle').textContent = `设置启动链接 - ${task.title}`;
            
            // 如果任务已有链接，预填充
            if (task.launchLink) {
                document.getElementById('marginnoteLink').value = task.launchLink;
            }
            
            // 加载最近使用的链接
            loadRecentLinks();
            
            // 显示模态框
            document.getElementById('launchLinkModal').classList.add('active');
        }

        // 选择链接类型
        function selectLinkType(type) {
            // 更新按钮状态
            document.querySelectorAll('.link-type-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`[data-type="${type}"]`).classList.add('active');
            
            // 显示对应的输入框
            document.getElementById('marginnoteLinkGroup').classList.add('hidden');
            document.getElementById('urlLinkGroup').classList.add('hidden');
            document.getElementById('fileLinkGroup').classList.add('hidden');
            
            switch(type) {
                case 'marginnote':
                    document.getElementById('marginnoteLinkGroup').classList.remove('hidden');
                    break;
                case 'url':
                    document.getElementById('urlLinkGroup').classList.remove('hidden');
                    break;
                case 'file':
                    document.getElementById('fileLinkGroup').classList.remove('hidden');
                    break;
            }
        }

        // 加载最近使用的链接
        function loadRecentLinks() {
            const recentLinks = getRecentLinks();
            const listContainer = document.getElementById('recentLinksList');
            
            if (recentLinks.length === 0) {
                listContainer.innerHTML = '<p class="text-muted text-small">暂无最近使用的链接</p>';
                return;
            }
            
            listContainer.innerHTML = recentLinks.map(link => `
                <div class="recent-link-item" onclick="applyRecentLink('${encodeURIComponent(link.url)}', '${link.type}')">
                    <span class="recent-link-icon">${getIconByType(link.type)}</span>
                    <span class="recent-link-text">${link.url}</span>
                    <span class="recent-link-time">${formatRelativeTime(link.time)}</span>
                </div>
            `).join('');
        }

        // 应用最近的链接
        function applyRecentLink(encodedUrl, type) {
            const url = decodeURIComponent(encodedUrl);
            selectLinkType(type);
            
            switch(type) {
                case 'marginnote':
                    document.getElementById('marginnoteLink').value = url;
                    break;
                case 'url':
                    document.getElementById('urlLink').value = url;
                    break;
                case 'file':
                    document.getElementById('fileLink').value = url;
                    break;
            }
        }

        // 确认启动链接
        function confirmLaunchLink() {
            const activeType = document.querySelector('.link-type-btn.active').dataset.type;
            let link = '';
            
            switch(activeType) {
                case 'marginnote':
                    link = document.getElementById('marginnoteLink').value.trim();
                    break;
                case 'url':
                    link = document.getElementById('urlLink').value.trim();
                    break;
                case 'file':
                    link = document.getElementById('fileLink').value.trim();
                    break;
            }
            
            if (!link) {
                showNotification('请输入链接', 'warning');
                return;
            }
            
            const task = tasks.find(t => t.id === currentEditingTaskId);
            if (task) {
                task.launchLink = link;
                task.launchLinkType = activeType;
                
                // 保存到最近使用
                saveRecentLink(link, activeType);
                
                // 清空表单
                document.getElementById('marginnoteLink').value = '';
                document.getElementById('urlLink').value = '';
                document.getElementById('fileLink').value = '';
                document.getElementById('linkNote').value = '';
                
                closeModal('launchLinkModal');
                renderFocusTasks();
                saveToLocalStorage();
                
                // 显示成功提示
                console.log('✅ 启动链接已设置');
            }
        }

        // 获取最近使用的链接
        function getRecentLinks() {
            const saved = localStorage.getItem('mntask-recent-links');
            return saved ? JSON.parse(saved) : [];
        }

        // 保存最近使用的链接
        function saveRecentLink(url, type) {
            let recentLinks = getRecentLinks();
            
            // 移除重复项
            recentLinks = recentLinks.filter(link => link.url !== url);
            
            // 添加到开头
            recentLinks.unshift({
                url: url,
                type: type,
                time: Date.now()
            });
            
            // 最多保存10个
            recentLinks = recentLinks.slice(0, 10);
            
            localStorage.setItem('mntask-recent-links', JSON.stringify(recentLinks));
        }

        // 根据类型获取图标
        function getIconByType(type) {
            const icons = {
                'marginnote': '📚',
                'url': '🌐',
                'file': '📄'
            };
            return icons[type] || '🔗';
        }

        // 格式化相对时间
        function formatRelativeTime(timestamp) {
            const now = Date.now();
            const diff = now - timestamp;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return '刚刚';
            if (minutes < 60) return `${minutes}分钟前`;
            if (hours < 24) return `${hours}小时前`;
            if (days < 7) return `${days}天前`;
            return new Date(timestamp).toLocaleDateString('zh-CN');
        }

        // 添加进展说明
        function addProgressNote(event, taskId) {
            event.stopPropagation();
            const task = tasks.find(t => t.id === taskId);
            if (!task) return;
            
            const note = prompt('请输入进展说明：');
            
            if (note && note.trim()) {
                // 添加进展记录
                if (!task.fields.progressLog) {
                    task.fields.progressLog = [];
                }
                
                task.fields.progressLog.push({
                    date: new Date().toLocaleString('zh-CN'),
                    note: note.trim()
                });
                
                renderFocusTasks();
                saveToLocalStorage();
                showNotification('进展已记录', 'success');
            }
        }

        // 查看进展日志
        function viewProgressLog(event, taskId) {
            event.stopPropagation();
            const task = tasks.find(t => t.id === taskId);
            if (!task) return;
            
            // 更新模态框标题
            document.getElementById('progressLogTitle').textContent = `${task.title} - 进展详情`;
            
            // 生成进展日志内容
            const logList = document.getElementById('progressLogList');
            
            if (!task.fields.progressLog || task.fields.progressLog.length === 0) {
                logList.innerHTML = `
                    <div class="progress-log-empty">
                        <p>暂无进展记录</p>
                        <button class="btn btn-primary" onclick="closeModal('progressLogModal'); addProgressNote(event, '${taskId}')">
                            📝 添加第一条进展
                        </button>
                    </div>
                `;
            } else {
                // 按时间倒序显示，最新的在前面
                const sortedLogs = [...task.fields.progressLog].reverse();
                logList.innerHTML = sortedLogs.map((log, index) => {
                    const originalIndex = task.fields.progressLog.length - 1 - index; // 获取原始索引
                    return `
                        <div class="progress-log-item" 
                             data-task-id="${taskId}" 
                             data-log-index="${originalIndex}"
                             ondblclick="editProgressLog('${taskId}', ${originalIndex})">
                            <div class="progress-log-time">${log.date}</div>
                            <div class="progress-log-content">${escapeHtml(log.note)}</div>
                        </div>
                    `;
                }).join('');
            }
            
            // 显示模态框
            document.getElementById('progressLogModal').classList.add('active');
        }
        
        // HTML 转义函数，防止 XSS
        function escapeHtml(unsafe) {
            if (unsafe == null) {
                return '';
            }
            return String(unsafe)
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
        
        // 编辑进展日志
        function editProgressLog(taskId, logIndex) {
            const task = tasks.find(t => t.id === taskId);
            if (!task || !task.fields.progressLog || !task.fields.progressLog[logIndex]) return;
            
            const log = task.fields.progressLog[logIndex];
            const logItem = document.querySelector(`[data-task-id="${taskId}"][data-log-index="${logIndex}"]`);
            if (!logItem) return;
            
            const contentDiv = logItem.querySelector('.progress-log-content');
            const originalContent = log.note;
            
            // 创建编辑区域
            const textarea = document.createElement('textarea');
            textarea.className = 'progress-log-edit';
            textarea.value = originalContent;
            textarea.style.width = '100%';
            textarea.style.minHeight = '60px';
            textarea.style.padding = '8px';
            textarea.style.fontSize = '0.9375rem';
            textarea.style.fontFamily = 'inherit';
            textarea.style.lineHeight = '1.6';
            textarea.style.background = 'var(--bg-primary)';
            textarea.style.color = 'var(--text-primary)';
            textarea.style.border = '1px solid var(--type-goal)';
            textarea.style.borderRadius = 'var(--radius-sm)';
            textarea.style.resize = 'vertical';
            
            // 替换内容
            contentDiv.innerHTML = '';
            contentDiv.appendChild(textarea);
            
            // 自动调整高度
            textarea.style.height = 'auto';
            textarea.style.height = textarea.scrollHeight + 'px';
            textarea.focus();
            textarea.select();
            
            // 保存函数
            const saveEdit = () => {
                const newContent = textarea.value.trim();
                if (newContent && newContent !== originalContent) {
                    log.note = newContent;
                    saveToLocalStorage();
                    // 重新渲染进展日志
                    viewProgressLog({ stopPropagation: () => {} }, taskId);
                } else if (!newContent) {
                    // 如果内容为空，恢复原内容
                    contentDiv.innerHTML = escapeHtml(originalContent);
                } else {
                    // 内容未改变，恢复显示
                    contentDiv.innerHTML = escapeHtml(originalContent);
                }
            };
            
            // 取消编辑函数
            const cancelEdit = () => {
                contentDiv.innerHTML = escapeHtml(originalContent);
            };
            
            // 监听键盘事件
            textarea.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    saveEdit();
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    cancelEdit();
                }
            });
            
            // 失去焦点时保存
            textarea.addEventListener('blur', saveEdit);
            
            // 自动调整高度
            textarea.addEventListener('input', () => {
                textarea.style.height = 'auto';
                textarea.style.height = textarea.scrollHeight + 'px';
            });
        }

        /* ========================================
           🚀 快速进展输入功能
           ======================================== */

        // 切换快速进展输入面板
        function toggleQuickProgress(taskId) {
            const panel = document.getElementById(`quickProgress-${taskId}`);
            const isHidden = panel.classList.contains('hidden');
            
            // 关闭其他所有打开的进展输入面板
            document.querySelectorAll('.quick-progress-panel').forEach(p => {
                if (p.id !== `quickProgress-${taskId}`) {
                    p.classList.add('hidden');
                }
            });
            
            if (isHidden) {
                panel.classList.remove('hidden');
                // 聚焦到输入框
                const textArea = document.getElementById(`progressText-${taskId}`);
                setTimeout(() => {
                    textArea.focus();
                    // 初始化字符计数
                    updateCharacterCount(taskId);
                }, 100);
            } else {
                panel.classList.add('hidden');
            }
        }

        // 保存快速进展
        function saveQuickProgress(taskId) {
            const progressText = document.getElementById(`progressText-${taskId}`).value.trim();
            
            if (!progressText) {
                alert('请输入进展内容');
                return;
            }
            
            // 调用现有的进展保存逻辑
            const now = new Date();
            const progressEntry = {
                date: now.toLocaleString('zh-CN'),
                note: progressText
            };
            
            // 更新任务进展日志
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                if (!task.fields.progressLog) {
                    task.fields.progressLog = [];
                }
                task.fields.progressLog.push(progressEntry);
                
                // 保存到本地存储
                saveToLocalStorage();
                
                // 清空输入框并隐藏面板
                document.getElementById(`progressText-${taskId}`).value = '';
                document.getElementById(`quickProgress-${taskId}`).classList.add('hidden');
                
                // 显示成功提示
                const progressLength = progressText.length;
                showNotification(`进展已保存 ✅ (${progressLength}字)`, 'success');
                
                // 刷新时间轴显示
                if (currentView === 'today') {
                    renderTodayTimeline();
                }
            }
        }

        // 取消快速进展输入
        function cancelQuickProgress(taskId) {
            document.getElementById(`progressText-${taskId}`).value = '';
            document.getElementById(`quickProgress-${taskId}`).classList.add('hidden');
        }

        // 更新字符计数
        function updateCharacterCount(taskId) {
            const textarea = document.getElementById(`progressText-${taskId}`);
            const charCountElement = document.getElementById(`charCount-${taskId}`);
            
            if (textarea && charCountElement) {
                const currentLength = textarea.value.length;
                charCountElement.textContent = currentLength;
                
                // 根据字符数量改变颜色
                if (currentLength > 400) {
                    charCountElement.style.color = 'var(--priority-high)';
                } else if (currentLength > 300) {
                    charCountElement.style.color = 'var(--priority-medium)';
                } else {
                    charCountElement.style.color = 'var(--text-muted)';
                }
                
                // 接近限制时提示
                if (currentLength >= 450) {
                    charCountElement.parentElement.style.animation = 'pulse 1s infinite';
                } else {
                    charCountElement.parentElement.style.animation = 'none';
                }
            }
        }

        /* ========================================
           📝 时间轴进展记录显示功能
           ======================================== */

        // 格式化进展时间显示
        function formatProgressTime(dateStr) {
            const progressDate = new Date(dateStr);
            const now = new Date();
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const progressDay = new Date(progressDate.getFullYear(), progressDate.getMonth(), progressDate.getDate());
            
            const timeStr = progressDate.toLocaleTimeString('zh-CN', {hour: '2-digit', minute: '2-digit'});
            
            if (progressDay.getTime() === today.getTime()) {
                return timeStr; // 今天：显示 "9:15"
            } else if (progressDay.getTime() === today.getTime() - 86400000) {
                return `昨天 ${timeStr}`; // 昨天：显示 "昨天 9:15"
            } else {
                return `${progressDate.getMonth()+1}-${progressDate.getDate()} ${timeStr}`; // 更早：显示 "1-15 9:15"
            }
        }

        // 渲染任务内联进展记录
        function renderTaskProgressInline(task) {
            if (!task.fields.progressLog || task.fields.progressLog.length === 0) {
                return `
                    <div class="timeline-progress-display">
                        <div class="progress-header">📝 最新进展：</div>
                        <div class="timeline-progress-empty">暂无进展记录</div>
                        <div class="progress-inline-actions">
                            <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); toggleQuickProgress('${task.id}')" title="记录进展">
                                📝 记录
                            </button>
                            <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); viewProgressLog(event, '${task.id}')" title="查看详情">
                                📊 详情
                            </button>
                        </div>
                    </div>
                `;
            }
            
            // 获取最新5条进展，按时间倒序
            const recentProgress = [...task.fields.progressLog]
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .slice(0, 5);
            
            return `
                <div class="timeline-progress-display">
                    <div class="progress-header">📝 最新进展：</div>
                    ${recentProgress.map((progress, index) => `
                        <div class="progress-item ${index === 0 ? 'latest' : 'history'}">
                            ${index === 0 ? 
                                `${formatProgressTime(progress.date)}: ${progress.note}` :
                                `｜- ${formatProgressTime(progress.date)} ${progress.note}`
                            }
                        </div>
                    `).join('')}
                    ${task.fields.progressLog.length > 5 ? 
                        `<div class="progress-more">还有 ${task.fields.progressLog.length - 5} 条记录...</div>` : 
                        ''
                    }
                    <div class="progress-inline-actions">
                        <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); toggleQuickProgress('${task.id}')" title="记录进展">
                            📝 记录
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); viewProgressLog(event, '${task.id}')" title="查看详情">
                            📊 详情
                        </button>
                    </div>
                </div>
            `;
        }

        // 为快速进展输入添加键盘快捷键支持
        function setupQuickProgressKeyboardShortcuts() {
            document.addEventListener('keydown', function(e) {
                // 检查是否在快速进展输入框中
                if (e.target && e.target.classList.contains('progress-input')) {
                    if (e.ctrlKey && e.key === 'Enter') {
                        // Ctrl+Enter 保存
                        e.preventDefault();
                        const taskId = e.target.id.replace('progressText-', '');
                        saveQuickProgress(taskId);
                    } else if (e.key === 'Escape') {
                        // Esc 取消
                        e.preventDefault();
                        const taskId = e.target.id.replace('progressText-', '');
                        cancelQuickProgress(taskId);
                    }
                }
            });
        }

        // 切换当前焦点状态
        function toggleCurrentFocus(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                // 如果点击的是已经在焦点中的任务，切换其活跃状态
                if (task.currentFocus) {
                    task.currentFocus = false;
                } else {
                    // 先将其他任务的焦点状态取消
                    tasks.forEach(t => t.currentFocus = false);
                    task.currentFocus = true;
                }
                renderFocusTasks();
            }
        }

        // 确保只有一个任务被标记为当前焦点
        function ensureOnlyOneCurrentFocus() {
            let hasCurrentFocus = false;
            let currentFocusCount = 0;
            
            // 先统计有多少个任务被标记为当前焦点
            tasks.forEach(task => {
                if (task.currentFocus) {
                    currentFocusCount++;
                }
            });
            
            // 如果有多个，只保留第一个
            if (currentFocusCount > 1) {
                tasks.forEach(task => {
                    if (task.currentFocus) {
                        if (hasCurrentFocus) {
                            // 如果已经有一个当前焦点任务，将后续的都设为 false
                            task.currentFocus = false;
                        } else {
                            hasCurrentFocus = true;
                        }
                    }
                });
                console.log(`修复了 ${currentFocusCount - 1} 个重复的当前焦点任务标记`);
            }
        }

        // 添加到焦点任务
        function addToFocus(taskId) {
            if (focusTasks.size >= 5) {
                showNotification('焦点任务不能超过5个，请先移除其他任务', 'warning');
                return;
            }
            
            focusTasks.add(taskId);
            
            // 将新任务添加到排序数组末尾
            if (!focusTasksOrder.includes(taskId)) {
                focusTasksOrder.push(taskId);
            }
            
            renderFocusTasks();
            renderPendingTasks(); // 重新渲染待处理任务
            updateSidebarStats();
            saveToLocalStorage();
        }

        /* ========================================
           📋 待处理任务管理
           ======================================== */

        // 打开添加到待处理的模态框
        function openAddToPendingModal() {
            const modal = document.getElementById('addToPendingModal');
            modal.classList.add('active');
            
            // 重置临时选择
            tempPendingTasks = new Set();
            updateSelectedPendingCount();
            
            // 渲染候选任务列表
            filterPendingCandidates();
        }

        // 临时选择的待处理任务
        let tempPendingTasks = new Set();

        // 筛选待处理候选任务
        function filterPendingCandidates() {
            const searchText = document.getElementById('pendingTaskSearch').value.trim().toLowerCase();
            const selectedStatus = document.getElementById('pendingTaskStatus').value;
            const selectedPriority = document.getElementById('pendingTaskPriority').value;
            const selectedProject = document.getElementById('pendingTaskProject').value;
            const tagText = document.getElementById('pendingTaskTag').value.trim().toLowerCase();
            
            // 筛选候选任务（排除已完成、已在焦点、已在待处理的任务）
            const candidates = tasks.filter(task => {
                // 基本条件：未完成、不在焦点、不在待处理
                if (task.status === '已完成' || focusTasks.has(task.id) || pendingTasks.has(task.id)) {
                    return false;
                }
                
                // 强制限制：只处理动作类型的任务
                if (task.type !== '动作') {
                    return false;
                }
                
                // 搜索条件
                if (searchText && !task.title.toLowerCase().includes(searchText)) {
                    return false;
                }
                
                // 状态筛选
                if (selectedStatus && task.status !== selectedStatus) {
                    return false;
                }
                
                // 优先级筛选
                if (selectedPriority && task.fields.priority !== selectedPriority) {
                    return false;
                }
                
                // 项目筛选
                if (selectedProject && task.fields.project !== selectedProject) {
                    return false;
                }
                
                // 标签筛选
                if (tagText) {
                    const hasMatchingTag = task.fields.tags.some(tag => 
                        tag.toLowerCase().includes(tagText)
                    );
                    if (!hasMatchingTag) {
                        return false;
                    }
                }
                
                return true;
            });
            
            // 渲染候选任务列表
            const container = document.getElementById('pendingCandidatesList');
            container.innerHTML = candidates.map(task => `
                <div class="task-select-item ${tempPendingTasks.has(task.id) ? 'selected' : ''}" 
                     onclick="togglePendingSelection('${task.id}', event)">
                    <input type="checkbox" class="list-checkbox" ${tempPendingTasks.has(task.id) ? 'checked' : ''}>
                    <div class="task-select-content">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span class="task-type-badge ${task.type.toLowerCase()} text-small">
                                ${getTaskTypeIcon(task.type)} ${task.type}
                            </span>
                            <span class="text-small text-muted">${task.fields.priority}优先级</span>
                        </div>
                        <div class="mt-1 font-weight-500">${task.title}</div>
                        <div class="text-small text-muted">${task.path}</div>
                    </div>
                </div>
            `).join('') || '<p class="text-muted">没有符合条件的任务</p>';
        }

        // 切换待处理任务选择
        function togglePendingSelection(taskId, event) {
            const taskItem = event.currentTarget;
            const checkbox = taskItem.querySelector('.list-checkbox');
            
            if (tempPendingTasks.has(taskId)) {
                tempPendingTasks.delete(taskId);
                checkbox.checked = false;
                taskItem.classList.remove('selected');
            } else {
                tempPendingTasks.add(taskId);
                checkbox.checked = true;
                taskItem.classList.add('selected');
            }
            
            updateSelectedPendingCount();
        }

        // 更新选择计数
        function updateSelectedPendingCount() {
            document.getElementById('selectedPendingCount').textContent = tempPendingTasks.size;
        }

        // 确认添加到待处理
        function confirmAddToPending() {
            // 将临时选择的任务添加到待处理列表
            tempPendingTasks.forEach(taskId => {
                pendingTasks.add(taskId);
            });
            
            // 关闭模态框
            closeModal('addToPendingModal');
            
            // 重新渲染待处理任务
            renderPendingTasks();
            
            // 保存数据
            saveToLocalStorage();
            
            showNotification(`已添加 ${tempPendingTasks.size} 个任务到待处理`, 'success');
        }

        // 从待处理中移除任务
        function removeFromPending(taskId) {
            pendingTasks.delete(taskId);
            renderPendingTasks();
            saveToLocalStorage();
            showNotification('已从待处理中移除', 'info');
        }

        /* ========================================
           🔍 任务筛选管理
           ======================================== */

        // 打开任务筛选模态框
        function openTaskFilterModal() {
            const modal = document.getElementById('taskFilterModal');
            modal.classList.add('active');
            
            // 填充当前筛选值
            document.getElementById('modalFilterTitle').value = activeFilters.title || '';
            document.getElementById('modalFilterType').value = activeFilters.type || '';
            document.getElementById('modalFilterProject').value = activeFilters.project || '';
            document.getElementById('modalFilterStatus').value = activeFilters.status || '';
            document.getElementById('modalFilterPriority').value = activeFilters.priority || '';
            document.getElementById('modalFilterTag').value = activeFilters.tag || '';
        }

        // 应用模态框中的筛选
        function applyModalFilters() {
            activeFilters.title = document.getElementById('modalFilterTitle').value.trim();
            activeFilters.type = document.getElementById('modalFilterType').value;
            activeFilters.project = document.getElementById('modalFilterProject').value;
            activeFilters.status = document.getElementById('modalFilterStatus').value;
            activeFilters.priority = document.getElementById('modalFilterPriority').value;
            activeFilters.tag = document.getElementById('modalFilterTag').value.trim();
            
            // 清空空值
            Object.keys(activeFilters).forEach(key => {
                if (!activeFilters[key]) {
                    delete activeFilters[key];
                }
            });
            
            // 关闭模态框
            closeModal('taskFilterModal');
            
            // 应用筛选
            applyFilters();
            
            showNotification('筛选条件已应用', 'success');
        }

        // 清除所有筛选条件
        function clearAllFilters() {
            activeFilters = {};
            
            // 清空表单
            document.getElementById('modalFilterTitle').value = '';
            document.getElementById('modalFilterType').value = '';
            document.getElementById('modalFilterProject').value = '';
            document.getElementById('modalFilterStatus').value = '';
            document.getElementById('modalFilterPriority').value = '';
            document.getElementById('modalFilterTag').value = '';
            
            // 应用筛选
            applyFilters();
            
            showNotification('已清除所有筛选条件', 'info');
        }

        // 从焦点任务中移除
        function removeFromFocus(event, taskId) {
            event.stopPropagation();
            
            // 从焦点任务集合中移除
            focusTasks.delete(taskId);
            
            // 从排序数组中移除
            focusTasksOrder = focusTasksOrder.filter(id => id !== taskId);
            
            // 重新渲染
            renderFocusTasks();
            updateSidebarStats();
            saveToLocalStorage();
        }

        // 切换任务状态
        function toggleTaskStatus(taskId, newStatus) {
            const task = tasks.find(t => t.id === taskId);
            if (!task) return;
            
            const oldStatus = task.status;
            const currentTime = new Date().toISOString();
            
            // 状态变化逻辑
            const today = formatDateToLocal(new Date());
            
            if (oldStatus === '未开始' && newStatus === '进行中') {
                // 任务开始，记录开始时间并更新日期
                task.fields.startTime = currentTime;
                task.fields.plannedDate = today;
                task.fields.today = true;
            } else if (oldStatus === '暂停' && newStatus === '进行中') {
                // 从暂停恢复，更新日期为今天
                task.fields.plannedDate = today;
                task.fields.today = true;
                // 如果之前没有开始时间，记录新的开始时间
                if (!task.fields.startTime) {
                    task.fields.startTime = currentTime;
                }
            } else if (oldStatus === '进行中' && newStatus === '已完成') {
                // 任务完成，记录结束时间
                task.fields.endTime = currentTime;
            } else if (newStatus === '进行中' && !task.fields.startTime) {
                // 如果直接设置为进行中且没有开始时间，记录开始时间并更新日期
                task.fields.startTime = currentTime;
                task.fields.plannedDate = today;
                task.fields.today = true;
            } else if (newStatus === '已完成' && !task.fields.endTime) {
                // 如果直接设置为已完成且没有结束时间，记录结束时间
                task.fields.endTime = currentTime;
                // 如果没有开始时间，也设置开始时间（避免出现只有结束时间的情况）
                if (!task.fields.startTime) {
                    task.fields.startTime = currentTime;
                }
            }
            
            // 更新状态
            task.status = newStatus;
            
            // 记录进展
            if (!task.fields.progressLog) {
                task.fields.progressLog = [];
            }
            task.fields.progressLog.push({
                date: new Date().toLocaleString('zh-CN'),
                note: `任务状态从"${oldStatus}"变更为"${newStatus}"`
            });
            
            // 刷新视图
            switch(currentView) {
                case 'focus':
                    renderFocusTasks();
                    break;
                case 'timeline':
                    renderTodayTimeline();
                    break;
                case 'planning':
                    renderPlanningView();
                    break;
                case 'project':
                    renderProjectBoard();
                    break;
                case 'goal':
                    renderGoalBoard();
                    break;
                case 'board':
                    renderBoardView();
                    // 初始化项目下拉框
                    initializeBoardProjectFilter();
                    // 初始化统计信息
                    updateBoardStats();
                    break;
                case 'list':
                    renderListView();
                    break;
            }
            
            // 更新侧边栏（特别是时间轴视图的统计）
            updateSidebar(currentView);
            updateSidebarStats();
            saveToLocalStorage();
        }

        // 拖拽相关变量
        let draggedTaskId = null;
        let draggedElement = null;
        let currentDropTarget = null;
        let dropPosition = null;

        // 拖拽开始
        function handleDragStart(event) {
            const card = event.target.closest('.focus-task-card');
            if (!card) return;
            
            draggedTaskId = card.dataset.taskId;
            draggedElement = card;
            card.classList.add('dragging');
            
            // 给容器添加拖拽活动状态
            const container = document.querySelector('.focus-tasks-container');
            if (container) {
                container.classList.add('dragging-active');
            }
            
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', draggedTaskId);
            
            // 延迟添加拖拽样式，避免影响拖拽图像
            setTimeout(() => {
                card.style.opacity = '0.3';
            }, 0);
        }
        
        // 拖拽进入
        function handleDragEnter(event) {
            const target = event.target.closest('.focus-task-card');
            if (!target || target === draggedElement) return;
            
            currentDropTarget = target;
        }
        
        // 拖拽离开
        function handleDragLeave(event) {
            const target = event.target.closest('.focus-task-card');
            if (!target) return;
            
            // 确保真的离开了卡片（不是进入子元素）
            if (!target.contains(event.relatedTarget)) {
                target.classList.remove('drop-indicator-top', 'drop-indicator-bottom');
            }
        }

        // 拖拽经过
        function handleDragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';
            
            const target = event.target.closest('.focus-task-card');
            if (!target || target === draggedElement) return;
            
            // 清除所有指示器
            document.querySelectorAll('.focus-task-card').forEach(card => {
                if (card !== target) {
                    card.classList.remove('drop-indicator-top', 'drop-indicator-bottom');
                }
            });
            
            // 计算鼠标位置
            const rect = target.getBoundingClientRect();
            const y = event.clientY - rect.top;
            const height = rect.height;
            
            // 根据鼠标位置决定插入位置
            if (y < height / 2) {
                // 上半部分 - 在目标上方插入
                target.classList.remove('drop-indicator-bottom');
                target.classList.add('drop-indicator-top');
                dropPosition = 'before';
            } else {
                // 下半部分 - 在目标下方插入
                target.classList.remove('drop-indicator-top');
                target.classList.add('drop-indicator-bottom');
                dropPosition = 'after';
            }
        }

        // 拖拽放下
        function handleDrop(event) {
            event.preventDefault();
            event.stopPropagation();
            
            const dropTarget = event.target.closest('.focus-task-card');
            if (!dropTarget || draggedTaskId === dropTarget.dataset.taskId) {
                return false;
            }
            
            const dropTaskId = dropTarget.dataset.taskId;
            
            // 更新 focusTasksOrder 数组
            const draggedIndex = focusTasksOrder.indexOf(draggedTaskId);
            const dropIndex = focusTasksOrder.indexOf(dropTaskId);
            
            // 先移除被拖拽的元素
            if (draggedIndex !== -1) {
                focusTasksOrder.splice(draggedIndex, 1);
            }
            
            // 重新计算插入位置
            let newIndex = focusTasksOrder.indexOf(dropTaskId);
            if (dropPosition === 'after') {
                newIndex++;
            }
            
            // 插入到新位置
            focusTasksOrder.splice(newIndex, 0, draggedTaskId);
            
            // 确保数组中只包含当前焦点任务
            focusTasksOrder = focusTasksOrder.filter(id => focusTasks.has(id));
            
            // 重新渲染焦点任务
            renderFocusTasks();
            saveToLocalStorage();
            
            return false;
        }

        // 拖拽结束
        function handleDragEnd(event) {
            if (draggedElement) {
                draggedElement.classList.remove('dragging');
                draggedElement.style.opacity = '';
            }
            
            // 移除容器的拖拽活动状态
            const container = document.querySelector('.focus-tasks-container');
            if (container) {
                container.classList.remove('dragging-active');
            }
            
            // 清除所有拖拽指示器
            document.querySelectorAll('.focus-task-card').forEach(card => {
                card.classList.remove('drop-indicator-top', 'drop-indicator-bottom');
            });
            
            draggedTaskId = null;
            draggedElement = null;
            currentDropTarget = null;
            dropPosition = null;
        }

        /* ========================================
           📋 待处理任务拖拽排序功能
           ======================================== */
        
        let draggedPendingTaskId = null;
        let draggedPendingElement = null;
        let currentPendingDropTarget = null;
        let pendingDropPosition = null;
        
        // 项目看板拖拽相关变量
        let draggedProjectTaskId = null;
        let draggedProjectElement = null;

        // 待处理任务拖拽开始
        function handlePendingDragStart(event) {
            draggedPendingTaskId = event.target.dataset.taskId;
            draggedPendingElement = event.target;
            
            event.target.classList.add('dragging');
            event.target.style.opacity = '0.5';
            
            // 设置拖拽数据
            event.dataTransfer.setData('text/plain', draggedPendingTaskId);
            event.dataTransfer.effectAllowed = 'move';
        }

        // 待处理任务拖拽悬停
        function handlePendingDragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';
            
            if (event.target === draggedPendingElement) return;
            
            const taskItem = event.target.closest('.pending-task-item');
            if (!taskItem || taskItem === draggedPendingElement) return;
            
            const rect = taskItem.getBoundingClientRect();
            const midpoint = rect.top + rect.height / 2;
            const mouseY = event.clientY;
            
            // 清除之前的指示器
            document.querySelectorAll('.pending-task-item').forEach(item => {
                item.classList.remove('drop-indicator-top', 'drop-indicator-bottom');
            });
            
            // 添加新的指示器
            if (mouseY < midpoint) {
                taskItem.classList.add('drop-indicator-top');
                pendingDropPosition = 'top';
            } else {
                taskItem.classList.add('drop-indicator-bottom'); 
                pendingDropPosition = 'bottom';
            }
            
            currentPendingDropTarget = taskItem;
        }

        // 待处理任务拖拽进入
        function handlePendingDragEnter(event) {
            event.preventDefault();
        }

        // 待处理任务拖拽离开
        function handlePendingDragLeave(event) {
            // 如果离开的是当前容器，清除指示器
            if (!event.relatedTarget || !event.currentTarget.contains(event.relatedTarget)) {
                event.currentTarget.classList.remove('drop-indicator-top', 'drop-indicator-bottom');
            }
        }

        // 待处理任务拖拽放置
        function handlePendingDrop(event) {
            event.preventDefault();
            
            if (!draggedPendingTaskId || !currentPendingDropTarget) return;
            
            const targetTaskId = currentPendingDropTarget.dataset.taskId;
            if (draggedPendingTaskId === targetTaskId) return;
            
            // 更新排序
            updatePendingTaskOrder(draggedPendingTaskId, targetTaskId, pendingDropPosition);
            
            // 重新渲染
            renderPendingTasks();
            
            // 保存状态
            saveToLocalStorage();
        }

        // 待处理任务拖拽结束
        function handlePendingDragEnd(event) {
            if (draggedPendingElement) {
                draggedPendingElement.classList.remove('dragging');
                draggedPendingElement.style.opacity = '';
            }
            
            // 清除所有拖拽指示器
            document.querySelectorAll('.pending-task-item').forEach(item => {
                item.classList.remove('drop-indicator-top', 'drop-indicator-bottom');
            });
            
            draggedPendingTaskId = null;
            draggedPendingElement = null;
            currentPendingDropTarget = null;
            pendingDropPosition = null;
        }

        // 更新待处理任务排序
        function updatePendingTaskOrder(draggedId, targetId, position) {
            // 从当前排序中移除拖拽的任务
            pendingTasksOrder = pendingTasksOrder.filter(id => id !== draggedId);
            
            // 找到目标任务的位置
            const targetIndex = pendingTasksOrder.indexOf(targetId);
            
            if (targetIndex === -1) {
                // 如果目标任务不在排序中，添加到末尾
                pendingTasksOrder.push(targetId);
                pendingTasksOrder.push(draggedId);
            } else {
                // 根据放置位置插入
                const insertIndex = position === 'top' ? targetIndex : targetIndex + 1;
                pendingTasksOrder.splice(insertIndex, 0, draggedId);
            }
            
            // 确保所有待处理任务都在排序中
            const allPendingIds = Array.from(pendingTasks);
            allPendingIds.forEach(id => {
                if (!pendingTasksOrder.includes(id)) {
                    pendingTasksOrder.push(id);
                }
            });
        }

        /* ========================================
           🛠️ 工具函数
           ======================================== */
        
        // 获取任务类型图标
        function getTaskTypeIcon(type) {
            const icons = {
                '目标': '🎯',
                '关键结果': '🔑',
                '项目': '📁',
                '动作': '⚡'
            };
            return icons[type] || '📌';
        }

        // 获取状态图标
        function getStatusIcon(status) {
            const icons = {
                '未开始': '⏸',
                '暂停': '⏯',
                '进行中': '🚀',
                '已完成': '✅'
            };
            return icons[status] || '❓';
        }

        // 获取优先级图标
        function getPriorityIcon(priority) {
            const icons = {
                '高': '🔴',
                '中': '🟡',
                '低': '🟢'
            };
            return icons[priority] || '⚪';
        }

        // 获取状态样式类
        function getStatusClass(status) {
            const classes = {
                '未开始': 'text-muted',
                '暂停': 'text-info',
                '进行中': 'text-warning',
                '已完成': 'text-success'
            };
            return classes[status] || '';
        }

        // 格式化日期
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const today = new Date();
            const diffDays = Math.floor((date - today) / (1000 * 60 * 60 * 24));
            
            if (diffDays === 0) return '今天';
            if (diffDays === 1) return '明天';
            if (diffDays === -1) return '昨天';
            if (diffDays > 0 && diffDays <= 7) return `${diffDays}天后`;
            if (diffDays < 0) return `逾期${-diffDays}天`;
            
            return date.toLocaleDateString('zh-CN');
        }
        
        // 格式化经过时间
        function formatElapsedTime(startTime, endTime) {
            if (!startTime) return '';
            
            const start = new Date(startTime);
            const end = endTime ? new Date(endTime) : new Date();
            const diff = Math.floor((end - start) / 1000); // 秒数
            
            if (diff < 60) return `${diff}秒`;
            if (diff < 3600) return `${Math.floor(diff / 60)}分钟`;
            if (diff < 86400) {
                const hours = Math.floor(diff / 3600);
                const minutes = Math.floor((diff % 3600) / 60);
                return minutes > 0 ? `${hours}小时${minutes}分钟` : `${hours}小时`;
            }
            
            const days = Math.floor(diff / 86400);
            const hours = Math.floor((diff % 86400) / 3600);
            return hours > 0 ? `${days}天${hours}小时` : `${days}天`;
        }
        
        // 格式化进展时间
        function formatProgressTime(dateStr) {
            if (!dateStr) return '';
            
            const date = new Date(dateStr);
            const now = new Date();
            const diff = Math.floor((now - date) / 1000); // 秒数
            
            // 小于1分钟
            if (diff < 60) return '刚刚';
            
            // 小于1小时
            if (diff < 3600) return `${Math.floor(diff / 60)}分钟前`;
            
            // 小于24小时
            if (diff < 86400) {
                const hours = Math.floor(diff / 3600);
                return `${hours}小时前`;
            }
            
            // 小于7天
            if (diff < 604800) {
                const days = Math.floor(diff / 86400);
                if (days === 1) return '昨天 ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
                if (days === 2) return '前天 ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
                return `${days}天前`;
            }
            
            // 超过7天，显示具体日期
            return date.toLocaleDateString('zh-CN', { 
                month: 'numeric', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // 切换视图
        function switchView(viewName) {
            // 更新按钮状态
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.view === viewName);
            });
            
            // 隐藏所有视图
            document.querySelectorAll('.view-container').forEach(view => {
                view.classList.add('hidden');
            });
            
            // 显示目标视图
            const targetView = document.getElementById(`view-${viewName}`);
            if (targetView) {
                targetView.classList.remove('hidden');
            }
            
            currentView = viewName;
            
            // 更新侧边栏内容
            updateSidebar(viewName);
            
            // 根据视图类型渲染内容
            switch(viewName) {
                case 'focus':
                    renderFocusTasks();
                    renderPendingTasks();
                    break;
                case 'today':
                    // 重置为今天的日期
                    const now2 = new Date();
                    selectedTimelineDate = new Date(now2.getFullYear(), now2.getMonth(), now2.getDate());
                    // 初始化日期选择器
                    const datePicker = document.getElementById('timelineDatePicker');
                    if (datePicker) {
                        datePicker.value = formatDateToLocal(selectedTimelineDate);
                    }
                    renderTodayTimeline();
                    break;
                case 'project':
                    renderProjectBoard();
                    break;
                case 'goal':
                    renderGoalBoard();
                    break;
                case 'board':
                    renderBoardView();
                    // 初始化项目下拉框
                    initializeBoardProjectFilter();
                    // 初始化统计信息
                    updateBoardStats();
                    break;
                case 'list':
                    renderListView();
                    break;
                case 'planning':
                    renderPlanningView();
                    break;
            }
        }

        // 快速添加任务
        function handleQuickAdd(event) {
            if (event.key !== 'Enter') return;
            
            // 如果自动完成正在显示且有选中项，让 handleAutocompleteNavigation 处理
            if (autocompleteActive && autocompleteSelectedIndex >= 0) {
                return;
            }
            
            const input = event.target;
            const text = input.value.trim();
            if (!text) return;
            
            // 解析输入文本
            let title = text;
            let tags = [];
            let priority = '中';
            let project = '';
            
            // 提取标签 #tag
            const tagMatches = text.match(/#(\S+)/g);
            if (tagMatches) {
                tags = tagMatches.map(tag => tag.substring(1));
                title = title.replace(/#\S+/g, '').trim();
            }
            
            // 提取项目 @project
            const projectMatch = text.match(/@(\S+)/);
            if (projectMatch) {
                project = projectMatch[1];
                title = title.replace(/@\S+/g, '').trim();
            }
            
            // 提取优先级 !high !medium !low
            const priorityMatch = text.match(/!(\S+)/);
            if (priorityMatch) {
                const p = priorityMatch[1].toLowerCase();
                if (p === 'high' || p === '高') priority = '高';
                else if (p === 'low' || p === '低') priority = '低';
                title = title.replace(/!\S+/g, '').trim();
            }
            
            // 创建新任务
            const newTask = {
                id: `task_${Date.now()}`,
                type: "动作",
                status: "未开始",
                title: title,
                path: project || "快速添加",
                launchLink: "",
                currentFocus: false,
                todayPlannedTime: "",
                fields: {
                    priority: priority,
                    dueDate: "",
                    tags: tags,
                    today: true, // 快速添加的任务默认为今日任务
                    plannedDate: formatDateToLocal(new Date()), // 默认为今天的日期
                    progressLog: [],
                    customViews: [],
                    project: project,
                    startTime: null, // 任务开始时间
                    endTime: null    // 任务结束时间
                }
            };
            
            tasks.unshift(newTask);
            input.value = '';
            
            // 刷新当前视图
            switch(currentView) {
                case 'focus':
                    renderFocusTasks();
                    break;
                case 'today':
                    renderTodayTimeline();
                    break;
            }
            
            // 显示成功提示
            console.log(`✅ 任务已添加: ${title}`);
        }

        /* ========================================
           🎹 自动完成功能
           ======================================== */
        
        // 处理输入框的实时输入
        function handleQuickAddInput(event) {
            const input = event.target;
            const value = input.value;
            const cursorPosition = input.selectionStart;
            
            // 检查光标前的文本，查找 @ 符号
            const textBeforeCursor = value.substring(0, cursorPosition);
            const atSignIndex = textBeforeCursor.lastIndexOf('@');
            
            if (atSignIndex !== -1) {
                // 获取 @ 后面的文本（不包括空格）
                const textAfterAt = textBeforeCursor.substring(atSignIndex + 1);
                
                // 如果 @ 后面没有空格，说明正在输入项目名
                if (!textAfterAt.includes(' ')) {
                    showProjectAutocomplete(textAfterAt, atSignIndex);
                    return;
                }
            }
            
            // 如果没有检测到 @ 或已经完成输入，隐藏自动完成
            hideAutocomplete();
        }
        
        // 显示项目自动完成下拉菜单
        function showProjectAutocomplete(searchText, atPosition) {
            const dropdown = document.getElementById('projectAutocomplete');
            const input = document.getElementById('quickAddInput');
            
            // 获取所有项目（包括动态的）
            const allProjects = getAllProjects();
            
            // 过滤项目列表
            currentAutocompleteList = allProjects.filter(project => 
                project.id.toLowerCase().includes(searchText.toLowerCase()) ||
                project.name.toLowerCase().includes(searchText.toLowerCase())
            );
            
            if (currentAutocompleteList.length === 0) {
                hideAutocomplete();
                return;
            }
            
            // 生成下拉菜单内容
            dropdown.innerHTML = currentAutocompleteList.map((project, index) => `
                <div class="autocomplete-item ${index === autocompleteSelectedIndex ? 'selected' : ''}" 
                     data-index="${index}"
                     onmouseover="selectAutocompleteItem(${index})"
                     onclick="insertProject('${project.id}', ${atPosition})">
                    <span class="autocomplete-item-icon">${project.icon}</span>
                    <span class="autocomplete-item-name">${project.name}</span>
                    <span class="autocomplete-item-id">@${project.id}</span>
                </div>
            `).join('');
            
            // 显示下拉菜单
            dropdown.classList.add('active');
            autocompleteActive = true;
            autocompleteSelectedIndex = 0;
            
            // 高亮第一项
            updateAutocompleteSelection();
        }
        
        // 隐藏自动完成下拉菜单
        function hideAutocomplete() {
            const dropdown = document.getElementById('projectAutocomplete');
            dropdown.classList.remove('active');
            autocompleteActive = false;
            autocompleteSelectedIndex = -1;
            currentAutocompleteList = [];
        }
        
        // 处理自动完成的键盘导航
        function handleAutocompleteNavigation(event) {
            if (!autocompleteActive) return;
            
            switch(event.key) {
                case 'ArrowDown':
                    event.preventDefault();
                    autocompleteSelectedIndex = (autocompleteSelectedIndex + 1) % currentAutocompleteList.length;
                    updateAutocompleteSelection();
                    break;
                    
                case 'ArrowUp':
                    event.preventDefault();
                    autocompleteSelectedIndex = autocompleteSelectedIndex <= 0 
                        ? currentAutocompleteList.length - 1 
                        : autocompleteSelectedIndex - 1;
                    updateAutocompleteSelection();
                    break;
                    
                case 'Enter':
                    if (autocompleteSelectedIndex >= 0) {
                        event.preventDefault();
                        const input = document.getElementById('quickAddInput');
                        const cursorPosition = input.selectionStart;
                        const textBeforeCursor = input.value.substring(0, cursorPosition);
                        const atSignIndex = textBeforeCursor.lastIndexOf('@');
                        
                        if (atSignIndex !== -1) {
                            const selectedProject = currentAutocompleteList[autocompleteSelectedIndex];
                            insertProject(selectedProject.id, atSignIndex);
                        }
                    }
                    break;
                    
                case 'Escape':
                    event.preventDefault();
                    hideAutocomplete();
                    break;
                    
                case ' ':
                    // 空格键会结束自动完成
                    hideAutocomplete();
                    break;
            }
        }
        
        // 更新自动完成选中项的高亮
        function updateAutocompleteSelection() {
            const items = document.querySelectorAll('.autocomplete-item');
            items.forEach((item, index) => {
                item.classList.toggle('selected', index === autocompleteSelectedIndex);
            });
        }
        
        // 选择自动完成项（鼠标悬停）
        function selectAutocompleteItem(index) {
            autocompleteSelectedIndex = index;
            updateAutocompleteSelection();
        }
        
        // 插入选中的项目
        function insertProject(projectId, atPosition) {
            const input = document.getElementById('quickAddInput');
            const value = input.value;
            const cursorPosition = input.selectionStart;
            
            // 计算要替换的范围
            const beforeAt = value.substring(0, atPosition);
            const afterCursor = value.substring(cursorPosition);
            
            // 构建新的输入值
            const newValue = beforeAt + '@' + projectId + ' ' + afterCursor;
            input.value = newValue;
            
            // 设置光标位置到项目ID后面
            const newCursorPosition = atPosition + projectId.length + 2; // +2 for @ and space
            input.setSelectionRange(newCursorPosition, newCursorPosition);
            
            // 隐藏自动完成
            hideAutocomplete();
            
            // 聚焦输入框
            input.focus();
        }
        
        // 动态获取所有项目（包括预定义和从任务中提取的）
        function getAllProjects() {
            // 从任务中提取所有使用过的项目
            const usedProjects = new Set();
            tasks.forEach(task => {
                if (task.fields.project && task.fields.project.trim()) {
                    usedProjects.add(task.fields.project);
                }
            });
            
            // 合并预定义项目和使用过的项目
            const allProjectIds = new Set([...projectList.map(p => p.id), ...usedProjects]);
            
            // 构建完整的项目列表
            const completeProjectList = [];
            allProjectIds.forEach(projectId => {
                const predefinedProject = projectList.find(p => p.id === projectId);
                if (predefinedProject) {
                    completeProjectList.push(predefinedProject);
                } else {
                    // 为新项目创建默认图标和名称
                    completeProjectList.push({
                        id: projectId,
                        name: projectId.charAt(0).toUpperCase() + projectId.slice(1),
                        icon: '📋'
                    });
                }
            });
            
            return completeProjectList;
        }
        
        /* ========================================
           🔧 缺失函数实现
           ======================================== */
        
        // 选择焦点任务
        function selectFocusTasks() {
            const modal = document.getElementById('selectFocusModal');
            const listContainer = document.getElementById('taskSelectList');
            
            // 创建 focusTasks 的临时副本
            tempFocusTasks = new Set(focusTasks);
            
            // 渲染任务列表 - 显示待处理列表中的任务
            let nonCompletedTasks = tasks.filter(task => 
                pendingTasks.has(task.id) && 
                task.status !== '已完成' && 
                task.type === '动作'
            );
            
            // 按照 pendingTasksOrder 排序
            if (pendingTasksOrder.length > 0) {
                nonCompletedTasks.sort((a, b) => {
                    const indexA = pendingTasksOrder.indexOf(a.id);
                    const indexB = pendingTasksOrder.indexOf(b.id);
                    if (indexA === -1) return 1;
                    if (indexB === -1) return -1;
                    return indexA - indexB;
                });
            }
            
            if (nonCompletedTasks.length === 0) {
                listContainer.innerHTML = `
                    <div class="text-center text-muted" style="padding: 40px;">
                        <div style="font-size: 48px; opacity: 0.3;">📋</div>
                        <p class="mt-2">暂无待处理任务可选择</p>
                        <p class="text-small">请先将任务添加到待处理列表</p>
                    </div>
                `;
            } else {
                listContainer.innerHTML = nonCompletedTasks.map(task => `
                    <div class="task-select-item ${tempFocusTasks.has(task.id) ? 'selected' : ''}" 
                         onclick="toggleTaskSelection('${task.id}', event)">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <span class="task-type-badge ${task.type.toLowerCase()} text-small">
                                    ${getTaskTypeIcon(task.type)} ${task.type}
                                </span>
                                <span class="text-small text-muted ml-2">${task.fields.priority}优先级</span>
                            </div>
                            <input type="checkbox" class="list-checkbox" 
                                   ${tempFocusTasks.has(task.id) ? 'checked' : ''} 
                                   onchange="event.stopPropagation()"
                                   style="pointer-events: none;">
                        </div>
                        <div class="mt-1 font-weight-500">${task.title}</div>
                        <div class="text-small text-muted">${task.path}</div>
                    </div>
                `).join('');
            }
            
            modal.classList.add('active');
        }
        
        // 切换任务选择
        function toggleTaskSelection(taskId, event) {
            // 从事件目标或其父元素获取任务项元素
            const taskItem = event.currentTarget.classList.contains('task-select-item') 
                ? event.currentTarget 
                : event.currentTarget.closest('.task-select-item');
            
            const checkbox = taskItem.querySelector('.list-checkbox');
            
            if (tempFocusTasks.has(taskId)) {
                tempFocusTasks.delete(taskId);
                checkbox.checked = false;
                taskItem.classList.remove('selected');
            } else {
                if (tempFocusTasks.size >= 5) {
                    showNotification('焦点任务不能超过5个', 'warning');
                    return;
                }
                tempFocusTasks.add(taskId);
                checkbox.checked = true;
                taskItem.classList.add('selected');
            }
            // 注意：这里不更新侧边栏统计，因为还没有确认
        }
        
        // 确认焦点选择
        function confirmFocusSelection() {
            // 将临时选择同步到全局状态
            focusTasks = new Set(tempFocusTasks);
            
            // 将新添加的任务添加到排序数组末尾
            tempFocusTasks.forEach(taskId => {
                if (!focusTasksOrder.includes(taskId)) {
                    focusTasksOrder.push(taskId);
                }
            });
            
            // 移除不再是焦点任务的ID
            focusTasksOrder = focusTasksOrder.filter(id => focusTasks.has(id));
            
            closeModal('selectFocusModal');
            renderFocusTasks();
            updateSidebarStats();
            saveToLocalStorage();
        }
        
        // 关闭模态框
        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }
        
        // 初始化modal点击空白处关闭功能
        function initModalCloseOnClickOutside() {
            // 获取所有modal元素
            const modals = document.querySelectorAll('.modal');
            
            modals.forEach(modal => {
                modal.addEventListener('click', function(e) {
                    // 如果点击的是modal背景（不是modal-content内部）
                    if (e.target === this) {
                        this.classList.remove('active');
                    }
                });
            });
            
            // 添加ESC键关闭功能
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    const activeModal = document.querySelector('.modal.active');
                    if (activeModal) {
                        activeModal.classList.remove('active');
                    }
                }
            });
        }
        
        // 按标题筛选
        function filterTasks() {
            const keyword = event.target.value.trim().toLowerCase();
            activeFilters.title = keyword;
            applyFilters();
        }
        
        // 按标签筛选
        function filterByTags() {
            const tagKeyword = event.target.value.trim().toLowerCase();
            activeFilters.tag = tagKeyword;
            applyFilters();
        }
        
        // 按选择的项目筛选
        function filterBySelectedProject() {
            const project = event.target.value;
            activeFilters.project = project;
            applyFilters();
        }
        
        // 按项目筛选（侧边栏）
        function filterByProject(project) {
            activeFilters.project = project;
            // 不强制切换视图，在当前视图中应用筛选
            applyFilters();
        }
        
        // 计算项目进度
        function getProjectProgress(projectTasks) {
            if (projectTasks.length === 0) return 0;
            const completedCount = projectTasks.filter(t => t.status === '已完成').length;
            return Math.round((completedCount / projectTasks.length) * 100);
        }
        
        // 看板视图项目筛选
        function filterByBoardProject(project) {
            activeFilters.project = project;
            applyFilters();
            renderBoardSidebar(); // 更新侧边栏显示
            showNotification(`已筛选项目: ${project}`, 'info');
        }
        
        // 清除项目筛选
        function clearProjectFilter() {
            activeFilters.project = null;
            applyFilters();
            renderBoardSidebar(); // 更新侧边栏显示
            showNotification('已清除项目筛选', 'success');
        }
        
        // 显示所有任务
        function showAllTasks() {
            // 清除所有筛选条件
            activeFilters = {
                title: null,
                tag: null,
                project: null,
                status: null,
                priority: null,
                type: null
            };
            applyFilters();
            renderBoardSidebar();
            showNotification('已显示所有任务', 'success');
        }
        
        // 导出看板数据
        function exportBoardData() {
            const exportData = {
                exportDate: new Date().toISOString(),
                tasks: tasks,
                statistics: {
                    total: tasks.length,
                    byType: {
                        goals: tasks.filter(t => t.type === '目标').length,
                        keyResults: tasks.filter(t => t.type === '关键结果').length,
                        projects: tasks.filter(t => t.type === '项目').length,
                        actions: tasks.filter(t => t.type === '动作').length
                    },
                    byStatus: {
                        notStarted: tasks.filter(t => t.status === '未开始').length,
                        inProgress: tasks.filter(t => t.status === '进行中').length,
                        completed: tasks.filter(t => t.status === '已完成').length
                    }
                }
            };
            
            const dataStr = JSON.stringify(exportData, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = `mntask-board-export-${new Date().toISOString().split('T')[0]}.json`;
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            showNotification('看板数据已导出', 'success');
        }
        
        // 检查是否有活跃的筛选条件
        function hasActiveFilters() {
            return activeFilters.title || activeFilters.tag || activeFilters.project || 
                   activeFilters.status || activeFilters.priority || activeFilters.type;
        }
        
        // 应用筛选
        function applyFilters() {
            // 更新全局 filteredTasks
            filteredTasks = tasks.filter(task => {
                // 特殊规则：在焦点视图中默认隐藏所有已完成的任务
                // 如果没有显式设置状态筛选，且在焦点视图中，隐藏所有已完成任务
                if (!activeFilters.status && currentView === 'focus' && task.status === '已完成') {
                    return false;
                }
                
                // 标题筛选
                if (activeFilters.title && !task.title.toLowerCase().includes(activeFilters.title)) {
                    return false;
                }
                
                // 标签筛选
                if (activeFilters.tag) {
                    const hasTag = task.fields.tags.some(tag => 
                        tag.toLowerCase().includes(activeFilters.tag)
                    );
                    if (!hasTag) return false;
                }
                
                // 项目筛选
                if (activeFilters.project && task.fields.project !== activeFilters.project) {
                    return false;
                }
                
                // 状态筛选
                if (activeFilters.status && task.status !== activeFilters.status) {
                    return false;
                }
                
                // 优先级筛选
                if (activeFilters.priority && task.fields.priority !== activeFilters.priority) {
                    return false;
                }
                
                return true;
            });
            
            // 根据当前视图渲染
            switch(currentView) {
                case 'focus':
                    renderFocusTasks();
                    renderPendingTasks(); // 重新渲染待处理任务
                    break;
                case 'today':
                    renderTodayTimeline();
                    break;
                case 'board':
                    // 根据当前看板模式重新渲染
                    switch(currentBoardMode) {
                        case 'kanban':
                            renderBoardKanban();
                            break;
                        case 'list':
                            renderBoardList();
                            break;
                        case 'tree':
                            renderBoardTree();
                            break;
                        case 'gantt':
                            renderBoardGantt();
                            break;
                    }
                    break;
            }
            
            // 更新筛选标签显示
            updateFilterTags();
        }
        
        // 更新筛选标签显示
        function updateFilterTags() {
            const container = document.getElementById('activeFilters');
            const tags = [];
            
            // 如果没有显式设置状态筛选，显示默认规则
            if (!activeFilters.status && currentView === 'focus') {
                tags.push(`默认: 隐藏已完成任务`);
            }
            
            if (activeFilters.title) {
                tags.push(`标题: ${activeFilters.title}`);
            }
            if (activeFilters.tag) {
                tags.push(`标签: ${activeFilters.tag}`);
            }
            if (activeFilters.project) {
                tags.push(`项目: ${activeFilters.project}`);
            }
            if (activeFilters.status) {
                tags.push(`状态: ${activeFilters.status}`);
            }
            if (activeFilters.priority) {
                tags.push(`优先级: ${activeFilters.priority}`);
            }
            
            container.innerHTML = tags.map(tag => {
                const isDefaultRule = tag.startsWith('默认:');
                return `
                    <span class="filter-tag ${isDefaultRule ? '' : 'active'}" ${isDefaultRule ? 'style="background: var(--bg-hover); border: 1px solid var(--glass-border); color: var(--text-muted);"' : ''}>
                        ${tag}
                        ${!isDefaultRule ? `<span style="margin-left: 8px; cursor: pointer;" onclick="clearFilter('${tag.split(':')[0].trim()}')">✕</span>` : ''}
                    </span>
                `;
            }).join('');
        }
        
        // 清除单个筛选条件
        function clearFilter(filterType) {
            const filterMap = {
                '标题': 'title',
                '标签': 'tag',
                '项目': 'project',
                '状态': 'status',
                '优先级': 'priority'
            };
            
            delete activeFilters[filterMap[filterType]];
            applyFilters();
        }
        
        // 查看任务详情
        // 获取与指定任务时间冲突的任务列表
        function getConflictingTasks(task) {
            if (!task.todayPlannedTime || !task.fields.today) return [];
            
            return tasks.filter(t => 
                t.fields.today && 
                t.todayPlannedTime && 
                t.id !== task.id &&
                timeRangesOverlap(task.todayPlannedTime, t.todayPlannedTime)
            );
        }
        
        function viewTaskDetail(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (!task) return;
            
            // 保存当前查看的任务ID
            window.currentDetailTaskId = taskId;
            
            // 填充详情
            // 对于可编辑字段，保持onclick处理
            const titleEl = document.getElementById('detailTitle');
            titleEl.textContent = task.title;
            titleEl.onclick = function() { editTaskField('title', this); };
            
            document.getElementById('detailPath').textContent = task.path || '无';
            document.getElementById('detailType').innerHTML = `${getTaskTypeIcon(task.type)} ${task.type}`;
            document.getElementById('detailStatus').innerHTML = `${getStatusIcon(task.status)} ${task.status}`;
            
            const priorityEl = document.getElementById('detailPriority');
            priorityEl.innerHTML = `${getPriorityIcon(task.fields.priority)} ${task.fields.priority}`;
            priorityEl.onclick = function() { editTaskField('priority', this); };
            document.getElementById('detailDueDate').textContent = task.fields.dueDate ? formatDate(task.fields.dueDate) : '未设置';
            
            // 时间安排（包含并发冲突提示）
            const conflictingTasks = getConflictingTasks(task);
            let timeDisplay = task.todayPlannedTime || '未安排';
            if (conflictingTasks.length > 0) {
                timeDisplay += ` <span class="concurrent-indicator">🔀 时间冲突</span>`;
                
                // 添加冲突任务列表
                const conflictList = conflictingTasks.map(t => `
                    <div class="conflict-task-item">
                        <span class="task-type-badge ${t.type.toLowerCase()} text-small">
                            ${getTaskTypeIcon(t.type)} ${t.type}
                        </span>
                        <span class="text-small">${t.title}</span>
                        <span class="text-small text-muted">${t.todayPlannedTime}</span>
                    </div>
                `).join('');
                
                timeDisplay += `<div class="conflict-tasks-list mt-2">${conflictList}</div>`;
            }
            document.getElementById('detailTodayTime').innerHTML = timeDisplay;
            
            const launchLinkEl = document.getElementById('detailLaunchLink');
            launchLinkEl.textContent = task.launchLink || '未设置';
            launchLinkEl.onclick = function() { editTaskField('launchLink', this); };
            document.getElementById('detailStartTime').textContent = task.fields.startTime ? new Date(task.fields.startTime).toLocaleString('zh-CN') : '未开始';
            document.getElementById('detailEndTime').textContent = task.fields.endTime ? new Date(task.fields.endTime).toLocaleString('zh-CN') : '未结束';
            
            // 标签
            const tagsContainer = document.getElementById('detailTags');
            tagsContainer.innerHTML = task.fields.tags.map(tag => `
                <span class="task-detail-tag">${tag}</span>
            `).join('') || '<span class="text-muted">无标签</span>';
            tagsContainer.onclick = function() { editTaskField('tags', this); };
            
            // 生成状态切换按钮
            const statusButtons = document.getElementById('taskStatusButtons');
            const statuses = ['未开始', '进行中', '暂停', '已完成'];
            statusButtons.innerHTML = statuses
                .filter(status => status !== task.status) // 排除当前状态
                .map(status => `
                    <button class="btn btn-primary" onclick="toggleTaskStatusFromDetail('${status}')">
                        ${getStatusIcon(status)} 设为${status}
                    </button>
                `).join('');
            
            // 显示模态框
            document.getElementById('taskDetailModal').classList.add('active');
        }
        
        // 从详情模态框切换任务状态
        function toggleTaskStatusFromDetail(newStatus) {
            if (window.currentDetailTaskId) {
                toggleTaskStatus(window.currentDetailTaskId, newStatus);
                // 关闭模态框
                closeModal('taskDetailModal');
                // 清空当前任务ID
                window.currentDetailTaskId = null;
            }
        }

        // 处理看板任务卡片点击
        function handleBoardTaskClick(event, taskId) {
            if (expandedTasksBoard.has(taskId)) {
                // 已展开，打开详情
                viewTaskDetail(taskId);
            } else {
                // 未展开，展开卡片
                expandedTasksBoard.add(taskId);
                renderKanbanBoard();
            }
        }

        /* ========================================
           ✏️ 任务字段编辑功能
           ======================================== */

        // 编辑任务字段
        function editTaskField(fieldType, element) {
            // 防止重复编辑
            if (element.classList.contains('field-editing')) {
                return;
            }

            const taskId = window.currentDetailTaskId;
            if (!taskId) return;

            const task = tasks.find(t => t.id === taskId);
            if (!task) return;

            element.classList.add('field-editing');
            const originalContent = element.innerHTML;
            let originalValue;

            switch (fieldType) {
                case 'title':
                    originalValue = task.title;
                    element.innerHTML = `<input type="text" class="field-input" value="${escapeHtml(originalValue)}" onblur="saveTaskField('${fieldType}', this, '${taskId}')" onkeydown="handleFieldKeydown(event, '${fieldType}', this, '${taskId}')">`;
                    break;
                
                case 'priority':
                    originalValue = task.fields.priority;
                    element.innerHTML = `
                        <select class="priority-select" onblur="saveTaskField('${fieldType}', this, '${taskId}')" onkeydown="handleFieldKeydown(event, '${fieldType}', this, '${taskId}')">
                            <option value="高" ${originalValue === '高' ? 'selected' : ''}>🔴 高</option>
                            <option value="中" ${originalValue === '中' ? 'selected' : ''}>🟡 中</option>
                            <option value="低" ${originalValue === '低' ? 'selected' : ''}>🟢 低</option>
                        </select>
                    `;
                    break;
                
                case 'tags':
                    originalValue = task.fields.tags.join(', ');
                    element.innerHTML = `<textarea class="tags-editor" placeholder="输入标签，用逗号分隔" onblur="saveTaskField('${fieldType}', this, '${taskId}')" onkeydown="handleFieldKeydown(event, '${fieldType}', this, '${taskId}')">${escapeHtml(originalValue)}</textarea>`;
                    break;
                
                case 'launchLink':
                    originalValue = task.launchLink || '';
                    element.innerHTML = `<input type="text" class="field-input" value="${escapeHtml(originalValue)}" placeholder="输入MarginNote链接" onblur="saveTaskField('${fieldType}', this, '${taskId}')" onkeydown="handleFieldKeydown(event, '${fieldType}', this, '${taskId}')">`;
                    break;
            }

            // 聚焦到输入框
            const input = element.querySelector('input, select, textarea');
            if (input) {
                input.focus();
                if (input.type === 'text' || input.tagName === 'TEXTAREA') {
                    input.select();
                }
            }

            // 保存原始内容用于取消编辑
            element._originalContent = originalContent;
            element._originalValue = originalValue;
        }

        // 处理字段编辑的键盘事件
        function handleFieldKeydown(event, fieldType, input, taskId) {
            if (event.key === 'Enter' && fieldType !== 'tags') {
                event.preventDefault();
                saveTaskField(fieldType, input, taskId);
            } else if (event.key === 'Escape') {
                event.preventDefault();
                cancelFieldEdit(fieldType, input, taskId);
            }
        }

        // 保存任务字段
        function saveTaskField(fieldType, input, taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (!task) return;

            const element = input.closest('.editable-field');
            const newValue = input.value.trim();

            switch (fieldType) {
                case 'title':
                    if (newValue && newValue !== task.title) {
                        task.title = newValue;
                        element.textContent = newValue;
                        showNotification('标题已更新', 'success');
                    } else {
                        element.innerHTML = element._originalContent;
                    }
                    break;
                
                case 'priority':
                    if (newValue !== task.fields.priority) {
                        task.fields.priority = newValue;
                        element.innerHTML = `${getPriorityIcon(newValue)} ${newValue}`;
                        showNotification('优先级已更新', 'success');
                    } else {
                        element.innerHTML = element._originalContent;
                    }
                    break;
                
                case 'tags':
                    const newTags = newValue ? newValue.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
                    task.fields.tags = newTags;
                    element.innerHTML = newTags.length > 0 ? 
                        newTags.map(tag => `<span class="task-detail-tag">${tag}</span>`).join('') : 
                        '<span class="text-muted">无标签</span>';
                    showNotification('标签已更新', 'success');
                    break;
                
                case 'launchLink':
                    if (newValue !== task.launchLink) {
                        task.launchLink = newValue;
                        element.textContent = newValue || '未设置';
                        showNotification('启动链接已更新', 'success');
                    } else {
                        element.innerHTML = element._originalContent;
                    }
                    break;
            }

            element.classList.remove('field-editing');
            
            // 保存到本地存储
            saveToLocalStorage();
            
            // 刷新相关视图
            refreshAllViews();
        }

        // 取消字段编辑
        function cancelFieldEdit(fieldType, input, taskId) {
            const element = input.closest('.editable-field');
            element.innerHTML = element._originalContent;
            element.classList.remove('field-editing');
        }

        // 刷新所有视图
        function refreshAllViews() {
            if (currentView === 'focus') {
                renderFocusTasks();
                renderPendingTasks();
            } else if (currentView === 'timeline') {
                renderTodayTimeline();
            } else if (currentView === 'planning') {
                renderPlanningView();
            }
        }
        
        /* ========================================
           📦 项目看板
           ======================================== */
        
        function renderProjectBoard() {
            const container = document.getElementById('projectBoardContainer');
            const projectTasks = tasks.filter(task => task.type === '项目');
            
            // 构建项目层级结构
            const rootProjects = projectTasks.filter(p => !p.parent);
            const subProjects = projectTasks.filter(p => p.parent);
            
            // 创建项目卡片的渲染函数
            function renderProjectCard(project, isSubProject = false) {
                const childProjects = subProjects.filter(sub => sub.parent === project.id);
                
                return `
                    <div class="board-card ${isSubProject ? 'sub-project' : ''}" 
                         draggable="true"
                         data-task-id="${project.id}"
                         data-task-status="${project.status}"
                         ondragstart="handleProjectDragStart(event)"
                         ondragend="handleProjectDragEnd(event)"
                         onclick="viewTaskDetail('${project.id}')">
                        ${isSubProject ? '<div class="sub-project-indicator"></div>' : ''}
                        <div class="board-card-header">
                            <span class="priority-badge ${project.fields.priority.toLowerCase()}">
                                ${getPriorityIcon(project.fields.priority)}
                            </span>
                            <span class="text-small text-muted">${project.fields.project || '未分类'}</span>
                        </div>
                        <h4 class="board-card-title">${project.title}</h4>
                        <div class="board-card-meta">
                            ${project.fields.dueDate ? `<span>📅 ${formatDate(project.fields.dueDate)}</span>` : ''}
                            ${project.fields.progress ? `<span>📊 ${project.fields.progress}%</span>` : ''}
                            ${childProjects.length > 0 ? `<span>📁 ${childProjects.length} 子项目</span>` : ''}
                        </div>
                        <div class="board-card-footer">
                            <div class="board-card-actions">
                                ${project.status === '未开始' ? `
                                    <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); toggleTaskStatus('${project.id}', '进行中')">
                                        🚀 开始
                                    </button>
                                ` : project.status === '进行中' ? `
                                    <button class="btn btn-sm btn-success" onclick="event.stopPropagation(); toggleTaskStatus('${project.id}', '已完成')">
                                        ✅ 完成
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                    ${childProjects.filter(sub => sub.status === project.status).map(sub => 
                        renderProjectCard(sub, true)
                    ).join('')}
                `;
            }
            
            // 按状态分组，只包含根项目
            const statusGroups = {
                '未开始': rootProjects.filter(t => t.status === '未开始'),
                '进行中': rootProjects.filter(t => t.status === '进行中'),
                '已完成': rootProjects.filter(t => t.status === '已完成')
            };
            
            // 计算每个状态的总项目数（包括子项目）
            const totalCounts = {
                '未开始': projectTasks.filter(t => t.status === '未开始').length,
                '进行中': projectTasks.filter(t => t.status === '进行中').length,
                '已完成': projectTasks.filter(t => t.status === '已完成').length
            };
            
            container.innerHTML = `
                <div class="board-columns">
                    ${Object.entries(statusGroups).map(([status, rootTasks]) => `
                        <div class="board-column">
                            <div class="board-column-header">
                                <h3>${getStatusIcon(status)} ${status}</h3>
                                <span class="count-badge">${totalCounts[status]}</span>
                            </div>
                            <div class="board-column-content"
                                 data-status="${status}"
                                 ondragover="handleProjectDragOver(event)"
                                 ondragleave="handleProjectDragLeave(event)"
                                 ondrop="handleProjectDrop(event)">
                                ${rootTasks.map(task => renderProjectCard(task)).join('') || '<p class="text-muted">暂无项目</p>'}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        // 当前看板视图模式
        let currentBoardMode = 'kanban';
        
        // 看板筛选相关变量
        let boardFilters = {
            search: '',
            project: '',
            status: '',
            priority: '',
            type: ''
        };
        
        // 处理看板搜索
        function handleBoardSearch(event) {
            boardFilters.search = event.target.value.trim().toLowerCase();
            applyBoardFilters();
        }
        
        // 处理看板项目筛选
        function handleBoardProjectFilter() {
            boardFilters.project = document.getElementById('boardProjectFilter').value;
            applyBoardFilters();
        }
        
        // 处理看板状态筛选
        function handleBoardStatusFilter() {
            boardFilters.status = document.getElementById('boardStatusFilter').value;
            applyBoardFilters();
        }
        
        // 处理看板优先级筛选
        function handleBoardPriorityFilter() {
            boardFilters.priority = document.getElementById('boardPriorityFilter').value;
            applyBoardFilters();
        }
        
        // 处理看板类型筛选
        function handleBoardTypeFilter() {
            boardFilters.type = document.getElementById('boardTypeFilter').value;
            applyBoardFilters();
        }
        
        // 筛选今日任务
        function filterTodayTasks() {
            const today = formatDateToLocal(new Date());
            boardFilters = { search: '', project: '', status: '', priority: '', type: '' };
            activeFilters.plannedDate = today;
            applyBoardFilters();
            showNotification('已筛选今日任务', 'info');
        }
        
        // 筛选本周任务
        function filterWeekTasks() {
            const now = new Date();
            const weekStart = new Date(now);
            weekStart.setDate(now.getDate() - now.getDay());
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 6);
            
            boardFilters = { search: '', project: '', status: '', priority: '', type: '' };
            activeFilters.dateRange = { start: weekStart, end: weekEnd };
            applyBoardFilters();
            showNotification('已筛选本周任务', 'info');
        }
        
        // 筛选逾期任务
        function filterOverdueTasks() {
            boardFilters = { search: '', project: '', status: '', priority: '', type: '' };
            activeFilters.overdue = true;
            applyBoardFilters();
            showNotification('已筛选逾期任务', 'info');
        }
        
        // 清除所有筛选
        function clearAllFilters() {
            boardFilters = { search: '', project: '', status: '', priority: '', type: '' };
            activeFilters = {};
            
            // 重置筛选控件
            document.getElementById('boardSearchInput').value = '';
            document.getElementById('boardProjectFilter').value = '';
            document.getElementById('boardStatusFilter').value = '';
            document.getElementById('boardPriorityFilter').value = '';
            document.getElementById('boardTypeFilter').value = '';
            
            applyBoardFilters();
            showNotification('已清除所有筛选', 'info');
        }
        
        // 应用看板筛选
        function applyBoardFilters() {
            let filtered = tasks;
            
            // 搜索筛选
            if (boardFilters.search) {
                filtered = filtered.filter(task => 
                    task.title.toLowerCase().includes(boardFilters.search) ||
                    task.fields.tags.some(tag => tag.toLowerCase().includes(boardFilters.search))
                );
            }
            
            // 项目筛选
            if (boardFilters.project) {
                filtered = filtered.filter(task => task.fields.project === boardFilters.project);
            }
            
            // 状态筛选
            if (boardFilters.status) {
                filtered = filtered.filter(task => task.status === boardFilters.status);
            }
            
            // 优先级筛选
            if (boardFilters.priority) {
                filtered = filtered.filter(task => task.fields.priority === boardFilters.priority);
            }
            
            // 类型筛选
            if (boardFilters.type) {
                filtered = filtered.filter(task => task.type === boardFilters.type);
            }
            
            // 应用其他全局筛选条件
            if (activeFilters.plannedDate) {
                filtered = filtered.filter(task => task.fields.plannedDate === activeFilters.plannedDate);
            }
            
            if (activeFilters.overdue) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                filtered = filtered.filter(task => {
                    if (!task.fields.dueDate || task.status === '已完成') return false;
                    const dueDate = new Date(task.fields.dueDate);
                    return dueDate < today;
                });
            }
            
            if (activeFilters.dateRange) {
                filtered = filtered.filter(task => {
                    if (!task.fields.plannedDate) return false;
                    const taskDate = new Date(task.fields.plannedDate);
                    return taskDate >= activeFilters.dateRange.start && taskDate <= activeFilters.dateRange.end;
                });
            }
            
            filteredTasks = filtered;
            
            // 更新筛选标签显示
            updateBoardFilterTags();
            
            // 更新统计信息
            updateBoardStats();
            
            // 重新渲染看板
            renderBoardView();
        }
        
        // 更新看板筛选标签
        function updateBoardFilterTags() {
            const container = document.getElementById('boardFilterTags');
            const activeFiltersBar = document.getElementById('boardActiveFilters');
            const tags = [];
            
            if (boardFilters.search) tags.push(`搜索: ${boardFilters.search}`);
            if (boardFilters.project) tags.push(`项目: ${boardFilters.project}`);
            if (boardFilters.status) tags.push(`状态: ${boardFilters.status}`);
            if (boardFilters.priority) tags.push(`优先级: ${boardFilters.priority}`);
            if (boardFilters.type) tags.push(`类型: ${boardFilters.type}`);
            if (activeFilters.plannedDate) tags.push(`日期: ${activeFilters.plannedDate}`);
            if (activeFilters.overdue) tags.push(`逾期任务`);
            if (activeFilters.dateRange) tags.push(`本周任务`);
            
            if (tags.length > 0) {
                activeFiltersBar.style.display = 'flex';
                container.innerHTML = tags.map(tag => `
                    <span class="filter-tag active">
                        ${tag}
                        <span style="margin-left: 8px; cursor: pointer;" onclick="removeFilterTag('${tag}')">✕</span>
                    </span>
                `).join('');
            } else {
                activeFiltersBar.style.display = 'none';
            }
        }
        
        // 移除筛选标签
        function removeFilterTag(tag) {
            if (tag.startsWith('搜索:')) {
                boardFilters.search = '';
                document.getElementById('boardSearchInput').value = '';
            } else if (tag.startsWith('项目:')) {
                boardFilters.project = '';
                document.getElementById('boardProjectFilter').value = '';
            } else if (tag.startsWith('状态:')) {
                boardFilters.status = '';
                document.getElementById('boardStatusFilter').value = '';
            } else if (tag.startsWith('优先级:')) {
                boardFilters.priority = '';
                document.getElementById('boardPriorityFilter').value = '';
            } else if (tag.startsWith('类型:')) {
                boardFilters.type = '';
                document.getElementById('boardTypeFilter').value = '';
            } else if (tag.includes('日期:')) {
                delete activeFilters.plannedDate;
            } else if (tag === '逾期任务') {
                delete activeFilters.overdue;
            } else if (tag === '本周任务') {
                delete activeFilters.dateRange;
            }
            
            applyBoardFilters();
        }
        
        // 更新看板统计信息
        function updateBoardStats() {
            const tasksToCount = hasActiveFilters() || Object.values(boardFilters).some(v => v) ? filteredTasks : tasks;
            
            const stats = {
                total: tasksToCount.length,
                todo: tasksToCount.filter(t => t.status === '未开始').length,
                doing: tasksToCount.filter(t => t.status === '进行中').length,
                done: tasksToCount.filter(t => t.status === '已完成').length
            };
            
            stats.completionRate = stats.total > 0 ? Math.round((stats.done / stats.total) * 100) : 0;
            
            document.getElementById('boardTotalCount').textContent = stats.total;
            document.getElementById('boardTodoCount').textContent = stats.todo;
            document.getElementById('boardDoingCount').textContent = stats.doing;
            document.getElementById('boardDoneCount').textContent = stats.done;
            document.getElementById('boardCompletionRate').textContent = stats.completionRate + '%';
        }
        
        // 聚焦今日任务（侧边栏按钮）
        function focusTodayTasks() {
            filterTodayTasks();
        }
        
        // 项目快速切换
        function quickSwitchProject(project) {
            boardFilters.project = project;
            document.getElementById('boardProjectFilter').value = project;
            applyBoardFilters();
            showNotification(`已切换到项目: ${project}`, 'info');
        }
        
        // 初始化看板项目筛选下拉框
        function initializeBoardProjectFilter() {
            const projectFilter = document.getElementById('boardProjectFilter');
            if (!projectFilter) return;
            
            // 获取所有项目
            const allProjects = [...new Set(tasks
                .filter(t => t.fields.project)
                .map(t => t.fields.project)
            )].sort();
            
            // 清空现有选项
            projectFilter.innerHTML = '<option value="">📦 所有项目</option>';
            
            // 添加项目选项
            allProjects.forEach(project => {
                const option = document.createElement('option');
                option.value = project;
                option.textContent = project;
                projectFilter.appendChild(option);
            });
            
            // 恢复之前的选择
            if (boardFilters.project) {
                projectFilter.value = boardFilters.project;
            }
        }
        
        // 渲染统一看板视图
        function renderBoardView() {
            // 默认显示看板模式
            renderBoardKanban();
        }
        
        // 切换看板显示模式
        function switchBoardMode(mode) {
            currentBoardMode = mode;
            
            // 更新按钮状态
            document.querySelectorAll('.board-mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === mode);
            });
            
            // 根据模式渲染不同视图
            switch(mode) {
                case 'kanban':
                    renderBoardKanban();
                    break;
                case 'list':
                    renderBoardList();
                    break;
                case 'tree':
                    renderBoardTree();
                    break;
                case 'gantt':
                    renderBoardGantt();
                    break;
            }
        }
        
        // 渲染看板模式
        function renderBoardKanban() {
            const container = document.getElementById('boardContainer');
            
            // 使用筛选后的任务或所有任务
            const tasksToShow = hasActiveFilters() ? filteredTasks : tasks;
            
            // 获取所有任务（包括目标、关键结果、项目和动作）
            const allTasks = tasksToShow.filter(task => 
                ['目标', '关键结果', '项目', '动作'].includes(task.type)
            );
            
            // 按状态分组
            const statusGroups = {
                '未开始': allTasks.filter(t => t.status === '未开始'),
                '进行中': allTasks.filter(t => t.status === '进行中'),
                '已完成': allTasks.filter(t => t.status === '已完成')
            };
            
            container.innerHTML = `
                <div class="board-columns">
                    ${Object.entries(statusGroups).map(([status, statusTasks]) => `
                        <div class="board-column">
                            <div class="board-column-header">
                                <h3>${getStatusIcon(status)} ${status}</h3>
                                <span class="count-badge">${statusTasks.length}</span>
                            </div>
                            <div class="board-column-content"
                                 data-status="${status}"
                                 ondragover="handleBoardDragOver(event)"
                                 ondragleave="handleBoardDragLeave(event)"
                                 ondrop="handleBoardDrop(event)">
                                ${statusTasks.map(task => renderTaskCard(task)).join('')}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        // 渲染列表模式
        function renderBoardList() {
            const container = document.getElementById('boardContainer');
            
            // 使用筛选后的任务或所有任务
            const tasksToShow = hasActiveFilters() ? filteredTasks : tasks;
            
            // 获取所有任务并按类型分组
            const tasksByType = {
                '目标': tasksToShow.filter(t => t.type === '目标'),
                '关键结果': tasksToShow.filter(t => t.type === '关键结果'),
                '项目': tasksToShow.filter(t => t.type === '项目'),
                '动作': tasksToShow.filter(t => t.type === '动作')
            };
            
            container.innerHTML = `
                <div class="board-list-view">
                    ${Object.entries(tasksByType).map(([type, typeTasks]) => `
                        <div class="list-section">
                            <div class="list-section-header">
                                <h3>${getTaskTypeIcon(type)} ${type}</h3>
                                <span class="count-badge">${typeTasks.length}</span>
                            </div>
                            <div class="list-section-content">
                                <table class="task-list-table">
                                    <thead>
                                        <tr>
                                            <th>标题</th>
                                            <th>状态</th>
                                            <th>优先级</th>
                                            <th>到期日期</th>
                                            <th>进度</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${typeTasks.map(task => `
                                            <tr class="task-list-row" onclick="viewTaskDetail('${task.id}')">
                                                <td class="task-title">${task.title}</td>
                                                <td><span class="status-badge ${task.status}">${getStatusIcon(task.status)} ${task.status}</span></td>
                                                <td><span class="priority-badge ${task.fields.priority.toLowerCase()}">${getPriorityIcon(task.fields.priority)}</span></td>
                                                <td>${task.fields.dueDate ? formatDate(task.fields.dueDate) : '-'}</td>
                                                <td>${task.fields.progress ? `${task.fields.progress}%` : '-'}</td>
                                                <td class="task-actions">
                                                    ${getTaskActions(task)}
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        // 渲染树形模式
        function renderBoardTree() {
            const container = document.getElementById('boardContainer');
            
            // 构建任务层级结构
            const taskHierarchy = buildTaskHierarchy();
            
            container.innerHTML = `
                <div class="board-tree-view">
                    <div class="tree-header">
                        <h3>🌳 任务层级结构</h3>
                        <div class="tree-controls">
                            <button class="btn btn-sm" onclick="expandAllTreeNodes()">展开全部</button>
                            <button class="btn btn-sm" onclick="collapseAllTreeNodes()">折叠全部</button>
                        </div>
                    </div>
                    <div class="tree-content">
                        ${renderTreeNodes(taskHierarchy)}
                    </div>
                </div>
            `;
        }
        
        // 构建任务层级结构
        function buildTaskHierarchy() {
            const hierarchy = [];
            
            // 使用筛选后的任务或所有任务
            const tasksToUse = hasActiveFilters() ? filteredTasks : tasks;
            
            // 首先获取所有目标
            const goals = tasksToUse.filter(t => t.type === '目标');
            
            goals.forEach(goal => {
                const goalNode = {
                    task: goal,
                    children: []
                };
                
                // 获取该目标下的关键结果
                const krs = tasksToUse.filter(t => 
                    t.type === '关键结果' && 
                    t.path && t.path.includes(goal.title)
                );
                
                krs.forEach(kr => {
                    const krNode = {
                        task: kr,
                        children: []
                    };
                    
                    // 获取该关键结果下的项目
                    const projects = tasksToUse.filter(t => 
                        t.type === '项目' && 
                        t.path && t.path.includes(kr.title)
                    );
                    
                    projects.forEach(project => {
                        const projectNode = {
                            task: project,
                            children: []
                        };
                        
                        // 获取该项目下的动作
                        const actions = tasksToUse.filter(t => 
                            t.type === '动作' && 
                            t.path && t.path.includes(project.title)
                        );
                        
                        actions.forEach(action => {
                            projectNode.children.push({
                                task: action,
                                children: []
                            });
                        });
                        
                        krNode.children.push(projectNode);
                    });
                    
                    goalNode.children.push(krNode);
                });
                
                hierarchy.push(goalNode);
            });
            
            return hierarchy;
        }
        
        // 渲染树形节点
        function renderTreeNodes(nodes, level = 0) {
            return nodes.map(node => `
                <div class="tree-node" style="margin-left: ${level * 30}px;">
                    <div class="tree-node-content" onclick="toggleTreeNode(this)">
                        <span class="tree-toggle ${node.children.length > 0 ? 'has-children' : ''}">
                            ${node.children.length > 0 ? '▼' : '▪'}
                        </span>
                        <span class="tree-type-icon">${getTaskTypeIcon(node.task.type)}</span>
                        <span class="tree-title">${node.task.title}</span>
                        <span class="tree-status">${getStatusIcon(node.task.status)}</span>
                        <span class="tree-priority priority-badge ${node.task.fields.priority.toLowerCase()}">
                            ${getPriorityIcon(node.task.fields.priority)}
                        </span>
                    </div>
                    ${node.children.length > 0 ? `
                        <div class="tree-children">
                            ${renderTreeNodes(node.children, level + 1)}
                        </div>
                    ` : ''}
                </div>
            `).join('');
        }
        
        // 渲染任务卡片（统一格式）
        function renderTaskCard(task) {
            const isExpanded = expandedTasksBoard.has(task.id);
            
            return `
                <div class="board-card ${isExpanded ? 'expanded' : ''}" 
                     draggable="true"
                     data-task-id="${task.id}"
                     data-task-status="${task.status}"
                     ondragstart="handleBoardDragStart(event)"
                     ondragend="handleBoardDragEnd(event)"
                     onclick="handleBoardTaskClick(event, '${task.id}')">
                    <div class="board-card-header">
                        <span class="type-icon">${getTaskTypeIcon(task.type)}</span>
                        <span class="priority-badge ${task.fields.priority.toLowerCase()}">
                            ${getPriorityIcon(task.fields.priority)}
                        </span>
                    </div>
                    <h4 class="board-card-title">${task.title}</h4>
                    ${task.path ? `<div class="board-card-path" style="font-size: 0.85rem; color: var(--text-muted); opacity: 0.7; margin: 4px 0;">📍 ${task.path}</div>` : ''}
                    
                    <div class="expand-indicator" style="position: absolute; right: 8px; bottom: 8px; font-size: 0.7rem; color: var(--text-muted); opacity: 0.6;">
                        ${isExpanded ? '▲' : '▼'}
                    </div>
                    
                    ${isExpanded ? `
                    <div class="board-card-meta">
                        ${task.fields.dueDate ? `<span>📅 ${formatDate(task.fields.dueDate)}</span>` : ''}
                        ${task.fields.progress ? `<span>📊 ${task.fields.progress}%</span>` : ''}
                    </div>
                    <div class="board-card-footer">
                        <span class="task-type-badge">${task.type}</span>
                        ${getTaskActions(task)}
                    </div>
                    ` : ''}
                </div>
            `;
        }
        
        // 获取任务操作按钮
        function getTaskActions(task) {
            if (task.status === '未开始') {
                return `<button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '进行中')">🚀 开始</button>`;
            } else if (task.status === '进行中') {
                return `<button class="btn btn-sm btn-success" onclick="event.stopPropagation(); toggleTaskStatus('${task.id}', '已完成')">✅ 完成</button>`;
            }
            return '';
        }
        
        // 统一看板拖拽功能
        let draggedBoardTaskId = null;
        let draggedBoardElement = null;
        
        function handleBoardDragStart(event) {
            const card = event.target.closest('.board-card');
            if (!card) return;
            
            draggedBoardTaskId = card.dataset.taskId;
            draggedBoardElement = card;
            
            card.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', draggedBoardTaskId);
            
            setTimeout(() => {
                card.style.opacity = '0.3';
            }, 0);
        }
        
        function handleBoardDragEnd(event) {
            const card = event.target.closest('.board-card');
            if (!card) return;
            
            card.classList.remove('dragging');
            card.style.opacity = '';
            
            // 清除所有拖拽高亮
            document.querySelectorAll('.board-column-content').forEach(col => {
                col.classList.remove('drag-over');
            });
            
            draggedBoardTaskId = null;
            draggedBoardElement = null;
        }
        
        function handleBoardDragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';
            
            const column = event.target.closest('.board-column-content');
            if (column) {
                column.classList.add('drag-over');
            }
        }
        
        function handleBoardDragLeave(event) {
            const column = event.target.closest('.board-column-content');
            if (column && !column.contains(event.relatedTarget)) {
                column.classList.remove('drag-over');
            }
        }
        
        function handleBoardDrop(event) {
            event.preventDefault();
            
            const column = event.target.closest('.board-column-content');
            if (!column || !draggedBoardTaskId) return;
            
            column.classList.remove('drag-over');
            
            const newStatus = column.dataset.status;
            const task = findTaskById(draggedBoardTaskId);
            
            if (task && task.status !== newStatus) {
                toggleTaskStatus(draggedBoardTaskId, newStatus);
            }
        }
        
        // 树形视图交互功能
        function toggleTreeNode(element) {
            const node = element.parentElement;
            const children = node.querySelector('.tree-children');
            const toggle = element.querySelector('.tree-toggle');
            
            if (children && toggle.classList.contains('has-children')) {
                children.classList.toggle('collapsed');
                toggle.textContent = children.classList.contains('collapsed') ? '▶' : '▼';
            }
        }
        
        function expandAllTreeNodes() {
            document.querySelectorAll('.tree-children').forEach(children => {
                children.classList.remove('collapsed');
            });
            document.querySelectorAll('.tree-toggle.has-children').forEach(toggle => {
                toggle.textContent = '▼';
            });
        }
        
        function collapseAllTreeNodes() {
            document.querySelectorAll('.tree-children').forEach(children => {
                children.classList.add('collapsed');
            });
            document.querySelectorAll('.tree-toggle.has-children').forEach(toggle => {
                toggle.textContent = '▶';
            });
        }
        
        // 渲染甘特图模式
        function renderBoardGantt() {
            const container = document.getElementById('boardContainer');
            
            // 使用筛选后的任务或所有任务
            const tasksToShow = hasActiveFilters() ? filteredTasks : tasks;
            
            // 获取有日期的任务
            const tasksWithDates = tasksToShow.filter(task => 
                task.fields.plannedDate || task.fields.dueDate || task.fields.startTime
            ).sort((a, b) => {
                const dateA = getTaskStartDate(a);
                const dateB = getTaskStartDate(b);
                return dateA - dateB;
            });
            
            if (tasksWithDates.length === 0) {
                container.innerHTML = `
                    <div class="empty-gantt">
                        <p>暂无带有日期信息的任务</p>
                        <p class="text-muted">甘特图需要任务设置计划日期、截止日期或开始时间</p>
                    </div>
                `;
                return;
            }
            
            // 计算时间范围
            const { startDate, endDate } = calculateGanttDateRange(tasksWithDates);
            const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
            const dayWidth = Math.max(40, Math.min(80, 3000 / totalDays)); // 自适应日期宽度
            
            // 生成甘特图HTML
            container.innerHTML = `
                <div class="gantt-chart">
                    <div class="gantt-header">
                        <div class="gantt-task-list-header">任务名称</div>
                        <div class="gantt-timeline-header" style="width: ${totalDays * dayWidth}px;">
                            ${generateTimelineHeader(startDate, endDate, dayWidth)}
                        </div>
                    </div>
                    <div class="gantt-body">
                        <div class="gantt-task-list">
                            ${tasksWithDates.map((task, index) => `
                                <div class="gantt-task-item" onclick="viewTaskDetail('${task.id}')">
                                    <span class="gantt-task-type">${getTaskTypeIcon(task.type)}</span>
                                    <span class="gantt-task-title">${task.title}</span>
                                    <span class="gantt-task-status">${getStatusIcon(task.status)}</span>
                                </div>
                            `).join('')}
                        </div>
                        <div class="gantt-timeline" style="width: ${totalDays * dayWidth}px;">
                            ${generateTodayLine(startDate, dayWidth)}
                            ${tasksWithDates.map((task, index) => 
                                generateTaskBar(task, index, startDate, dayWidth)
                            ).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 获取任务开始日期
        function getTaskStartDate(task) {
            if (task.fields.startTime) {
                return new Date(task.fields.startTime);
            } else if (task.fields.plannedDate) {
                return new Date(task.fields.plannedDate);
            } else if (task.fields.dueDate) {
                return new Date(task.fields.dueDate);
            }
            return new Date();
        }
        
        // 获取任务结束日期
        function getTaskEndDate(task) {
            if (task.fields.endTime) {
                return new Date(task.fields.endTime);
            } else if (task.fields.dueDate) {
                return new Date(task.fields.dueDate);
            } else {
                // 如果没有结束时间，默认为开始时间当天结束
                const startDate = getTaskStartDate(task);
                return new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 23, 59, 59);
            }
        }
        
        // 计算甘特图日期范围
        function calculateGanttDateRange(tasks) {
            let minDate = new Date();
            let maxDate = new Date();
            
            tasks.forEach(task => {
                const startDate = getTaskStartDate(task);
                const endDate = getTaskEndDate(task);
                
                if (startDate < minDate) minDate = startDate;
                if (endDate > maxDate) maxDate = endDate;
            });
            
            // 添加前后缓冲
            const startDate = new Date(minDate);
            startDate.setDate(startDate.getDate() - 7); // 前7天
            
            const endDate = new Date(maxDate);
            endDate.setDate(endDate.getDate() + 7); // 后7天
            
            return { startDate, endDate };
        }
        
        // 生成时间轴头部
        function generateTimelineHeader(startDate, endDate, dayWidth) {
            const days = [];
            const currentDate = new Date(startDate);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            while (currentDate <= endDate) {
                const isToday = currentDate.getTime() === today.getTime();
                const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6;
                
                days.push(`
                    <div class="gantt-day ${isToday ? 'today' : ''} ${isWeekend ? 'weekend' : ''}" 
                         style="width: ${dayWidth}px;">
                        <div class="gantt-day-number">${currentDate.getDate()}</div>
                        <div class="gantt-day-name">${getWeekdayName(currentDate.getDay())}</div>
                    </div>
                `);
                
                currentDate.setDate(currentDate.getDate() + 1);
            }
            
            return days.join('');
        }
        
        // 生成今日线
        function generateTodayLine(startDate, dayWidth) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            const daysDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));
            if (daysDiff < 0) return '';
            
            return `<div class="gantt-today-line" style="left: ${daysDiff * dayWidth + dayWidth / 2}px;"></div>`;
        }
        
        // 生成任务条
        function generateTaskBar(task, index, startDate, dayWidth) {
            const taskStartDate = getTaskStartDate(task);
            const taskEndDate = getTaskEndDate(task);
            
            const startDaysDiff = Math.floor((taskStartDate - startDate) / (1000 * 60 * 60 * 24));
            const duration = Math.ceil((taskEndDate - taskStartDate) / (1000 * 60 * 60 * 24)) + 1;
            
            const left = startDaysDiff * dayWidth;
            const width = duration * dayWidth - 4; // 减去边距
            
            // 计算进度
            const progress = task.fields.progress || 0;
            const progressWidth = (width * progress) / 100;
            
            // 根据任务类型和状态设置颜色
            const barClass = `gantt-bar-${task.type} gantt-bar-${task.status}`;
            
            return `
                <div class="gantt-bar ${barClass}" 
                     style="top: ${index * 40 + 5}px; left: ${left}px; width: ${width}px;"
                     onclick="viewTaskDetail('${task.id}')"
                     title="${task.title}">
                    <div class="gantt-bar-progress" style="width: ${progressWidth}px;"></div>
                    <div class="gantt-bar-text">${task.title}</div>
                </div>
            `;
        }
        
        // 获取星期名称
        function getWeekdayName(day) {
            const weekdays = ['日', '一', '二', '三', '四', '五', '六'];
            return weekdays[day];
        }
        
        /* ========================================
           🎯 项目看板拖拽功能
           ======================================== */
        
        // 项目卡片拖拽开始
        function handleProjectDragStart(event) {
            const card = event.target.closest('.board-card');
            if (!card) return;
            
            draggedProjectTaskId = card.dataset.taskId;
            draggedProjectElement = card;
            
            card.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', draggedProjectTaskId);
            
            // 延迟设置透明度，避免影响拖拽图像
            setTimeout(() => {
                card.style.opacity = '0.3';
            }, 0);
        }
        
        // 项目看板列拖拽悬停
        function handleProjectDragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';
            
            const column = event.target.closest('.board-column-content');
            if (column) {
                column.classList.add('drag-over');
            }
        }
        
        // 项目看板列拖拽离开
        function handleProjectDragLeave(event) {
            const column = event.target.closest('.board-column-content');
            if (column && !column.contains(event.relatedTarget)) {
                column.classList.remove('drag-over');
            }
        }
        
        // 项目卡片放置
        function handleProjectDrop(event) {
            event.preventDefault();
            event.stopPropagation();
            
            const column = event.target.closest('.board-column-content');
            if (!column || !draggedProjectTaskId) return;
            
            const newStatus = column.dataset.status;
            const task = tasks.find(t => t.id === draggedProjectTaskId);
            
            if (task && task.status !== newStatus) {
                // 使用 toggleTaskStatus 更新任务状态，确保所有状态变化逻辑正确执行
                toggleTaskStatus(draggedProjectTaskId, newStatus);
                
                // 显示通知
                showNotification(`任务已移动到 ${newStatus}`, 'success');
            }
            
            // 清除拖拽悬停样式
            column.classList.remove('drag-over');
        }
        
        // 项目卡片拖拽结束
        function handleProjectDragEnd(event) {
            if (draggedProjectElement) {
                draggedProjectElement.classList.remove('dragging');
                draggedProjectElement.style.opacity = '';
            }
            
            // 清除所有拖拽悬停样式
            document.querySelectorAll('.board-column-content').forEach(col => {
                col.classList.remove('drag-over');
            });
            
            // 重置拖拽状态
            draggedProjectTaskId = null;
            draggedProjectElement = null;
        }
        
        /* ========================================
           🎪 目标看板
           ======================================== */
        
        function renderGoalBoard() {
            const container = document.getElementById('goalBoardContainer');
            const goals = tasks.filter(task => task.type === '目标');
            const keyResults = tasks.filter(task => task.type === '关键结果');
            
            container.innerHTML = `
                <div class="goal-board">
                    ${goals.map(goal => {
                        const goalKeyResults = keyResults.filter(kr => kr.parent === goal.id);
                        const progress = goalKeyResults.length > 0
                            ? Math.round(goalKeyResults.reduce((sum, kr) => sum + (kr.fields.progress || 0), 0) / goalKeyResults.length)
                            : 0;
                        
                        return `
                            <div class="goal-card" data-goal-id="${goal.id}" onclick="viewTaskDetail('${goal.id}')" style="cursor: pointer;">
                                <div class="goal-header">
                                    <h3 class="goal-title">
                                        ${getTaskTypeIcon('目标')} ${goal.title}
                                    </h3>
                                    <span class="${getStatusClass(goal.status)}">
                                        ${getStatusIcon(goal.status)} ${goal.status}
                                    </span>
                                </div>
                                <div class="goal-progress">
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: ${progress}%"></div>
                                    </div>
                                    <span class="progress-text">${progress}%</span>
                                </div>
                                <div class="key-results">
                                    <h4 class="key-results-title">关键结果</h4>
                                    ${goalKeyResults.length > 0 ? goalKeyResults.map(kr => `
                                        <div class="key-result-item" onclick="event.stopPropagation(); viewTaskDetail('${kr.id}')">
                                            <div class="key-result-header">
                                                <span class="key-result-title">${kr.title}</span>
                                                <span class="key-result-progress">${kr.fields.progress || 0}%</span>
                                            </div>
                                            <div class="key-result-progress-bar">
                                                <div class="progress-fill" style="width: ${kr.fields.progress || 0}%"></div>
                                            </div>
                                        </div>
                                    `).join('') : '<p class="text-muted text-small">暂无关键结果</p>'}
                                </div>
                                <div class="goal-actions">
                                    ${goal.status !== '已完成' ? `
                                        <button class="btn btn-primary" onclick="event.stopPropagation(); addKeyResult('${goal.id}')">
                                            ➕ 添加关键结果
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                        `;
                    }).join('') || '<p class="text-muted">暂无目标</p>'}
                </div>
            `;
        }
        
        /* ========================================
           🎨 动态侧边栏系统
           ======================================== */
        
        // 更新侧边栏内容
        function updateSidebar(viewName) {
            const sidebar = document.getElementById('sidebar');
            
            switch(viewName) {
                case 'focus':
                    renderFocusSidebar();
                    break;
                case 'today':
                    renderTimelineSidebar();
                    break;
                case 'board':
                    renderBoardSidebar();
                    break;
                case 'planning':
                    renderPlanningSidebar();
                    break;
                default:
                    renderFocusSidebar(); // 默认显示焦点视图的侧边栏
            }
        }
        
        
        // 焦点视图侧边栏
        function renderFocusSidebar() {
            const sidebar = document.getElementById('sidebar');
            
            // 统计焦点任务信息
            const focusTasksArray = Array.from(focusTasks);
            
            sidebar.innerHTML = `
                <div class="sidebar-section">
                    <h3 class="sidebar-title">🎯 焦点统计</h3>
                    <div class="custom-view-item active">
                        <span>🎯 当前焦点</span>
                        <span class="text-small text-muted">${focusTasksArray.length}</span>
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">任务管理</h3>
                    <div class="custom-view-item" onclick="openAddToPendingModal()">
                        <span>📋 添加到待处理</span>
                        <span class="text-small text-muted">+</span>
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">快速操作</h3>
                    <button class="btn btn-block btn-secondary" onclick="selectFocusTasks()">
                        🎯 选择焦点任务
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="clearFocusTasks()">
                        🗑️ 清空焦点任务
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="resetToTestData()">
                        🔄 重置测试数据
                    </button>
                </div>
            `;
        }
        
        // 时间轴视图侧边栏
        function renderTimelineSidebar() {
            const sidebar = document.getElementById('sidebar');
            
            // 获取选中日期的任务
            const selectedDateStr = formatDateToLocal(selectedTimelineDate);
            const dateTasks = tasks.filter(t => t.fields.plannedDate === selectedDateStr);
            
            sidebar.innerHTML = `
                <div class="sidebar-section">
                    <h3 class="sidebar-title">📊 任务统计</h3>
                    <div class="timeline-stats-mini">
                        <div class="stat-item">
                            <span class="stat-label">总任务</span>
                            <span class="stat-value">${dateTasks.length}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">已完成</span>
                            <span class="stat-value">${dateTasks.filter(t => t.status === '已完成').length}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">进行中</span>
                            <span class="stat-value">${dateTasks.filter(t => t.status === '进行中').length}</span>
                        </div>
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">⚡ 快速操作</h3>
                    <button class="btn btn-block btn-secondary" onclick="openAddToPendingModal()">
                        📋 添加到待处理
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="refreshTimelineView()">
                        🔄 刷新视图
                    </button>
                </div>
            `;
        }
        
        // 项目视图侧边栏
        function renderProjectSidebar() {
            const sidebar = document.getElementById('sidebar');
            
            // 获取所有项目
            const projects = [...new Set(tasks.filter(t => t.type === '项目').map(t => t.path))];
            
            sidebar.innerHTML = `
                <div class="sidebar-section">
                    <h3 class="sidebar-title">📦 项目列表</h3>
                    ${projects.map(project => {
                        const projectTasks = tasks.filter(t => t.path === project && t.type === '项目');
                        const completedCount = projectTasks.filter(t => t.status === '已完成').length;
                        const progress = projectTasks.length > 0 ? Math.round(completedCount / projectTasks.length * 100) : 0;
                        
                        return `
                            <div class="custom-view-item" onclick="filterByProject('${project}')">
                                <div>
                                    <div>${project}</div>
                                    <div class="progress-bar-mini">
                                        <div class="progress-fill" style="width: ${progress}%"></div>
                                    </div>
                                </div>
                                <span class="text-small text-muted">${progress}%</span>
                            </div>
                        `;
                    }).join('')}
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">项目统计</h3>
                    <div class="project-stats">
                        <div class="stat-item">
                            <span class="stat-label">总项目数</span>
                            <span class="stat-value">${projects.length}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">进行中</span>
                            <span class="stat-value">${tasks.filter(t => t.type === '项目' && t.status === '进行中').length}</span>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 目标视图侧边栏
        function renderGoalSidebar() {
            const sidebar = document.getElementById('sidebar');
            
            // 获取所有目标
            const goals = tasks.filter(t => t.type === '目标');
            const keyResults = tasks.filter(t => t.type === '关键结果');
            
            sidebar.innerHTML = `
                <div class="sidebar-section">
                    <h3 class="sidebar-title">🎪 目标层级</h3>
                    ${goals.map(goal => {
                        const goalKRs = keyResults.filter(kr => kr.parent === goal.id);
                        const progress = goalKRs.length > 0
                            ? Math.round(goalKRs.reduce((sum, kr) => sum + (kr.fields.progress || 0), 0) / goalKRs.length)
                            : 0;
                        
                        return `
                            <div class="goal-nav-item" onclick="scrollToGoal('${goal.id}')">
                                <div class="goal-nav-header">
                                    <span>${getTaskTypeIcon('目标')} ${goal.title}</span>
                                    <span class="text-small">${progress}%</span>
                                </div>
                                <div class="goal-nav-krs">
                                    ${goalKRs.map(kr => `
                                        <div class="kr-item">
                                            <span class="text-small">🔑 ${kr.title}</span>
                                            <span class="text-small text-muted">${kr.fields.progress || 0}%</span>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">目标统计</h3>
                    <div class="goal-stats">
                        <div class="stat-item">
                            <span class="stat-label">总目标数</span>
                            <span class="stat-value">${goals.length}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">关键结果</span>
                            <span class="stat-value">${keyResults.length}</span>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 计划视图侧边栏
        function renderPlanningSidebar() {
            const sidebar = document.getElementById('sidebar');
            
            // 统计任务信息
            const unplannedTasks = getUnplannedTasks();
            const totalTasks = tasks.length;
            const focusCount = focusTasks.size;
            const pendingCount = pendingTasks.size;
            
            sidebar.innerHTML = `
                <div class="sidebar-section">
                    <h3 class="sidebar-title">📊 规划统计</h3>
                    <div class="custom-view-item">
                        <span>📝 待规划动作</span>
                        <span class="text-small text-muted">${unplannedTasks.length}</span>
                    </div>
                    <div class="custom-view-item">
                        <span>🎯 焦点任务</span>
                        <span class="text-small text-muted">${focusCount}</span>
                    </div>
                    <div class="custom-view-item">
                        <span>📋 待处理任务</span>
                        <span class="text-small text-muted">${pendingCount}</span>
                    </div>
                    <div class="text-small text-muted" style="padding: 0 15px; margin-top: -5px; margin-bottom: 10px; opacity: 0.7;">
                        仅显示动作类型任务
                    </div>
                    <div class="custom-view-item">
                        <span>📋 总任务数</span>
                        <span class="text-small text-muted">${totalTasks}</span>
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">🔧 规划工具</h3>
                    <div class="custom-view-item" onclick="selectAllUnplanned()">
                        <span>☑️ 全选待规划</span>
                        <span class="text-small text-muted">⚡</span>
                    </div>
                    <div class="custom-view-item" onclick="clearPlanningSelection()">
                        <span>❌ 清空选择</span>
                        <span class="text-small text-muted">🗑️</span>
                    </div>
                    <div class="custom-view-item" onclick="autoScheduleTasks()">
                        <span>🤖 智能安排</span>
                        <span class="text-small text-muted">AI</span>
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">快速筛选</h3>
                    <div class="custom-view-item" onclick="filterPlanningByPriority('高')">
                        <span>🔴 高优先级</span>
                        <span class="text-small text-muted">${unplannedTasks.filter(t => t.fields.priority === '高').length}</span>
                    </div>
                    <div class="custom-view-item" onclick="filterPlanningByStatus('未开始')">
                        <span>⏸ 未开始</span>
                        <span class="text-small text-muted">${unplannedTasks.filter(t => t.status === '未开始').length}</span>
                    </div>
                </div>
            `;
        }
        
        // 统一看板视图侧边栏
        function renderBoardSidebar() {
            const sidebar = document.getElementById('sidebar');
            
            // 获取所有任务的项目列表
            const allProjects = [...new Set(tasks
                .filter(t => t.fields.project)
                .map(t => t.fields.project)
            )].sort();
            
            sidebar.innerHTML = `
                <div class="sidebar-section">
                    <h3 class="sidebar-title">⚡ 快速操作</h3>
                    <button class="btn btn-block btn-primary" onclick="focusTodayTasks()">
                        🎯 聚焦今日重点
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="openBatchOperationModal()">
                        📋 批量操作
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="openTaskFilterModal()">
                        🔍 高级筛选
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="openDataAnalysisModal()">
                        📊 数据分析
                    </button>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">🏷️ 标签管理</h3>
                    <button class="btn btn-block btn-secondary" onclick="openTagManagerModal()">
                        🏷️ 管理标签
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="filterByPopularTags()">
                        🔥 热门标签
                    </button>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">📁 项目快速切换</h3>
                    <div class="project-quick-switch">
                        ${allProjects.length > 0 ? allProjects.map(project => {
                            const projectTasks = tasks.filter(t => t.fields.project === project);
                            return `
                                <button class="btn btn-block btn-secondary project-btn" onclick="quickSwitchProject('${project}')">
                                    <span>📦 ${project}</span>
                                    <span class="badge">${projectTasks.length}</span>
                                </button>
                            `;
                        }).join('') : '<div class="empty-message">暂无项目</div>'}
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <h3 class="sidebar-title">🔧 工具</h3>
                    <button class="btn btn-block btn-secondary" onclick="exportBoardData()">
                        💾 导出数据
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="importBoardData()">
                        📥 导入数据
                    </button>
                    <button class="btn btn-block btn-secondary" onclick="openSettingsModal()">
                        ⚙️ 看板设置
                    </button>
                </div>
            `;
        }
        
        // 清空焦点任务
        function clearFocusTasks() {
            showConfirm('确定要清空所有焦点任务吗？', () => {
                focusTasks.clear();
                focusTasksOrder = [];
                renderFocusTasks();
                updateSidebarStats();
                saveToLocalStorage();
                showNotification('已清空所有焦点任务', 'success');
            });
        }
        
        // 滚动到指定目标
        function scrollToGoal(goalId) {
            const goalElement = document.querySelector(`[data-goal-id="${goalId}"]`);
            if (goalElement) {
                goalElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
        
        
        /* ========================================
           🛠️ 占位函数 - 待实现功能
           ======================================== */
        
        // 批量操作
        function openBatchOperationModal() {
            showNotification('批量操作功能开发中...', 'info');
        }
        
        // 数据分析
        function openDataAnalysisModal() {
            showNotification('数据分析功能开发中...', 'info');
        }
        
        // 标签管理
        function openTagManagerModal() {
            showNotification('标签管理功能开发中...', 'info');
        }
        
        // 热门标签筛选
        function filterByPopularTags() {
            showNotification('热门标签功能开发中...', 'info');
        }
        
        // 导入数据
        function importBoardData() {
            showNotification('数据导入功能开发中...', 'info');
        }
        
        // 看板设置
        function openSettingsModal() {
            showNotification('看板设置功能开发中...', 'info');
        }
        
        /* ========================================
           💾 数据持久化
           ======================================== */
        
        // 保存到 localStorage
        function saveToLocalStorage() {
            const data = {
                tasks: tasks,
                focusTasks: Array.from(focusTasks),
                focusTasksOrder: focusTasksOrder,
                pendingTasks: Array.from(pendingTasks),
                pendingTasksOrder: pendingTasksOrder,
                customViews: customViews,
                activeFilters: activeFilters,
                currentView: currentView,
                selectedTimelineDate: selectedTimelineDate.toISOString()
            };
            
            localStorage.setItem('mntask-focus-board', JSON.stringify(data));
        }
        
        // 从 localStorage 加载
        function loadFromLocalStorage() {
            const savedData = localStorage.getItem('mntask-focus-board');
            if (savedData) {
                try {
                    const data = JSON.parse(savedData);
                    tasks = data.tasks || [];
                    focusTasks = new Set(data.focusTasks || []);
                    focusTasksOrder = data.focusTasksOrder || [];
                    pendingTasks = new Set(data.pendingTasks || []);
                    pendingTasksOrder = data.pendingTasksOrder || [];
                    customViews = data.customViews || {};
                    activeFilters = data.activeFilters || {};
                    currentView = data.currentView || 'focus';
                    
                    // 加载保存的时间轴日期
                    if (data.selectedTimelineDate) {
                        const savedDate = new Date(data.selectedTimelineDate);
                        selectedTimelineDate = new Date(savedDate.getFullYear(), savedDate.getMonth(), savedDate.getDate());
                    }
                    
                    return true;
                } catch (e) {
                    console.error('加载数据失败:', e);
                }
            }
            return false;
        }
        
        // 重置为测试数据
        function resetToTestData() {
            if (confirm('确定要重置为测试数据吗？当前数据将被清除。')) {
                // 清除localStorage
                localStorage.removeItem('mntask-focus-board');
                
                // 清空现有数据
                tasks = [];
                focusTasks.clear();
                focusTasksOrder = [];
                pendingTasks.clear();
                pendingTasksOrder = [];
                activeFilters = {};
                
                // 重新生成测试数据
                generateTestData();
                
                // 确保只有一个任务被标记为当前焦点
                ensureOnlyOneCurrentFocus();
                
                // 重新初始化
                filteredTasks = tasks;
                if (hasActiveFilters()) {
                    applyFilters();
                }
                
                // 刷新当前视图
                switchView(currentView);
                
                // 更新侧边栏
                updateSidebar(currentView);
                updateSidebarStats();
                
                showNotification('已重置为测试数据', 'success');
            }
        }
        
        /* ========================================
           📅 安排明天任务功能
           ======================================== */
        
        // 临时存储选中的任务ID
        let selectedTomorrowTasks = new Set();
        
        // 打开安排明天任务对话框
        function scheduleTomorrowTasks() {
            selectedTomorrowTasks.clear();
            const container = document.getElementById('tomorrowTaskSelectList');
            
            // 筛选可以安排的任务（未开始和暂停的任务）
            const availableTasks = tasks.filter(task => 
                task.status === '未开始' || task.status === '暂停'
            );
            
            if (availableTasks.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">没有可安排的任务（只能安排"未开始"和"暂停"状态的任务）</p>';
            } else {
                container.innerHTML = availableTasks.map(task => `
                    <div class="task-select-item">
                        <input type="checkbox" 
                               id="tomorrow_${task.id}" 
                               value="${task.id}"
                               onchange="toggleTomorrowTask('${task.id}')">
                        <label for="tomorrow_${task.id}" style="flex: 1; cursor: pointer;">
                            <div class="task-select-info">
                                <div class="task-select-header">
                                    <span class="task-type-badge ${task.type.toLowerCase()}">
                                        ${getTaskTypeIcon(task.type)} ${task.type}
                                    </span>
                                    <span class="task-status-badge ${task.status.toLowerCase()}">
                                        ${getStatusIcon(task.status)} ${task.status}
                                    </span>
                                    ${task.fields.priority ? `
                                        <span class="priority-indicator ${task.fields.priority.toLowerCase()}">
                                            ${getPriorityIcon(task.fields.priority)}
                                        </span>
                                    ` : ''}
                                </div>
                                <div class="task-select-title">${task.title}</div>
                                <div class="task-select-path">${task.path}</div>
                                ${task.fields.plannedDate ? `
                                    <div class="text-small text-muted">
                                        当前计划日期: ${formatDate(task.fields.plannedDate)}
                                    </div>
                                ` : ''}
                            </div>
                        </label>
                    </div>
                `).join('');
            }
            
            updateTomorrowSelectionCount();
            document.getElementById('scheduleTomorrowModal').classList.add('active');
        }
        
        // 切换任务选择状态
        function toggleTomorrowTask(taskId) {
            if (selectedTomorrowTasks.has(taskId)) {
                selectedTomorrowTasks.delete(taskId);
            } else {
                selectedTomorrowTasks.add(taskId);
            }
            updateTomorrowSelectionCount();
        }
        
        // 更新选择计数
        function updateTomorrowSelectionCount() {
            document.getElementById('selectedTomorrowCount').textContent = selectedTomorrowTasks.size;
        }
        
        // 确认安排到明天
        function confirmTomorrowSchedule() {
            if (selectedTomorrowTasks.size === 0) {
                showNotification('请至少选择一个任务', 'warning');
                return;
            }
            
            // 计算明天的日期
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const tomorrowStr = tomorrow.toISOString().split('T')[0];
            
            // 更新选中任务的 plannedDate
            let updatedCount = 0;
            selectedTomorrowTasks.forEach(taskId => {
                const task = tasks.find(t => t.id === taskId);
                if (task) {
                    task.fields.plannedDate = tomorrowStr;
                    updatedCount++;
                    
                    // 添加进展记录
                    if (!task.fields.progressLog) {
                        task.fields.progressLog = [];
                    }
                    task.fields.progressLog.push({
                        date: new Date().toLocaleString('zh-CN'),
                        note: `任务已安排到 ${tomorrow.toLocaleDateString('zh-CN')}`
                    });
                }
            });
            
            // 保存数据
            saveToLocalStorage();
            
            // 关闭模态框
            closeModal('scheduleTomorrowModal');
            
            // 显示成功提示
            showNotification(`已成功安排 ${updatedCount} 个任务到明天`, 'success');
            
            // 如果当前在时间轴视图，刷新显示
            if (currentView === 'today') {
                renderTodayTimeline();
            }
            
            // 更新侧边栏统计
            updateSidebarStats();
        }
        
        /* ========================================
           📅 时间轴日期选择功能
           ======================================== */
        
        // 格式化日期为本地日期字符串 (YYYY-MM-DD)
        function formatDateToLocal(date) {
            // 确保使用本地时间而不是UTC时间
            const localDate = new Date(date.getTime());
            const year = localDate.getFullYear();
            const month = String(localDate.getMonth() + 1).padStart(2, '0');
            const day = String(localDate.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        
        // 更新时间轴统计信息
        function updateTimelineStats(timelineTasks, dateRange) {
            const statsContainer = document.getElementById('timelineStats');
            if (!statsContainer) return;
            
            const inProgressCount = timelineTasks.filter(t => t.status === '进行中').length;
            const completedCount = timelineTasks.filter(t => t.status === '已完成').length;
            
            // 格式化日期显示
            let dateDisplay;
            const today = formatDateToLocal(new Date());
            const startDate = new Date(dateRange.start);
            const endDate = new Date(dateRange.end);
            
            if (timelineViewMode === 'day') {
                const isToday = dateRange.start === today;
                dateDisplay = isToday ? '今天' : startDate.toLocaleDateString('zh-CN', { 
                    month: 'long', 
                    day: 'numeric', 
                    weekday: 'long' 
                });
            } else if (timelineViewMode === 'week') {
                const weekNum = getWeekNumber(startDate);
                const year = startDate.getFullYear();
                dateDisplay = `${year}年 第${weekNum}周 (${startDate.toLocaleDateString('zh-CN', {
                    month: 'numeric',
                    day: 'numeric'
                })} - ${endDate.toLocaleDateString('zh-CN', {
                    month: 'numeric',
                    day: 'numeric'
                })})`;
            } else if (timelineViewMode === 'month') {
                dateDisplay = startDate.toLocaleDateString('zh-CN', { 
                    year: 'numeric',
                    month: 'long' 
                });
            }
            
            statsContainer.innerHTML = `
                <div class="timeline-stat">
                    <span class="timeline-stat-label">📅 ${timelineViewMode === 'day' ? '日期' : timelineViewMode === 'week' ? '周' : '月份'}：</span>
                    <span class="timeline-stat-value">${dateDisplay}</span>
                </div>
                <div class="timeline-stat">
                    <span class="timeline-stat-label">🚀 进行中：</span>
                    <span class="timeline-stat-value">${inProgressCount}</span>
                </div>
                <div class="timeline-stat">
                    <span class="timeline-stat-label">✅ 已完成：</span>
                    <span class="timeline-stat-value">${completedCount}</span>
                </div>
                <div class="timeline-stat">
                    <span class="timeline-stat-label">📊 总计：</span>
                    <span class="timeline-stat-value">${timelineTasks.length}</span>
                </div>
            `;
        }
        
        // 获取周数
        function getWeekNumber(date) {
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));
            return Math.ceil((((d - yearStart) / 86400000) + 1)/7);
        }
        
        // 改变时间轴日期
        function changeTimelineDate(direction) {
            // 创建本地日期副本，避免直接修改
            const year = selectedTimelineDate.getFullYear();
            const month = selectedTimelineDate.getMonth();
            const day = selectedTimelineDate.getDate();
            let newDate = new Date(year, month, day);
            
            // 根据视图模式调整步进值
            switch (timelineViewMode) {
                case 'day':
                    newDate = new Date(year, month, day + direction);
                    break;
                case 'week':
                    newDate = new Date(year, month, day + (direction * 7));
                    break;
                case 'month':
                    // 处理月份边界情况
                    if (direction > 0) {
                        // 下个月
                        if (month === 11) {
                            newDate = new Date(year + 1, 0, 1);
                        } else {
                            // 保持日期在月末的处理
                            const nextMonth = month + 1;
                            const daysInNextMonth = new Date(year, nextMonth + 1, 0).getDate();
                            const targetDay = Math.min(day, daysInNextMonth);
                            newDate = new Date(year, nextMonth, targetDay);
                        }
                    } else {
                        // 上个月
                        if (month === 0) {
                            newDate = new Date(year - 1, 11, 1);
                        } else {
                            const prevMonth = month - 1;
                            const daysInPrevMonth = new Date(year, month, 0).getDate();
                            const targetDay = Math.min(day, daysInPrevMonth);
                            newDate = new Date(year, prevMonth, targetDay);
                        }
                    }
                    break;
            }
            
            selectedTimelineDate = newDate;
            
            // 更新日期选择器的值
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker) {
                datePicker.value = formatDateToLocal(selectedTimelineDate);
            }
            
            // 重新渲染时间轴
            renderTodayTimeline();
        }
        
        // 选择今天的日期
        function selectTodayDate() {
            const now = new Date();
            // 创建本地日期，避免时区问题
            selectedTimelineDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            timelineViewMode = 'day'; // 重置为日视图
            
            // 更新视图模式按钮状态
            document.querySelectorAll('.view-mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === 'day');
            });
            
            // 更新日期选择器的值
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker) {
                datePicker.value = formatDateToLocal(selectedTimelineDate);
            }
            
            // 重新渲染时间轴
            renderTodayTimeline();
        }

        // 选择昨天的日期（固定昨天）
        function selectYesterday() {
            const now = new Date();
            const year = now.getFullYear();
            const month = now.getMonth();
            const day = now.getDate();
            // 创建本地日期，昨天
            selectedTimelineDate = new Date(year, month, day - 1);
            
            // 更新日期选择器的值
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker) {
                datePicker.value = formatDateToLocal(selectedTimelineDate);
            }
            
            // 重新渲染时间轴
            renderTodayTimeline();
        }

        // 选择明天的日期（固定明天）
        function selectTomorrow() {
            const now = new Date();
            const year = now.getFullYear();
            const month = now.getMonth();
            const day = now.getDate();
            // 创建本地日期，明天
            selectedTimelineDate = new Date(year, month, day + 1);
            
            // 更新日期选择器的值
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker) {
                datePicker.value = formatDateToLocal(selectedTimelineDate);
            }
            
            // 重新渲染时间轴
            renderTodayTimeline();
        }

        // 选择本周（周一开始）
        function selectThisWeek() {
            const today = new Date();
            const year = today.getFullYear();
            const month = today.getMonth();
            const day = today.getDate();
            const currentDay = today.getDay();
            const mondayOffset = currentDay === 0 ? -6 : 1 - currentDay; // 如果是周日(0)，回退6天；否则前进到周一
            
            // 创建本地日期，本周一
            selectedTimelineDate = new Date(year, month, day + mondayOffset);
            timelineViewMode = 'week'; // 切换到周视图
            
            // 更新视图模式按钮状态
            document.querySelectorAll('.view-mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === 'week');
            });
            
            // 更新日期选择器的值
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker) {
                datePicker.value = formatDateToLocal(selectedTimelineDate);
            }
            
            // 重新渲染时间轴
            renderTodayTimeline();
        }

        // 选择下周（下周一开始）
        function selectNextWeek() {
            const today = new Date();
            const year = today.getFullYear();
            const month = today.getMonth();
            const day = today.getDate();
            const currentDay = today.getDay();
            const nextMondayOffset = currentDay === 0 ? 1 : 8 - currentDay; // 计算到下周一的天数
            
            // 创建本地日期，下周一
            selectedTimelineDate = new Date(year, month, day + nextMondayOffset);
            timelineViewMode = 'week'; // 切换到周视图
            
            // 更新视图模式按钮状态
            document.querySelectorAll('.view-mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === 'week');
            });
            
            // 更新日期选择器的值
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker) {
                datePicker.value = formatDateToLocal(selectedTimelineDate);
            }
            
            // 重新渲染时间轴
            renderTodayTimeline();
        }
        
        // 刷新时间轴视图
        function refreshTimelineView() {
            renderTodayTimeline();
            updateSidebar('today');
            showNotification('时间轴视图已刷新', 'success');
        }
        
        // 按时间段筛选时间轴任务
        function filterTimelineByTimeSlot(timeSlot) {
            const selectedDateStr = formatDateToLocal(selectedTimelineDate);
            const dateTasks = tasks.filter(t => t.fields.plannedDate === selectedDateStr);
            
            let filteredTasks = [];
            switch(timeSlot) {
                case '上午':
                    filteredTasks = dateTasks.filter(t => {
                        const time = t.todayPlannedTime;
                        return time && parseInt(time.split(':')[0]) < 12;
                    });
                    break;
                case '下午':
                    filteredTasks = dateTasks.filter(t => {
                        const time = t.todayPlannedTime;
                        return time && parseInt(time.split(':')[0]) >= 12 && parseInt(time.split(':')[0]) < 18;
                    });
                    break;
                case '晚上':
                    filteredTasks = dateTasks.filter(t => {
                        const time = t.todayPlannedTime;
                        return time && parseInt(time.split(':')[0]) >= 18;
                    });
                    break;
                case '未安排':
                    filteredTasks = dateTasks.filter(t => !t.todayPlannedTime);
                    break;
                default:
                    filteredTasks = dateTasks;
            }
            
            // 重新渲染时间轴，只显示筛选后的任务
            renderTimelineWithFiltered(filteredTasks, timeSlot);
        }

        // 使用筛选后的任务渲染时间轴
        function renderTimelineWithFiltered(filteredTasks, timeSlotFilter) {
            const container = document.getElementById('timelineTaskContainer');
            if (!container) return;
            
            if (filteredTasks.length === 0) {
                container.innerHTML = `<p class="text-muted text-center">当前时间段没有任务</p>`;
                return;
            }
            
            container.innerHTML = filteredTasks.map(task => `
                <div class="timeline-task-item" onclick="viewTaskDetail('${task.id}')">
                    <div class="task-time">${task.todayPlannedTime || '未安排'}</div>
                    <div class="task-content">
                        <div class="task-title">${task.title}</div>
                        <div class="task-meta">
                            <span class="task-type ${task.type.toLowerCase()}">${task.type}</span>
                            <span class="task-status ${task.status.toLowerCase()}">${task.status}</span>
                        </div>
                    </div>
                </div>
            `).join('');
            
            // 显示筛选提示
            showNotification(`已筛选显示 ${timeSlotFilter} 的任务`, 'info');
        }
        
        // 日期选择器改变事件
        function onTimelineDateChange() {
            const datePicker = document.getElementById('timelineDatePicker');
            if (datePicker && datePicker.value) {
                // 创建本地日期，避免时区问题
                const [year, month, day] = datePicker.value.split('-');
                selectedTimelineDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
                renderTodayTimeline();
            }
        }
        
        /* ========================================
           🚀 应用初始化
           ======================================== */
        
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 尝试从 localStorage 加载数据
            const hasData = loadFromLocalStorage();
            
            if (!hasData) {
                // 如果没有保存的数据，生成测试数据
                generateTestData();
            }
            
            // 确保只有一个任务被标记为当前焦点
            ensureOnlyOneCurrentFocus();
            
            // 初始化 filteredTasks
            filteredTasks = tasks;
            
            // 如果有激活的筛选器，应用筛选
            if (hasActiveFilters()) {
                applyFilters();
            }
            
            // 恢复侧边栏折叠状态（仅在桌面端）
            if (window.innerWidth > 960) {
                const isCollapsed = localStorage.getItem('sidebar-collapsed') === 'true';
                if (isCollapsed) {
                    document.getElementById('sidebar').classList.add('collapsed');
                    document.body.classList.add('sidebar-collapsed');
                }
            }
            
            // 渲染初始视图
            switchView(currentView);
            
            // 初始化modal点击空白处关闭功能
            initModalCloseOnClickOutside();
            
            // 绑定全局键盘事件
            document.addEventListener('keydown', function(e) {
                // Esc 关闭模态框
                if (e.key === 'Escape') {
                    document.querySelectorAll('.modal.active').forEach(modal => {
                        modal.classList.remove('active');
                    });
                }
                
                // Ctrl/Cmd + S 保存
                if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                    e.preventDefault();
                    saveToLocalStorage();
                    console.log('✅ 数据已保存');
                }
            });
            
            // 定期自动保存
            setInterval(saveToLocalStorage, 30000); // 每30秒自动保存
            
            // 更新侧边栏统计
            updateSidebarStats();
            
            // 全局点击事件 - 点击其他地方关闭自动完成
            document.addEventListener('click', function(e) {
                const quickAddContainer = document.querySelector('.quick-add-container');
                if (!quickAddContainer.contains(e.target)) {
                    hideAutocomplete();
                }
            });
            
            console.log('🚀 MNTask 看板已启动');
        });
        
        // 更新侧边栏统计
        function updateSidebarStats() {
            // 只更新当前焦点的数量
            document.querySelectorAll('.custom-view-item').forEach(item => {
                const text = item.textContent;
                const countEl = item.querySelector('.text-small.text-muted');
                if (!countEl) return;
                
                if (text.includes('当前焦点')) {
                    countEl.textContent = focusTasks.size;
                }
            });
        }
        
        /* ========================================
           🔍 全局搜索功能
           ======================================== */
        
        // 打开全局搜索
        function openGlobalSearch() {
            const modal = document.getElementById('globalSearchModal');
            const input = document.getElementById('globalSearchInput');
            
            modal.classList.add('active');
            input.value = '';
            input.focus();
            
            // 显示初始搜索结果（最近访问的任务）
            showRecentTasks();
        }
        
        // 执行全局搜索
        function performGlobalSearch() {
            const keyword = document.getElementById('globalSearchInput').value.trim().toLowerCase();
            const includeCompleted = document.getElementById('searchInCompleted').checked;
            const searchInTags = document.getElementById('searchInTags').checked;
            const searchInPath = document.getElementById('searchInPath').checked;
            
            if (!keyword) {
                showRecentTasks();
                return;
            }
            
            // 搜索任务
            const results = tasks.filter(task => {
                // 排除已完成的任务（如果未勾选）
                if (!includeCompleted && task.status === '已完成') {
                    return false;
                }
                
                // 搜索标题
                if (task.title.toLowerCase().includes(keyword)) {
                    return true;
                }
                
                // 搜索路径
                if (searchInPath && task.path && task.path.toLowerCase().includes(keyword)) {
                    return true;
                }
                
                // 搜索标签
                if (searchInTags && task.fields.tags) {
                    return task.fields.tags.some(tag => tag.toLowerCase().includes(keyword));
                }
                
                return false;
            });
            
            // 显示搜索结果
            displaySearchResults(results);
        }
        
        // 显示最近访问的任务
        function showRecentTasks() {
            const recentTasks = tasks
                .filter(task => task.status !== '已完成')
                .sort((a, b) => {
                    // 优先显示焦点任务
                    if (focusTasks.has(a.id) && !focusTasks.has(b.id)) return -1;
                    if (!focusTasks.has(a.id) && focusTasks.has(b.id)) return 1;
                    // 其次按优先级排序
                    const priorityOrder = { '高': 0, '中': 1, '低': 2 };
                    return priorityOrder[a.fields.priority] - priorityOrder[b.fields.priority];
                })
                .slice(0, 10);
            
            const container = document.getElementById('searchResults');
            container.innerHTML = `
                <h4 style="margin-bottom: var(--spacing-md); color: var(--text-secondary);">最近任务</h4>
                ${recentTasks.map(task => createSearchResultItem(task)).join('')}
            `;
        }
        
        // 显示搜索结果
        function displaySearchResults(results) {
            const container = document.getElementById('searchResults');
            
            if (results.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">没有找到匹配的任务</p>';
                return;
            }
            
            container.innerHTML = `
                <h4 style="margin-bottom: var(--spacing-md); color: var(--text-secondary);">
                    搜索结果 (${results.length})
                </h4>
                ${results.map(task => createSearchResultItem(task)).join('')}
            `;
        }
        
        // 创建搜索结果项
        function createSearchResultItem(task) {
            return `
                <div class="search-result-item" onclick="selectSearchResult('${task.id}')" style="
                    padding: var(--spacing-md);
                    margin-bottom: var(--spacing-sm);
                    background: var(--bg-card);
                    border: 1px solid var(--glass-border);
                    border-radius: var(--radius-sm);
                    cursor: pointer;
                    transition: var(--transition);
                ">
                    <div style="display: flex; align-items: center; gap: var(--spacing-sm); margin-bottom: var(--spacing-xs);">
                        <span class="task-type-badge ${task.type.toLowerCase()}">
                            ${getTaskTypeIcon(task.type)} ${task.type}
                        </span>
                        <span class="text-small" style="color: ${getStatusColor(task.status)};">
                            ${getStatusIcon(task.status)} ${task.status}
                        </span>
                        ${focusTasks.has(task.id) ? '<span class="text-small">🎯 焦点</span>' : ''}
                    </div>
                    <div class="font-weight-500">${highlightKeyword(task.title)}</div>
                    <div class="text-small text-muted">${highlightKeyword(task.path)}</div>
                    ${task.fields.tags.length > 0 ? `
                        <div style="margin-top: var(--spacing-xs);">
                            ${task.fields.tags.map(tag => `
                                <span class="filter-tag text-small">${highlightKeyword(tag)}</span>
                            `).join('')}
                        </div>
                    ` : ''}
                </div>
            `;
        }
        
        // 高亮关键词
        function highlightKeyword(text) {
            const keyword = document.getElementById('globalSearchInput').value.trim();
            if (!keyword || !text) return text;
            
            const regex = new RegExp(`(${keyword})`, 'gi');
            return text.replace(regex, '<mark style="background: var(--type-goal); color: white; padding: 0 2px; border-radius: 2px;">$1</mark>');
        }
        
        // 选择搜索结果
        function selectSearchResult(taskId) {
            // 关闭搜索模态框
            closeModal('globalSearchModal');
            
            // 查看任务详情
            viewTaskDetail(taskId);
        }
        
        // 获取状态颜色
        function getStatusColor(status) {
            const colors = {
                '未开始': 'var(--status-todo)',
                '暂停': 'var(--status-pause)',
                '进行中': 'var(--status-doing)',
                '已完成': 'var(--status-done)'
            };
            return colors[status] || 'var(--text-secondary)';
        }
        
        /* ========================================
           ⚙️ 设置功能
           ======================================== */
        
        function openSettings() {
            // 暂时使用 alert，后续可以实现完整的设置界面
            showNotification('设置功能开发中...', 'info');
        }
        
        /* ========================================
           ❓ 帮助功能
           ======================================== */
        
        function openHelp() {
            // 暂时使用 alert，后续可以实现完整的帮助界面
            showNotification('帮助功能开发中...', 'info');
        }
        
        /* ========================================
           📌 计划视图功能
           ======================================== */
        
        // 初始化计划视图选择状态
        function initPlanningSelection() {
            if (!window.selectedPlanningTasks) {
                window.selectedPlanningTasks = new Set();
            }
            console.log('Planning selection initialized');
        }
        
        // 渲染计划视图
        function renderPlanningView() {
            initPlanningSelection(); // 确保选择状态已初始化
            
            // 重要：在渲染完成后更新按钮状态
            setTimeout(() => {
                updatePlanningButtonStates();
                updateSelectedTasksPreview();
                updatePlanningSuggestions();
            }, 0);
            
            const unplannedTasks = getUnplannedTasks();
            
            // 更新计数
            document.getElementById('unplannedCount').textContent = unplannedTasks.length;
            
            // 渲染待规划任务列表
            const unplannedContainer = document.getElementById('unplannedTasksList');
            unplannedContainer.innerHTML = unplannedTasks.map(task => `
                <div class="planning-task-item ${window.selectedPlanningTasks && window.selectedPlanningTasks.has(task.id) ? 'selected' : ''}" 
                     data-task-id="${task.id}"
                     draggable="true"
                     ondragstart="handlePlanningDragStart(event, '${task.id}')"
                     ondragend="handlePlanningDragEnd(event)"
                     ondragover="handlePlanningDragOver(event)"
                     ondrop="handlePlanningDrop(event, '${task.id}')">
                    <div class="task-checkbox">
                        <input type="checkbox" id="planning_${task.id}" 
                               ${window.selectedPlanningTasks && window.selectedPlanningTasks.has(task.id) ? 'checked' : ''}
                               onchange="togglePlanningTaskSelection('${task.id}')">
                        <label for="planning_${task.id}"></label>
                    </div>
                    <div class="task-content" onclick="handleTaskItemClick(event, '${task.id}')">
                        <div class="task-header">
                            <span class="task-type-badge ${task.type.toLowerCase()}">
                                ${getTaskTypeIcon(task.type)} ${task.type}
                            </span>
                            <span class="priority-badge ${task.fields.priority.toLowerCase()}">
                                ${getPriorityIcon(task.fields.priority)}
                            </span>
                            <span class="status-badge ${task.status.toLowerCase()}">
                                ${getStatusIcon(task.status)}
                            </span>
                        </div>
                        <h4 class="task-title">${task.title}</h4>
                        <div class="task-meta">
                            ${task.path ? `<span class="task-path">📍 ${task.path}</span>` : ''}
                            ${task.fields.tags.length > 0 ? `<span class="task-tags">${task.fields.tags.map(tag => `#${tag}`).join(' ')}</span>` : ''}
                        </div>
                    </div>
                </div>
            `).join('') || '<div class="empty-state">🎉 所有任务都已规划完成！</div>';
            
            // 添加拖拽事件监听
            setupPlanningDragAndDrop();
            
            // 填充项目筛选选项
            const projectSelect = document.getElementById('planningFilterProject');
            const projects = [...new Set(tasks.map(t => t.fields.project || t.path).filter(Boolean))];
            projectSelect.innerHTML = '<option value="">全部项目</option>' + 
                projects.map(project => `<option value="${project}">${project}</option>`).join('');
            
            // 应用当前筛选条件
            updatePlanningFilters();
        }
        
        // 获取未规划的任务
        function getUnplannedTasks() {
            return tasks.filter(task => {
                // 只返回动作类型的任务
                if (task.type !== '动作') {
                    return false;
                }
                
                // 已在焦点或待处理中的算作已规划
                if (task.currentFocus || pendingTasks.has(task.id)) {
                    return false;
                }
                
                // 有明确计划日期的算作已规划
                if (task.fields.plannedDate && task.fields.plannedDate !== formatDateToLocal(new Date())) {
                    return false;
                }
                
                // 已完成的任务不需要规划
                if (task.status === '已完成') {
                    return false;
                }
                
                return true;
            });
        }
        
        // 获取已规划的任务
        function getPlannedTasks() {
            return tasks.filter(task => {
                // 只返回动作类型的任务
                if (task.type !== '动作') {
                    return false;
                }
                
                // 在焦点或待处理中的算作已规划
                if (task.currentFocus || pendingTasks.has(task.id)) {
                    return true;
                }
                
                // 有明确计划日期的算作已规划
                if (task.fields.plannedDate && task.fields.plannedDate !== formatDateToLocal(new Date())) {
                    return true;
                }
                
                return false;
            });
        }
        
        // 切换任务选择状态
        function togglePlanningTaskSelection(taskId) {
            if (!window.selectedPlanningTasks) {
                window.selectedPlanningTasks = new Set();
            }
            
            if (window.selectedPlanningTasks.has(taskId)) {
                window.selectedPlanningTasks.delete(taskId);
            } else {
                window.selectedPlanningTasks.add(taskId);
            }
            
            // 更新任务项样式
            const taskItem = document.querySelector(`.planning-task-item[data-task-id="${taskId}"]`);
            if (taskItem) {
                taskItem.classList.toggle('selected', window.selectedPlanningTasks.has(taskId));
            }
            
            console.log('Planning task selection changed:', taskId, 'Total selected:', window.selectedPlanningTasks.size);
            updatePlanningButtonStates();
            updateSelectedTasksPreview();
            updatePlanningSuggestions();
        }
        
        // 处理任务项点击
        function handleTaskItemClick(event, taskId) {
            // 阻止事件冒泡到checkbox
            if (event.target.closest('.task-checkbox')) return;
            
            // 切换checkbox状态
            const checkbox = document.getElementById(`planning_${taskId}`);
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                togglePlanningTaskSelection(taskId);
            }
        }
        
        // 更新选中任务预览
        function updateSelectedTasksPreview() {
            const previewContainer = document.getElementById('selectedTasksPreview');
            const listContainer = document.getElementById('selectedTasksList');
            
            if (!window.selectedPlanningTasks || window.selectedPlanningTasks.size === 0) {
                previewContainer.style.display = 'none';
                return;
            }
            
            previewContainer.style.display = 'block';
            const selectedTasks = Array.from(window.selectedPlanningTasks).map(taskId => 
                tasks.find(t => t.id === taskId)
            ).filter(Boolean);
            
            listContainer.innerHTML = selectedTasks.map(task => `
                <div class="selected-task-item">
                    <span class="task-type-badge ${task.type.toLowerCase()}">
                        ${getTaskTypeIcon(task.type)}
                    </span>
                    <span class="task-title">${task.title}</span>
                    <span class="remove-selected" onclick="removeFromSelection('${task.id}')">✕</span>
                </div>
            `).join('');
        }
        
        // 从选中列表移除任务
        function removeFromSelection(taskId) {
            const checkbox = document.getElementById(`planning_${taskId}`);
            if (checkbox) {
                checkbox.checked = false;
                togglePlanningTaskSelection(taskId);
            }
        }
        
        // 更新规划建议
        function updatePlanningSuggestions() {
            const suggestionsContainer = document.getElementById('planningSuggestions');
            
            if (!window.selectedPlanningTasks || window.selectedPlanningTasks.size === 0) {
                suggestionsContainer.innerHTML = `
                    <p>选择任务后，AI 将为您提供智能规划建议。</p>
                    <ul>
                        <li>高优先级任务建议加入焦点</li>
                        <li>中优先级任务建议加入待处理</li>
                        <li>低优先级任务建议安排到未来日期</li>
                    </ul>
                `;
                return;
            }
            
            const selectedTasks = Array.from(window.selectedPlanningTasks).map(taskId => 
                tasks.find(t => t.id === taskId)
            ).filter(Boolean);
            
            // 分析任务
            const highPriority = selectedTasks.filter(t => t.fields.priority === '高');
            const mediumPriority = selectedTasks.filter(t => t.fields.priority === '中');
            const lowPriority = selectedTasks.filter(t => t.fields.priority === '低');
            
            let suggestions = '<p>基于选中任务的分析：</p><ul>';
            
            if (highPriority.length > 0) {
                suggestions += `<li><strong>${highPriority.length} 个高优先级任务</strong>：建议立即加入焦点任务</li>`;
            }
            if (mediumPriority.length > 0) {
                suggestions += `<li><strong>${mediumPriority.length} 个中优先级任务</strong>：建议加入待处理列表</li>`;
            }
            if (lowPriority.length > 0) {
                suggestions += `<li><strong>${lowPriority.length} 个低优先级任务</strong>：建议安排到本周稍后</li>`;
            }
            
            // 根据焦点任务数量给出建议
            const currentFocusCount = focusTasks.size;
            if (currentFocusCount + highPriority.length > 5) {
                suggestions += `<li>⚠️ 当前已有 ${currentFocusCount} 个焦点任务，建议先完成部分再添加新的</li>`;
            }
            
            suggestions += '</ul>';
            suggestionsContainer.innerHTML = suggestions;
        }
        
        // 拖拽功能 - 使用全局的 draggedTaskId 变量
        // let draggedTaskId = null; // 删除重复声明，使用第 6996 行的全局变量
        
        function handlePlanningDragStart(event, taskId) {
            draggedTaskId = taskId;
            event.target.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', taskId);
        }
        
        function handlePlanningDragEnd(event) {
            event.target.classList.remove('dragging');
            draggedTaskId = null;
        }
        
        function handlePlanningDragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';
            
            const taskItem = event.target.closest('.planning-task-item');
            if (taskItem && taskItem.dataset.taskId !== draggedTaskId) {
                taskItem.classList.add('drag-over');
            }
        }
        
        function handlePlanningDrop(event, targetTaskId) {
            event.preventDefault();
            
            const taskItem = event.target.closest('.planning-task-item');
            if (taskItem) {
                taskItem.classList.remove('drag-over');
            }
            
            if (draggedTaskId && draggedTaskId !== targetTaskId) {
                // 重新排序任务
                reorderPlanningTasks(draggedTaskId, targetTaskId);
            }
        }
        
        function setupPlanningDragAndDrop() {
            const taskItems = document.querySelectorAll('.planning-task-item');
            taskItems.forEach(item => {
                item.addEventListener('dragleave', function() {
                    this.classList.remove('drag-over');
                });
            });
        }
        
        function reorderPlanningTasks(sourceId, targetId) {
            // 这里可以实现任务重新排序的逻辑
            console.log('Reordering planning tasks:', sourceId, 'to', targetId);
            // 暂时只刷新视图
            renderPlanningView();
        }
        
        // 更新规划按钮状态
        function updatePlanningButtonStates() {
            const selectedCount = window.selectedPlanningTasks ? window.selectedPlanningTasks.size : 0;
            const buttons = document.querySelectorAll('.planning-btn:not(.primary)'); // 排除主按钮
            
            console.log('Updating planning button states, selected count:', selectedCount, 'buttons found:', buttons.length);
            
            buttons.forEach(btn => {
                // 只在没有选择时禁用按钮
                btn.disabled = selectedCount === 0;
                // 不需要手动设置 opacity，CSS 会处理
                
                const text = btn.textContent.trim();
                if (selectedCount > 0) {
                    if (text.includes('批量')) {
                        // 更新计数显示
                        if (text.includes('(')) {
                            btn.textContent = text.replace(/\(\d+\)/, `(${selectedCount})`);
                        } else {
                            btn.textContent = text + ` (${selectedCount})`;
                        }
                    }
                } else {
                    // 移除计数显示
                    btn.textContent = text.replace(/\s*\(\d+\)/, '');
                }
            });
        }
        
        // 更新规划筛选
        function updatePlanningFilters() {
            if (currentView !== 'planning') return;
            
            const priorityFilter = document.getElementById('planningFilterPriority').value;
            const projectFilter = document.getElementById('planningFilterProject').value;
            
            const taskItems = document.querySelectorAll('.planning-task-item');
            
            taskItems.forEach(item => {
                const taskId = item.dataset.taskId;
                const task = tasks.find(t => t.id === taskId);
                if (!task) return;
                
                let show = true;
                
                // 优先级筛选
                if (priorityFilter && task.fields.priority !== priorityFilter) {
                    show = false;
                }
                
                // 项目筛选
                if (projectFilter && task.fields.project !== projectFilter && task.path !== projectFilter) {
                    show = false;
                }
                
                item.style.display = show ? 'flex' : 'none';
            });
        }
        
        // 批量添加到待处理
        function bulkAddToPending() {
            console.log('bulkAddToPending called, selected tasks:', window.selectedPlanningTasks);
            
            if (!window.selectedPlanningTasks || window.selectedPlanningTasks.size === 0) {
                showNotification('请先选择要添加的任务', 'warning');
                return;
            }
            
            let addedCount = 0;
            const addedTasks = [];
            window.selectedPlanningTasks.forEach(taskId => {
                if (!pendingTasks.has(taskId)) {
                    pendingTasks.add(taskId);
                    pendingTasksOrder.push(taskId);
                    const task = tasks.find(t => t.id === taskId);
                    if (task) addedTasks.push(task);
                    addedCount++;
                    console.log('Added task to pending:', taskId);
                }
            });
            
            if (addedCount > 0) {
                showNotification(`已将 ${addedCount} 个任务添加到待处理`, 'success');
                saveToLocalStorage();
                showPlanningResult('pending', addedTasks);
                clearPlanningSelection();
                renderPlanningView();
            } else {
                showNotification('选中的任务已在待处理列表中', 'info');
            }
        }
        
        // 批量添加到焦点
        function bulkAddToFocus() {
            if (!window.selectedPlanningTasks || window.selectedPlanningTasks.size === 0) {
                showNotification('请先选择要添加的任务', 'warning');
                return;
            }
            
            let addedCount = 0;
            const addedTasks = [];
            window.selectedPlanningTasks.forEach(taskId => {
                const task = tasks.find(t => t.id === taskId);
                if (task && !task.currentFocus) {
                    task.currentFocus = true;
                    focusTasks.add(taskId);
                    focusTasksOrder.push(taskId);
                    addedTasks.push(task);
                    addedCount++;
                }
            });
            
            if (addedCount > 0) {
                showNotification(`已将 ${addedCount} 个任务添加到焦点`, 'success');
                saveToLocalStorage();
                showPlanningResult('focus', addedTasks);
                clearPlanningSelection();
                renderPlanningView();
            } else {
                showNotification('选中的任务已在焦点列表中', 'info');
            }
        }
        
        // 显示规划结果
        function showPlanningResult(type, tasksList) {
            const resultContainer = document.getElementById('planningResultPreview');
            const statsContainer = document.getElementById('resultStats');
            
            resultContainer.style.display = 'block';
            
            let stats = '';
            if (type === 'focus') {
                stats = `
                    <div class="stat-item">
                        <span>新增焦点任务</span>
                        <span class="stat-value">${tasksList.length}</span>
                    </div>
                    <div class="stat-item">
                        <span>当前焦点总数</span>
                        <span class="stat-value">${focusTasks.size}</span>
                    </div>
                `;
            } else if (type === 'pending') {
                stats = `
                    <div class="stat-item">
                        <span>新增待处理</span>
                        <span class="stat-value">${tasksList.length}</span>
                    </div>
                    <div class="stat-item">
                        <span>待处理总数</span>
                        <span class="stat-value">${pendingTasks.size}</span>
                    </div>
                `;
            } else if (type === 'scheduled') {
                const dates = [...new Set(tasksList.map(t => t.fields.plannedDate))];
                stats = `
                    <div class="stat-item">
                        <span>已安排任务</span>
                        <span class="stat-value">${tasksList.length}</span>
                    </div>
                    <div class="stat-item">
                        <span>分布天数</span>
                        <span class="stat-value">${dates.length}</span>
                    </div>
                `;
            }
            
            statsContainer.innerHTML = stats;
            
            // 3秒后隐藏结果
            setTimeout(() => {
                resultContainer.style.display = 'none';
            }, 3000);
        }
        
        // 安排明天执行
        function scheduleTasksForTomorrow() {
            if (!window.selectedPlanningTasks || window.selectedPlanningTasks.size === 0) {
                showNotification('请先选择要安排的任务', 'warning');
                return;
            }
            
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const tomorrowStr = formatDateToLocal(tomorrow);
            
            let scheduledCount = 0;
            const scheduledTasks = [];
            window.selectedPlanningTasks.forEach(taskId => {
                const task = tasks.find(t => t.id === taskId);
                if (task) {
                    task.fields.plannedDate = tomorrowStr;
                    scheduledTasks.push(task);
                    scheduledCount++;
                }
            });
            
            if (scheduledCount > 0) {
                showNotification(`已将 ${scheduledCount} 个任务安排到明天`, 'success');
                saveToLocalStorage();
                showPlanningResult('scheduled', scheduledTasks);
                clearPlanningSelection();
                renderPlanningView();
            }
        }
        
        // 安排本周执行
        function scheduleTasksForWeek() {
            if (!window.selectedPlanningTasks || window.selectedPlanningTasks.size === 0) {
                showNotification('请先选择要安排的任务', 'warning');
                return;
            }
            
            // 简单分配：从明天开始的一周内
            const baseDate = new Date();
            baseDate.setDate(baseDate.getDate() + 1);
            
            let scheduledCount = 0;
            const scheduledTasks = [];
            const taskArray = Array.from(window.selectedPlanningTasks);
            
            taskArray.forEach((taskId, index) => {
                const task = tasks.find(t => t.id === taskId);
                if (task) {
                    const scheduleDate = new Date(baseDate);
                    scheduleDate.setDate(baseDate.getDate() + (index % 7)); // 分布到一周内
                    task.fields.plannedDate = formatDateToLocal(scheduleDate);
                    scheduledTasks.push(task);
                    scheduledCount++;
                }
            });
            
            if (scheduledCount > 0) {
                showNotification(`已将 ${scheduledCount} 个任务安排到本周`, 'success');
                saveToLocalStorage();
                showPlanningResult('scheduled', scheduledTasks);
                clearPlanningSelection();
                renderPlanningView();
            }
        }
        
        // 刷新规划视图
        function refreshPlanningView() {
            renderPlanningView();
            updateSidebar('planning');
            showNotification('规划视图已刷新', 'success');
        }
        
        // 清空规划选择
        function clearPlanningSelection() {
            console.log('clearPlanningSelection called');
            
            if (window.selectedPlanningTasks) {
                const previousCount = window.selectedPlanningTasks.size;
                window.selectedPlanningTasks.clear();
                console.log('Cleared', previousCount, 'selected tasks');
            }
            
            // 清除所有复选框
            const checkboxes = document.querySelectorAll('.planning-task-item input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            showNotification('已清空选择', 'success');
            updatePlanningButtonStates();
        }
        
        // 全选待规划任务
        function selectAllUnplanned() {
            console.log('selectAllUnplanned called');
            
            if (!window.selectedPlanningTasks) {
                window.selectedPlanningTasks = new Set();
            }
            
            const visibleTasks = document.querySelectorAll('.planning-task-item:not([style*="display: none"])');
            console.log('Found visible tasks:', visibleTasks.length);
            
            visibleTasks.forEach(item => {
                const taskId = item.dataset.taskId;
                if (taskId) {
                    window.selectedPlanningTasks.add(taskId);
                    const checkbox = item.querySelector('input[type="checkbox"]');
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                }
            });
            
            showNotification(`已选择 ${visibleTasks.length} 个任务`, 'success');
            updatePlanningButtonStates();
        }
        
        // 按优先级筛选规划任务
        function filterPlanningByPriority(priority) {
            document.getElementById('planningFilterPriority').value = priority;
            updatePlanningFilters();
        }
        
        // 按类型筛选规划任务（已移除，因为现在只显示动作任务）
        function filterPlanningByType(type) {
            // 不再需要类型筛选，因为现在只显示动作任务
            showNotification('计划视图仅显示动作类型任务', 'info');
        }
        
        // 按状态筛选规划任务
        function filterPlanningByStatus(status) {
            // 这里可以添加状态筛选逻辑
            showNotification(`筛选功能开发中：${status}`, 'info');
        }
        
        // 智能安排任务
        function autoScheduleTasks() {
            console.log('autoScheduleTasks called');
            
            const unplannedTasks = getUnplannedTasks();
            if (unplannedTasks.length === 0) {
                showNotification('没有需要安排的任务', 'info');
                return;
            }
            
            console.log('Found unplanned tasks:', unplannedTasks.length);
            
            // 智能安排逻辑：
            // 1. 高优先级动作任务 → 待处理
            // 2. 高优先级其他任务 → 焦点
            // 3. 中优先级动作任务 → 明天
            // 4. 其他任务 → 本周分散
            
            const highPriorityActions = unplannedTasks.filter(t => t.fields.priority === '高' && t.type === '动作');
            const highPriorityOthers = unplannedTasks.filter(t => t.fields.priority === '高' && t.type !== '动作');
            const mediumPriorityActions = unplannedTasks.filter(t => t.fields.priority === '中' && t.type === '动作');
            const otherTasks = unplannedTasks.filter(t => t.fields.priority !== '高' && !(t.fields.priority === '中' && t.type === '动作'));
            
            let scheduledCount = 0;
            
            // 1. 高优先级动作任务 → 焦点（最多3个）
            highPriorityActions.slice(0, 3).forEach(task => {
                if (!task.currentFocus) {
                    task.currentFocus = true;
                    focusTasks.add(task.id);
                    focusTasksOrder.push(task.id);
                    scheduledCount++;
                    console.log('Added to focus:', task.title);
                }
            });
            
            // 2. 高优先级其他任务 → 焦点（最多2个）
            highPriorityOthers.slice(0, 2).forEach(task => {
                if (!task.currentFocus) {
                    task.currentFocus = true;
                    focusTasks.add(task.id);
                    focusTasksOrder.push(task.id);
                    scheduledCount++;
                    console.log('Added to focus:', task.title);
                }
            });
            
            // 3. 中优先级动作任务 → 待处理（最多5个）
            mediumPriorityActions.slice(0, 5).forEach(task => {
                if (!pendingTasks.has(task.id)) {
                    pendingTasks.add(task.id);
                    pendingTasksOrder.push(task.id);
                    scheduledCount++;
                    console.log('Added to pending:', task.title);
                }
            });
            
            // 4. 其他任务 → 分配到未来几天（最多10个）
            const today = new Date();
            otherTasks.slice(0, 10).forEach((task, index) => {
                const scheduleDate = new Date(today);
                scheduleDate.setDate(today.getDate() + Math.floor(index / 2) + 1); // 每两个任务安排到同一天
                task.fields.plannedDate = formatDateToLocal(scheduleDate);
                scheduledCount++;
                console.log('Scheduled for', formatDateToLocal(scheduleDate), ':', task.title);
            });
            
            if (scheduledCount > 0) {
                const details = [
                    `焦点任务: ${Math.min(3, highPriorityActions.length) + Math.min(2, highPriorityOthers.length)}`,
                    `待处理: ${Math.min(5, mediumPriorityActions.length)}`,
                    `计划日期: ${Math.min(10, otherTasks.length)}`
                ].filter(d => !d.includes(': 0')).join(', ');
                
                showNotification(`智能安排完成 (${details})`, 'success');
                saveToLocalStorage();
                renderPlanningView();
            } else {
                showNotification('所有任务都已安排完成', 'info');
            }
        }
        
        // 绑定全局快捷键
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + K 打开搜索
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                openGlobalSearch();
            }
        });
        
        /* ========================================
           🌟 页面加载完成后初始化
           ======================================== */
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化响应式侧边栏
            initResponsiveSidebar();
            
            // 初始化快速进展键盘快捷键
            setupQuickProgressKeyboardShortcuts();
            
            // 加载保存的数据
            if (!loadFromLocalStorage()) {
                // 如果没有保存的数据，生成测试数据
                generateTestData();
            }
            
            // 确保只有一个任务被标记为当前焦点
            ensureOnlyOneCurrentFocus();
            
            // 初始渲染
            switchView(currentView);
            
            console.log('✅ MNTask 任务看板初始化完成');
        });
    </script>
</body>
</html>