{
  "currentState": "memory_saved",
  "stateHistory": [
    {
      "from": "initial",
      "command": "init",
      "timestamp": "2025-06-26T15:48:11.309Z",
      "args": [
        {
          "workingDirectory": "/Users/xiakangwei/Nutstore/Github/repository/MN-addon-develop/mntoolbar"
        }
      ]
    },
    {
      "from": "initialized",
      "command": "remember",
      "timestamp": "2025-06-26T15:52:01.624Z",
      "args": [
        "# MN Toolbar Pro 项目完整分析\n\n## 项目概述\n- **项目名称**: MN Toolbar Pro\n- **基础**: 基于林立飞开发的 MN Toolbar 插件\n- **版本**: 0.1.3.alpha0427\n- **插件ID**: marginnote.extension.mntoolbar\n- **支持版本**: MarginNote 3.7.11+\n- **平台**: iOS/iPadOS/macOS\n\n## 项目结构\n\n### 核心文件\n1. **main.js** (1021行)\n   - 插件主入口文件\n   - 定义 MNToolbarClass 继承自 JSExtension\n   - 管理插件生命周期 (sceneWillConnect, notebookWillOpen等)\n   - 处理各种通知事件 (PopupMenuOnNote, toggleDynamic等)\n   - 动态工具栏的显示/隐藏逻辑\n\n2. **webviewController.js** (3700+行)\n   - 工具栏UI控制器 (toolbarController)\n   - 处理按钮布局 (水平/垂直)\n   - 手势识别 (拖动、调整大小、长按)\n   - 自定义动作执行器 (customActionByDes)\n   - 支持最多30个按钮\n\n3. **utils.js** (10068行)\n   - Frame类: UI框架操作工具\n   - toolbarUtils类: 核心工具函数集合\n   - 包含大量功能模块:\n     - 文本处理 (markdown转换、OCR、复制粘贴)\n     - 卡片操作 (制卡、合并、链接管理)\n     - 任务管理 (OKR系统)\n     - 文献管理 (参考文献、作者、期刊)\n     - 模板系统\n\n4. **settingController.js**\n   - 设置界面管理\n   - 按钮配置编辑器\n   - iCloud同步设置\n\n### 配置文件\n- **toolbar_config.json**: 工具栏配置存储\n  - windowState: 窗口状态和位置\n  - actionKeys: 固定工具栏按钮配置\n  - dynamicActionKeys: 动态工具栏按钮配置\n  - actions: 所有可用动作的定义\n  - popupConfig: 弹出菜单替换配置\n\n## 主要功能模块\n\n### 1. 动态工具栏系统\n- 支持水平/垂直布局切换\n- 可根据上下文自动显示/隐藏\n- 支持拖动和调整大小\n- 最多支持30个按钮\n\n### 2. 卡片操作功能\n- **制卡系统**:\n  - 模板制卡 (TemplateMakeNotes)\n  - 批量制卡\n  - 文献制卡 (论文、书籍、期刊)\n  - OKR任务卡片 (目标、关键结果、项目、任务)\n  \n- **卡片管理**:\n  - 合并到父卡片\n  - 链接管理 (单向/双向)\n  - 颜色标记 (16种颜色)\n  - 标题前缀管理\n\n### 3. 学习辅助功能\n- **证明管理**: 添加、更新、移动证明内容\n- **思考点系统**: 添加思考点、移动评论到思考区\n- **评论管理**: HTML/Markdown评论、评论分级\n- **引用管理**: 文献引用、作者信息、期刊信息\n\n### 4. 文本处理功能\n- OCR识别\n- Markdown/HTML转换\n- 标题格式化\n- 空格处理\n- 复制/粘贴增强\n\n### 5. 集成功能\n- MN Editor: 卡片编辑器\n- MN Browser: 内置浏览器\n- MN OCR: 文字识别\n- MN ChatAI: AI对话\n- MN Snipaste: 截图工具\n- Bigbang: 文本处理\n\n## 技术特点\n\n### JSBridge架构\n- 使用 JSB.defineClass 定义原生类\n- 通过 JSB.require 加载模块\n- 支持原生UI组件 (UIButton, UIView等)\n\n### 设计模式\n- **单例模式**: 通过 getFooController() 获取实例\n- **观察者模式**: NSNotificationCenter 通知机制\n- **命令模式**: 动作配置系统\n\n### 内存管理\n- 在 sceneDidDisconnect/notebookWillClose 中清理资源\n- 移除通知观察者\n- 清理定时器和手势识别器\n\n### 平台兼容\n- 检测平台类型 (iOS/macOS)\n- 处理平台差异 (鼠标/触摸)\n- 适配不同屏幕尺寸\n\n## 自定义动作系统\n\n### 动作类型\n1. **基础动作**: copy, paste, undo, redo\n2. **卡片动作**: 制卡、合并、链接\n3. **文本动作**: OCR、格式化、翻译\n4. **学习动作**: 证明、思考点、评论\n5. **工具动作**: 搜索、编辑器、浏览器\n\n### 动作配置结构\n```json\n{\n  \"action\": \"动作名称\",\n  \"target\": \"目标\",\n  \"menuItems\": [], // 子菜单\n  \"doubleClick\": {}, // 双击动作\n  \"onLongPress\": {} // 长按动作\n}\n```\n\n## 任务管理系统 (OKR)\n\n### 卡片类型\n- **目标** (Objective): 黄色\n- **关键结果** (Key Result): 淡黄色/白色\n- **项目** (Project): 蓝色/深蓝色\n- **任务** (Task): 淡蓝色/淡粉色/灰色\n\n### 状态管理\n- 未开始\n- 进行中 (带时间标签)\n- 已完成 (灰色)\n\n### 特殊功能\n- 自动添加时间标签\n- 父子卡片链接\n- 状态颜色自动切换\n- 标题前缀管理\n\n## 文献管理系统\n\n### 功能模块\n1. **参考文献ID管理**\n   - 绑定文献ID到文档\n   - 导入/导出ID映射\n   - 批量处理引用\n\n2. **文献卡片类型**\n   - 论文卡片\n   - 书籍卡片\n   - 期刊卡片\n   - 作者卡片\n   - 关键词卡片\n\n3. **信息管理**\n   - BibTeX信息\n   - DOI管理\n   - 引用样式\n   - 作者缩写\n\n## 配置与扩展\n\n### 按钮配置\n- 36个自定义按钮位置\n- 每个按钮可配置:\n  - 图标\n  - 动作\n  - 双击行为\n  - 长按菜单\n\n### 弹窗替换\n- 可替换MarginNote原生弹窗\n- 支持自定义菜单项\n- 保持原有功能\n\n### iCloud同步\n- 配置文件同步\n- 冲突检测\n- 手动/自动同步\n\n## 开发规范\n\n### 命名规范\n- 类: PascalCase\n- 函数/变量: camelCase\n- 常量: UPPER_CASE\n- 文件: camelCase.js\n\n### 错误处理\n- try-catch包装主要方法\n- 错误日志: toolbarUtils.addErrorLog()\n- 用户提示: MNUtil.showHUD()\n\n### 生命周期管理\n1. 初始化: sceneWillConnect\n2. 笔记本打开: notebookWillOpen\n3. 笔记本关闭: notebookWillClose\n4. 断开连接: sceneDidDisconnect\n\n### 性能优化\n- 延迟加载\n- 批量操作使用undoGrouping\n- 大文件分段处理\n- 动画优化\n\n## 项目特色\n\n1. **高度可定制**: 几乎所有功能都可自定义\n2. **强大的卡片系统**: 支持复杂的知识管理工作流\n3. **专业的学习工具**: 针对学术研究优化\n4. **良好的扩展性**: 模块化设计，易于添加新功能\n5. **跨平台兼容**: 同时支持iOS和macOS\n\n## 待实现功能 (TODO)\n- 找到配置文件的位置，实现两个 toolbar 共存",
        "--tags",
        "MN-Toolbar-Pro MarginNote 插件开发 知识管理 学习工具"
      ]
    },
    {
      "from": "memory_saved",
      "command": "remember",
      "timestamp": "2025-06-26T18:54:36.666Z",
      "args": [
        "MN Toolbar Pro 项目 - 成功实现自定义 Actions 解耦（2025.6.27）\n\n## 任务背景\n用户在 webviewController.js 的 customActionByDes 方法中添加了 198 个自定义 case，导致文件过大（264KB），需要解耦。\n\n## 失败的尝试\n1. Prototype 覆盖方式：尝试通过 toolbarController.prototype.customActionByDes 覆盖方法，但 JSB 框架限制导致失败\n2. 错误问题：\n   - undefined is not an object (evaluating 'self.addonController.popupReplace') - 通过添加 self.ensureView() 解决\n   - ReferenceError: Can't find variable: toolbarController - 尝试了延迟初始化等多种方案都失败\n\n## 成功的解决方案 - 注册表模式\n1. 最小化修改主文件（仅在 default 分支添加 4 行代码）\n2. 创建全局注册表存储自定义 actions\n3. 实现了真正的解耦，所有自定义代码在独立文件中管理\n\n## 技术要点\n1. JSB 框架中不能在函数内使用 break 语句，需要移除\n2. 复杂的 switch 语句（如 TemplateMakeNotes 150+ 行）需要简化处理\n3. 使用 Python 脚本自动化迁移过程\n4. 创建多个版本（基础版、精选版、完整版）便于测试\n\n## 成果\n- 成功迁移 198 个自定义 actions\n- 主文件从 264KB 减少到 95KB（减少 64%）\n- 保持向后兼容性\n- 易于维护和扩展\n\n## 文件列表\n- xdyy_custom_actions_registry_full.js - 完整版（198个actions）\n- xdyy_custom_actions_registry_complete.js - 精选版（30个actions）\n- xdyy_custom_actions_registry.js - 基础版（5个actions）\n- convert_to_registry.py - 自动转换脚本",
        "--tags",
        "MNToolbar JSB 解耦 注册表模式 MarginNote 插件开发"
      ]
    },
    {
      "from": "memory_saved",
      "command": "remember",
      "timestamp": "2025-06-27T04:57:45.390Z",
      "args": [
        "MN Toolbar Pro - 自定义 Actions 解耦完整经验总结（2025.6.27）\n\n## 项目背景\n用户在 webviewController.js 中添加了 198 个自定义 case，导致文件过大（264KB），需要解耦并改善代码组织。\n\n## 解决方案演进\n\n### 失败的尝试\n1. **Prototype 覆盖方式**\n   - 尝试：toolbarController.prototype.customActionByDes = function() \n   - 失败原因：JSB 框架限制，prototype 修改不生效\n   - 表现：自定义 actions 进入 default 分支显示 \"Not supported yet...\"\n\n2. **错误处理经验**\n   - undefined is not an object (evaluating 'self.addonController.popupReplace')\n   - 解决：添加 self.ensureView() 确保初始化\n   - ReferenceError: Can't find variable: toolbarController\n   - 多种尝试均失败，最终放弃 prototype 方式\n\n### 成功的注册表模式\n1. **架构设计**\n   ```javascript\n   // 全局注册表\n   global.customActions = {};\n   \n   // 注册函数\n   global.registerCustomAction = function(name, handler) {\n     global.customActions[name] = handler;\n   };\n   \n   // 主文件仅修改 default 分支\n   default:\n     if (typeof global !== 'undefined' && global.executeCustomAction) {\n       const handled = await global.executeCustomAction(des.action, context);\n       if (handled) break;\n     }\n   ```\n\n2. **Context 机制**\n   - 原因：独立函数无法访问原函数作用域变量\n   - 解决：打包所有需要的变量传递\n   - 包含：button, des, focusNote, focusNotes, self\n\n## 技术要点\n\n### JSB 框架限制\n1. 函数内不能使用 break 语句\n2. 复杂 switch 语句需要简化处理\n3. 方法调用可能不通过标准原型链\n4. 类定义和实例化时机难以控制\n\n### 批量迁移工具\n1. **Python 脚本 (convert_to_registry.py)**\n   - 自动提取 198 个 cases\n   - 移除 break 语句\n   - 处理特殊的 switch 语句\n   - 按功能分组（reference、move、proof 等）\n\n2. **特殊处理的复杂 Actions**\n   - TemplateMakeNotes (150+ 行)\n   - addHtmlMarkdownComment\n   - mergeInParentNoteWithPopup\n   - 这些被简化为核心功能版本\n\n### 代码格式化\n1. **缩进问题**\n   - Python 脚本生成的代码缩进不规范\n   - 创建 fix_indentation.js 修复缩进\n   - 统一使用 2 空格缩进\n\n2. **语法验证**\n   - 使用 node -c filename.js 检查语法\n   - 分阶段测试确保功能正常\n\n## 文件组织策略\n\n### 版本管理\n1. 基础版 (5个 actions) - 用于测试\n2. 精选版 (30个 actions) - 常用功能\n3. 完整版 (198个 actions) - 所有功能\n\n### 文档集中化\n1. 删除中间文档（6个 md 文件）\n2. 所有经验集中到 CLAUDE.md\n3. 保留核心文件：\n   - xdyy_custom_actions_registry.js\n   - convert_to_registry.py\n   - xdyy_utils_extensions.js\n\n## 成果数据\n- 主文件：264KB → 95KB（减少 64%）\n- 代码行数：6555 → 2599（减少 60%）\n- 主文件修改：仅 4 行\n- 成功迁移：198 个 actions\n\n## 最佳实践总结\n\n### 开发流程\n1. 在注册表文件中添加新 action\n2. 特殊变量在函数内部定义\n3. 共享常量在 registerAllCustomActions 顶部定义\n4. 使用 MNUtil.undoGrouping 包装批量操作\n5. 始终包含 try-catch 错误处理\n\n### 调试技巧\n1. 启动时查看加载提示\n2. 使用 MNUtil.showHUD 显示调试信息\n3. 检查 Console 错误信息\n4. 验证 context 变量是否正确传递\n\n### MarginNote API 常用方法\n- MNNote.getFocusNote() - 获取当前卡片\n- MNUtil.undoGrouping() - 批量操作\n- MNUtil.showHUD() - 显示提示\n- UIAlertView.show... - 弹窗交互\n- focusNote.moveToInput() - 移动卡片\n\n## 经验教训\n1. JSB 框架有独特限制，标准 JS 模式可能不适用\n2. 注册表模式比 prototype 覆盖更可靠\n3. 渐进式测试比一次性迁移更安全\n4. 良好的错误处理至关重要\n5. 文档集中管理便于维护",
        "--tags",
        "MNToolbar MarginNote JSB 代码解耦 注册表模式 JavaScript 插件开发"
      ]
    },
    {
      "from": "memory_saved",
      "command": "init",
      "timestamp": "2025-06-27T06:17:44.224Z",
      "args": [
        {
          "workingDirectory": "/Users/xiakangwei/Nutstore/Github/repository/MN-addon-develop/mntoolbar"
        }
      ]
    },
    {
      "from": "initialized",
      "command": "remember",
      "timestamp": "2025-06-27T07:06:21.058Z",
      "args": [
        "MN Toolbar Pro 注册表解耦实践经验：\n\n1. 解耦架构：\n   - 主文件（webviewController.js）只需添加 4 行代码的钩子\n   - 所有自定义功能在独立的注册表文件（xdyy_custom_actions_registry.js）中管理\n   - 通过 global 对象实现模块间通信\n\n2. 关键问题与解决：\n   - 变量未定义：在 customActionByDes 函数中需要同时声明 focusNote 和 focusNotes\n   - 函数未定义：确保在 main.js 中按正确顺序加载所有依赖文件\n   - 扩展初始化：在扩展文件末尾添加自动初始化代码\n\n3. 调试技巧：\n   - 使用 MNUtil.log() 而不是 console.log()\n   - 渐进式调试：先确认文件加载→再确认对象存在→最后确认功能执行\n   - 使用有意义的日志前缀（🔧初始化、✅成功、❌错误、🔍调试、🚀执行、📦加载）\n\n4. 最佳实践：\n   - 主文件修改最小化\n   - 使用 typeof 检查对象存在性\n   - 错误处理使用 try-catch\n   - 通过 context 对象传递所有必要数据\n\n5. 成果：\n   - 成功注册 198 个自定义 actions\n   - 实现了完全的模块化解耦\n   - 未来添加新功能无需修改主文件",
        "--tags",
        "MN-Toolbar 解耦 注册表模式 JSB框架"
      ]
    }
  ],
  "lastUpdated": "2025-06-27T07:06:21.102Z"
}
